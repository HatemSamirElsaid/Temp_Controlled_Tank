
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001766  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001766  000017fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  000017fc  2**0
                  ALLOC
  3 .stab         00002e80  00000000  00000000  000017fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b9c  00000000  00000000  0000467c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c3 0a 	call	0x1586	; 0x1586 <main>
      8a:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	df 93       	push	r29
      a0:	cf 93       	push	r28
      a2:	cd b7       	in	r28, 0x3d	; 61
      a4:	de b7       	in	r29, 0x3e	; 62
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 6c 00 	sts	0x006C, r24
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	8f 91       	pop	r24
      b2:	0f 90       	pop	r0
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	0f 90       	pop	r0
      b8:	1f 90       	pop	r1
      ba:	18 95       	reti

000000bc <Calc_Average>:

ISR (TIMER2_OVF_vect){
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <Calc_Average+0x6>
      c2:	00 d0       	rcall	.+0      	; 0xc4 <Calc_Average+0x8>
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
	u16 result = 0;
      c8:	1c 82       	std	Y+4, r1	; 0x04
      ca:	1b 82       	std	Y+3, r1	; 0x03
	for(int i=0;i<5;i++){
      cc:	1a 82       	std	Y+2, r1	; 0x02
      ce:	19 82       	std	Y+1, r1	; 0x01
      d0:	13 c0       	rjmp	.+38     	; 0xf8 <Calc_Average+0x3c>
		result+=Temp_arr[i];
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	9a 81       	ldd	r25, Y+2	; 0x02
      d6:	fc 01       	movw	r30, r24
      d8:	ed 59       	subi	r30, 0x9D	; 157
      da:	ff 4f       	sbci	r31, 0xFF	; 255
      dc:	80 81       	ld	r24, Z
      de:	28 2f       	mov	r18, r24
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	8b 81       	ldd	r24, Y+3	; 0x03
      e4:	9c 81       	ldd	r25, Y+4	; 0x04
      e6:	82 0f       	add	r24, r18
      e8:	93 1f       	adc	r25, r19
      ea:	9c 83       	std	Y+4, r25	; 0x04
      ec:	8b 83       	std	Y+3, r24	; 0x03
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
	u16 result = 0;
	for(int i=0;i<5;i++){
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	9a 81       	ldd	r25, Y+2	; 0x02
      f2:	01 96       	adiw	r24, 0x01	; 1
      f4:	9a 83       	std	Y+2, r25	; 0x02
      f6:	89 83       	std	Y+1, r24	; 0x01
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	85 30       	cpi	r24, 0x05	; 5
      fe:	91 05       	cpc	r25, r1
     100:	44 f3       	brlt	.-48     	; 0xd2 <Calc_Average+0x16>
		result+=Temp_arr[i];
	}
	result /=5;
     102:	8b 81       	ldd	r24, Y+3	; 0x03
     104:	9c 81       	ldd	r25, Y+4	; 0x04
     106:	25 e0       	ldi	r18, 0x05	; 5
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	b9 01       	movw	r22, r18
     10c:	0e 94 9d 0b 	call	0x173a	; 0x173a <__udivmodhi4>
     110:	cb 01       	movw	r24, r22
     112:	9c 83       	std	Y+4, r25	; 0x04
     114:	8b 83       	std	Y+3, r24	; 0x03
	return (u8)result;
     116:	8b 81       	ldd	r24, Y+3	; 0x03
}
     118:	0f 90       	pop	r0
     11a:	0f 90       	pop	r0
     11c:	0f 90       	pop	r0
     11e:	0f 90       	pop	r0
     120:	cf 91       	pop	r28
     122:	df 91       	pop	r29
     124:	08 95       	ret

00000126 <Update_Temp>:

void Update_Temp(void){
     126:	df 93       	push	r29
     128:	cf 93       	push	r28
     12a:	00 d0       	rcall	.+0      	; 0x12c <Update_Temp+0x6>
     12c:	00 d0       	rcall	.+0      	; 0x12e <Update_Temp+0x8>
     12e:	00 d0       	rcall	.+0      	; 0x130 <Update_Temp+0xa>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
	u8 Var1,Var2;
	if(Counter==13){
     134:	80 91 62 00 	lds	r24, 0x0062
     138:	8d 30       	cpi	r24, 0x0D	; 13
     13a:	09 f0       	breq	.+2      	; 0x13e <Update_Temp+0x18>
     13c:	45 c0       	rjmp	.+138    	; 0x1c8 <Update_Temp+0xa2>
		Timer2_Stop();
     13e:	0e 94 37 02 	call	0x46e	; 0x46e <Timer2_Stop>
		Blink_Status = !Blink_Status;
     142:	80 91 6a 00 	lds	r24, 0x006A
     146:	1e 82       	std	Y+6, r1	; 0x06
     148:	88 23       	and	r24, r24
     14a:	11 f4       	brne	.+4      	; 0x150 <Update_Temp+0x2a>
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	8e 83       	std	Y+6, r24	; 0x06
     150:	8e 81       	ldd	r24, Y+6	; 0x06
     152:	80 93 6a 00 	sts	0x006A, r24
		u8 Temp = 70/*TempSen_Read()*/;
     156:	86 e4       	ldi	r24, 0x46	; 70
     158:	8b 83       	std	Y+3, r24	; 0x03
		for(int i=0;i<5;i++){
     15a:	1a 82       	std	Y+2, r1	; 0x02
     15c:	19 82       	std	Y+1, r1	; 0x01
     15e:	28 c0       	rjmp	.+80     	; 0x1b0 <Update_Temp+0x8a>
			if(i==0){
     160:	89 81       	ldd	r24, Y+1	; 0x01
     162:	9a 81       	ldd	r25, Y+2	; 0x02
     164:	00 97       	sbiw	r24, 0x00	; 0
     166:	79 f4       	brne	.+30     	; 0x186 <Update_Temp+0x60>
				Var1 = Temp_arr[i];
     168:	89 81       	ldd	r24, Y+1	; 0x01
     16a:	9a 81       	ldd	r25, Y+2	; 0x02
     16c:	fc 01       	movw	r30, r24
     16e:	ed 59       	subi	r30, 0x9D	; 157
     170:	ff 4f       	sbci	r31, 0xFF	; 255
     172:	80 81       	ld	r24, Z
     174:	8d 83       	std	Y+5, r24	; 0x05
				Temp_arr[i] = Temp;
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	9a 81       	ldd	r25, Y+2	; 0x02
     17a:	fc 01       	movw	r30, r24
     17c:	ed 59       	subi	r30, 0x9D	; 157
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	8b 81       	ldd	r24, Y+3	; 0x03
     182:	80 83       	st	Z, r24
     184:	10 c0       	rjmp	.+32     	; 0x1a6 <Update_Temp+0x80>
			}
			else{
				Var2 = Var1;
     186:	8d 81       	ldd	r24, Y+5	; 0x05
     188:	8c 83       	std	Y+4, r24	; 0x04
				Var1 = Temp_arr[i];
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	9a 81       	ldd	r25, Y+2	; 0x02
     18e:	fc 01       	movw	r30, r24
     190:	ed 59       	subi	r30, 0x9D	; 157
     192:	ff 4f       	sbci	r31, 0xFF	; 255
     194:	80 81       	ld	r24, Z
     196:	8d 83       	std	Y+5, r24	; 0x05
				Temp_arr[i] = Var2;
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	9a 81       	ldd	r25, Y+2	; 0x02
     19c:	fc 01       	movw	r30, r24
     19e:	ed 59       	subi	r30, 0x9D	; 157
     1a0:	ff 4f       	sbci	r31, 0xFF	; 255
     1a2:	8c 81       	ldd	r24, Y+4	; 0x04
     1a4:	80 83       	st	Z, r24
	u8 Var1,Var2;
	if(Counter==13){
		Timer2_Stop();
		Blink_Status = !Blink_Status;
		u8 Temp = 70/*TempSen_Read()*/;
		for(int i=0;i<5;i++){
     1a6:	89 81       	ldd	r24, Y+1	; 0x01
     1a8:	9a 81       	ldd	r25, Y+2	; 0x02
     1aa:	01 96       	adiw	r24, 0x01	; 1
     1ac:	9a 83       	std	Y+2, r25	; 0x02
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	85 30       	cpi	r24, 0x05	; 5
     1b6:	91 05       	cpc	r25, r1
     1b8:	9c f2       	brlt	.-90     	; 0x160 <Update_Temp+0x3a>
				Var1 = Temp_arr[i];
				Temp_arr[i] = Var2;

			}
		}
		Curr_Temp=Calc_Average();
     1ba:	0e 94 5e 00 	call	0xbc	; 0xbc <Calc_Average>
     1be:	80 93 6b 00 	sts	0x006B, r24
		Counter=0;
     1c2:	10 92 62 00 	sts	0x0062, r1
     1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <Update_Temp+0xb2>
	}
	else{
		Counter++;
     1c8:	80 91 62 00 	lds	r24, 0x0062
     1cc:	8f 5f       	subi	r24, 0xFF	; 255
     1ce:	80 93 62 00 	sts	0x0062, r24
		Timer2_Start(TIMER2_1024_);
     1d2:	87 e0       	ldi	r24, 0x07	; 7
     1d4:	0e 94 b5 01 	call	0x36a	; 0x36a <Timer2_Start>
	}
	Update_Temp_En =FALSE;
     1d8:	10 92 6c 00 	sts	0x006C, r1
}
     1dc:	26 96       	adiw	r28, 0x06	; 6
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	cf 91       	pop	r28
     1ea:	df 91       	pop	r29
     1ec:	08 95       	ret

000001ee <Store_Temp>:
#include "Store_Temp.h"


void Store_Temp(void){
     1ee:	df 93       	push	r29
     1f0:	cf 93       	push	r28
     1f2:	cd b7       	in	r28, 0x3d	; 61
     1f4:	de b7       	in	r29, 0x3e	; 62
//	EEPROM_Write((u16)1,Des_Temp);
}
     1f6:	cf 91       	pop	r28
     1f8:	df 91       	pop	r29
     1fa:	08 95       	ret

000001fc <Restore_Temp>:
#include "Restore_Temp.h"

static u8 CHK = 0b01010101;


void Restore_Temp(void){
     1fc:	df 93       	push	r29
     1fe:	cf 93       	push	r28
     200:	00 d0       	rcall	.+0      	; 0x202 <Restore_Temp+0x6>
     202:	0f 92       	push	r0
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
	u8 Reading=0;
     208:	1b 82       	std	Y+3, r1	; 0x03
	u16 Add=0;
     20a:	1a 82       	std	Y+2, r1	; 0x02
     20c:	19 82       	std	Y+1, r1	; 0x01

	//Reading = EEPROM_Read(Add);
	if (Reading == CHK){
     20e:	90 91 60 00 	lds	r25, 0x0060
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	89 17       	cp	r24, r25
     216:	19 f4       	brne	.+6      	; 0x21e <Restore_Temp+0x22>
		Des_Temp = 0/*EEPROM_Read(Add+1)*/;
     218:	10 92 6d 00 	sts	0x006D, r1
     21c:	03 c0       	rjmp	.+6      	; 0x224 <Restore_Temp+0x28>
	}
	else{
		//EEPROM_Write(Add,CHK);
		//EEPROM_Write(Add+1,(u8)default_Temp);
		Des_Temp = default_Temp;
     21e:	8c e3       	ldi	r24, 0x3C	; 60
     220:	80 93 6d 00 	sts	0x006D, r24
	}
}
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	08 95       	ret

00000230 <__vector_9>:
#include "Mode_Handler.h"



ISR(TIMER1_OVF_vect){
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	2f 93       	push	r18
     23c:	3f 93       	push	r19
     23e:	4f 93       	push	r20
     240:	5f 93       	push	r21
     242:	6f 93       	push	r22
     244:	7f 93       	push	r23
     246:	8f 93       	push	r24
     248:	9f 93       	push	r25
     24a:	af 93       	push	r26
     24c:	bf 93       	push	r27
     24e:	ef 93       	push	r30
     250:	ff 93       	push	r31
     252:	df 93       	push	r29
     254:	cf 93       	push	r28
     256:	cd b7       	in	r28, 0x3d	; 61
     258:	de b7       	in	r29, 0x3e	; 62
	Mode = Temp_Control;
     25a:	10 92 6e 00 	sts	0x006E, r1
	Timer1_Stop();
     25e:	0e 94 0d 03 	call	0x61a	; 0x61a <Timer1_Stop>
	Timer1_DisableInterrupt();
     262:	0e 94 2f 03 	call	0x65e	; 0x65e <Timer1_DisableInterrupt>
}
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	ff 91       	pop	r31
     26c:	ef 91       	pop	r30
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <Mode_Handler>:

void Mode_Handler(void){
     28c:	df 93       	push	r29
     28e:	cf 93       	push	r28
     290:	cd b7       	in	r28, 0x3d	; 61
     292:	de b7       	in	r29, 0x3e	; 62
	Timer1_Stop();
     294:	0e 94 0d 03 	call	0x61a	; 0x61a <Timer1_Stop>
	Timer1_EnableInterrupt();
     298:	0e 94 1a 03 	call	0x634	; 0x634 <Timer1_EnableInterrupt>
	Timer1_Start(TIMER1_1024_);
     29c:	85 e0       	ldi	r24, 0x05	; 5
     29e:	0e 94 8a 02 	call	0x514	; 0x514 <Timer1_Start>
}
     2a2:	cf 91       	pop	r28
     2a4:	df 91       	pop	r29
     2a6:	08 95       	ret

000002a8 <__vector_11>:
#include "Debounce_Handler.h"

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
     2a8:	1f 92       	push	r1
     2aa:	0f 92       	push	r0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	0f 92       	push	r0
     2b0:	11 24       	eor	r1, r1
     2b2:	2f 93       	push	r18
     2b4:	3f 93       	push	r19
     2b6:	4f 93       	push	r20
     2b8:	5f 93       	push	r21
     2ba:	6f 93       	push	r22
     2bc:	7f 93       	push	r23
     2be:	8f 93       	push	r24
     2c0:	9f 93       	push	r25
     2c2:	af 93       	push	r26
     2c4:	bf 93       	push	r27
     2c6:	ef 93       	push	r30
     2c8:	ff 93       	push	r31
     2ca:	df 93       	push	r29
     2cc:	cf 93       	push	r28
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
	if(Counter==5){
     2d2:	80 91 68 00 	lds	r24, 0x0068
     2d6:	85 30       	cpi	r24, 0x05	; 5
     2d8:	51 f4       	brne	.+20     	; 0x2ee <__vector_11+0x46>
		ButtonEnable = TRUE;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	80 93 6f 00 	sts	0x006F, r24
		Timer0_Stop();
     2e0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <Timer0_Stop>
		Timer0_DisableInterrupt();
     2e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <Timer0_DisableInterrupt>
		Counter = 0;
     2e8:	10 92 68 00 	sts	0x0068, r1
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <__vector_11+0x56>
	}
	else{
		Counter++;
     2ee:	80 91 68 00 	lds	r24, 0x0068
     2f2:	8f 5f       	subi	r24, 0xFF	; 255
     2f4:	80 93 68 00 	sts	0x0068, r24
		Timer0_Start(TIMER0_1024_);
     2f8:	85 e0       	ldi	r24, 0x05	; 5
     2fa:	0e 94 52 03 	call	0x6a4	; 0x6a4 <Timer0_Start>
	}

}
     2fe:	cf 91       	pop	r28
     300:	df 91       	pop	r29
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	bf 91       	pop	r27
     308:	af 91       	pop	r26
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	7f 91       	pop	r23
     310:	6f 91       	pop	r22
     312:	5f 91       	pop	r21
     314:	4f 91       	pop	r20
     316:	3f 91       	pop	r19
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <Debounce_Handler>:

void Debounce_Handler(void){
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = FALSE;
     32c:	10 92 6f 00 	sts	0x006F, r1
	Timer0_Start(TIMER0_1024_);
     330:	85 e0       	ldi	r24, 0x05	; 5
     332:	0e 94 52 03 	call	0x6a4	; 0x6a4 <Timer0_Start>
	Timer0_EnableInterrupt();
     336:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <Timer0_EnableInterrupt>
}
     33a:	cf 91       	pop	r28
     33c:	df 91       	pop	r29
     33e:	08 95       	ret

00000340 <Timer2_Init>:


#include "Timer2.h"


void Timer2_Init(void){
     340:	df 93       	push	r29
     342:	cf 93       	push	r28
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62

	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM20);
     348:	a5 e4       	ldi	r26, 0x45	; 69
     34a:	b0 e0       	ldi	r27, 0x00	; 0
     34c:	e5 e4       	ldi	r30, 0x45	; 69
     34e:	f0 e0       	ldi	r31, 0x00	; 0
     350:	80 81       	ld	r24, Z
     352:	8f 7b       	andi	r24, 0xBF	; 191
     354:	8c 93       	st	X, r24
	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM21);
     356:	a5 e4       	ldi	r26, 0x45	; 69
     358:	b0 e0       	ldi	r27, 0x00	; 0
     35a:	e5 e4       	ldi	r30, 0x45	; 69
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	80 81       	ld	r24, Z
     360:	87 7f       	andi	r24, 0xF7	; 247
     362:	8c 93       	st	X, r24
}
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	08 95       	ret

0000036a <Timer2_Start>:


void Timer2_Start(TIMER2_PreScaler_ID prescaler){
     36a:	df 93       	push	r29
     36c:	cf 93       	push	r28
     36e:	00 d0       	rcall	.+0      	; 0x370 <Timer2_Start+0x6>
     370:	0f 92       	push	r0
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_TCNT2_REG =0;  //Reset
     378:	e4 e4       	ldi	r30, 0x44	; 68
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	10 82       	st	Z, r1

	switch(prescaler){
     37e:	89 81       	ldd	r24, Y+1	; 0x01
     380:	28 2f       	mov	r18, r24
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	3b 83       	std	Y+3, r19	; 0x03
     386:	2a 83       	std	Y+2, r18	; 0x02
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	83 30       	cpi	r24, 0x03	; 3
     38e:	91 05       	cpc	r25, r1
     390:	09 f4       	brne	.+2      	; 0x394 <Timer2_Start+0x2a>
     392:	40 c0       	rjmp	.+128    	; 0x414 <Timer2_Start+0xaa>
     394:	2a 81       	ldd	r18, Y+2	; 0x02
     396:	3b 81       	ldd	r19, Y+3	; 0x03
     398:	24 30       	cpi	r18, 0x04	; 4
     39a:	31 05       	cpc	r19, r1
     39c:	7c f4       	brge	.+30     	; 0x3bc <Timer2_Start+0x52>
     39e:	8a 81       	ldd	r24, Y+2	; 0x02
     3a0:	9b 81       	ldd	r25, Y+3	; 0x03
     3a2:	81 30       	cpi	r24, 0x01	; 1
     3a4:	91 05       	cpc	r25, r1
     3a6:	31 f1       	breq	.+76     	; 0x3f4 <Timer2_Start+0x8a>
     3a8:	2a 81       	ldd	r18, Y+2	; 0x02
     3aa:	3b 81       	ldd	r19, Y+3	; 0x03
     3ac:	22 30       	cpi	r18, 0x02	; 2
     3ae:	31 05       	cpc	r19, r1
     3b0:	4c f5       	brge	.+82     	; 0x404 <Timer2_Start+0x9a>
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	9b 81       	ldd	r25, Y+3	; 0x03
     3b6:	00 97       	sbiw	r24, 0x00	; 0
     3b8:	b1 f0       	breq	.+44     	; 0x3e6 <Timer2_Start+0x7c>
     3ba:	53 c0       	rjmp	.+166    	; 0x462 <Timer2_Start+0xf8>
     3bc:	2a 81       	ldd	r18, Y+2	; 0x02
     3be:	3b 81       	ldd	r19, Y+3	; 0x03
     3c0:	25 30       	cpi	r18, 0x05	; 5
     3c2:	31 05       	cpc	r19, r1
     3c4:	b9 f1       	breq	.+110    	; 0x434 <Timer2_Start+0xca>
     3c6:	8a 81       	ldd	r24, Y+2	; 0x02
     3c8:	9b 81       	ldd	r25, Y+3	; 0x03
     3ca:	85 30       	cpi	r24, 0x05	; 5
     3cc:	91 05       	cpc	r25, r1
     3ce:	54 f1       	brlt	.+84     	; 0x424 <Timer2_Start+0xba>
     3d0:	2a 81       	ldd	r18, Y+2	; 0x02
     3d2:	3b 81       	ldd	r19, Y+3	; 0x03
     3d4:	26 30       	cpi	r18, 0x06	; 6
     3d6:	31 05       	cpc	r19, r1
     3d8:	a9 f1       	breq	.+106    	; 0x444 <Timer2_Start+0xda>
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	9b 81       	ldd	r25, Y+3	; 0x03
     3de:	87 30       	cpi	r24, 0x07	; 7
     3e0:	91 05       	cpc	r25, r1
     3e2:	c1 f1       	breq	.+112    	; 0x454 <Timer2_Start+0xea>
     3e4:	3e c0       	rjmp	.+124    	; 0x462 <Timer2_Start+0xf8>

	case TIMER2_Stop_:

		TIMER2_TCCR2_REG |= Timer2_Stopped;
     3e6:	e5 e4       	ldi	r30, 0x45	; 69
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	a5 e4       	ldi	r26, 0x45	; 69
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	8c 91       	ld	r24, X
     3f0:	80 83       	st	Z, r24
     3f2:	37 c0       	rjmp	.+110    	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_None_:

		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
     3f4:	a5 e4       	ldi	r26, 0x45	; 69
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e5 e4       	ldi	r30, 0x45	; 69
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	81 60       	ori	r24, 0x01	; 1
     400:	8c 93       	st	X, r24
     402:	2f c0       	rjmp	.+94     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_8_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
     404:	a5 e4       	ldi	r26, 0x45	; 69
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e5 e4       	ldi	r30, 0x45	; 69
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	82 60       	ori	r24, 0x02	; 2
     410:	8c 93       	st	X, r24
     412:	27 c0       	rjmp	.+78     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_32_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
     414:	a5 e4       	ldi	r26, 0x45	; 69
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e5 e4       	ldi	r30, 0x45	; 69
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	83 60       	ori	r24, 0x03	; 3
     420:	8c 93       	st	X, r24
     422:	1f c0       	rjmp	.+62     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_64_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
     424:	a5 e4       	ldi	r26, 0x45	; 69
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e5 e4       	ldi	r30, 0x45	; 69
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	84 60       	ori	r24, 0x04	; 4
     430:	8c 93       	st	X, r24
     432:	17 c0       	rjmp	.+46     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_128_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_128;
     434:	a5 e4       	ldi	r26, 0x45	; 69
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	e5 e4       	ldi	r30, 0x45	; 69
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	85 60       	ori	r24, 0x05	; 5
     440:	8c 93       	st	X, r24
     442:	0f c0       	rjmp	.+30     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_256_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
     444:	a5 e4       	ldi	r26, 0x45	; 69
     446:	b0 e0       	ldi	r27, 0x00	; 0
     448:	e5 e4       	ldi	r30, 0x45	; 69
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	80 81       	ld	r24, Z
     44e:	86 60       	ori	r24, 0x06	; 6
     450:	8c 93       	st	X, r24
     452:	07 c0       	rjmp	.+14     	; 0x462 <Timer2_Start+0xf8>
		break;

	case TIMER2_1024_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_1024;
     454:	a5 e4       	ldi	r26, 0x45	; 69
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e5 e4       	ldi	r30, 0x45	; 69
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	87 60       	ori	r24, 0x07	; 7
     460:	8c 93       	st	X, r24
		break;
    }
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	cf 91       	pop	r28
     46a:	df 91       	pop	r29
     46c:	08 95       	ret

0000046e <Timer2_Stop>:


void Timer2_Stop(void){
     46e:	df 93       	push	r29
     470:	cf 93       	push	r28
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62

	TIMER2_TCCR2_REG |=Timer2_Stopped;
     476:	e5 e4       	ldi	r30, 0x45	; 69
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	a5 e4       	ldi	r26, 0x45	; 69
     47c:	b0 e0       	ldi	r27, 0x00	; 0
     47e:	8c 91       	ld	r24, X
     480:	80 83       	st	Z, r24
}
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <Timer2_EnableInterrupt>:


void Timer2_EnableInterrupt(void){
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     490:	af e5       	ldi	r26, 0x5F	; 95
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	ef e5       	ldi	r30, 0x5F	; 95
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 81       	ld	r24, Z
     49a:	80 68       	ori	r24, 0x80	; 128
     49c:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     49e:	a9 e5       	ldi	r26, 0x59	; 89
     4a0:	b0 e0       	ldi	r27, 0x00	; 0
     4a2:	e9 e5       	ldi	r30, 0x59	; 89
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	80 81       	ld	r24, Z
     4a8:	80 64       	ori	r24, 0x40	; 64
     4aa:	8c 93       	st	X, r24
}
     4ac:	cf 91       	pop	r28
     4ae:	df 91       	pop	r29
     4b0:	08 95       	ret

000004b2 <Timer2_DisableInterrupt>:


void Timer2_DisableInterrupt(void){
     4b2:	df 93       	push	r29
     4b4:	cf 93       	push	r28
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     4ba:	a9 e5       	ldi	r26, 0x59	; 89
     4bc:	b0 e0       	ldi	r27, 0x00	; 0
     4be:	e9 e5       	ldi	r30, 0x59	; 89
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	80 81       	ld	r24, Z
     4c4:	8f 7b       	andi	r24, 0xBF	; 191
     4c6:	8c 93       	st	X, r24
}
     4c8:	cf 91       	pop	r28
     4ca:	df 91       	pop	r29
     4cc:	08 95       	ret

000004ce <Timer1_Init>:
 *      Author: Marina
 */

#include "Timer1.h"

void Timer1_Init(void){
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62

	 //interval Mode
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM10);
     4d6:	af e4       	ldi	r26, 0x4F	; 79
     4d8:	b0 e0       	ldi	r27, 0x00	; 0
     4da:	ef e4       	ldi	r30, 0x4F	; 79
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	8e 7f       	andi	r24, 0xFE	; 254
     4e2:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM11);
     4e4:	af e4       	ldi	r26, 0x4F	; 79
     4e6:	b0 e0       	ldi	r27, 0x00	; 0
     4e8:	ef e4       	ldi	r30, 0x4F	; 79
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	8d 7f       	andi	r24, 0xFD	; 253
     4f0:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM12);
     4f2:	ae e4       	ldi	r26, 0x4E	; 78
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	ee e4       	ldi	r30, 0x4E	; 78
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	87 7f       	andi	r24, 0xF7	; 247
     4fe:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM13);
     500:	ae e4       	ldi	r26, 0x4E	; 78
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	ee e4       	ldi	r30, 0x4E	; 78
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	8f 7e       	andi	r24, 0xEF	; 239
     50c:	8c 93       	st	X, r24
}
     50e:	cf 91       	pop	r28
     510:	df 91       	pop	r29
     512:	08 95       	ret

00000514 <Timer1_Start>:


void Timer1_Start(TIMER1_PreScaler_ID prescaler){
     514:	df 93       	push	r29
     516:	cf 93       	push	r28
     518:	00 d0       	rcall	.+0      	; 0x51a <Timer1_Start+0x6>
     51a:	0f 92       	push	r0
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	89 83       	std	Y+1, r24	; 0x01

	//Reset
	TIMER1_TCNT1L_REG = 0;
     522:	ec e4       	ldi	r30, 0x4C	; 76
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	11 82       	std	Z+1, r1	; 0x01
     528:	10 82       	st	Z, r1

	switch(prescaler){
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	28 2f       	mov	r18, r24
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	3b 83       	std	Y+3, r19	; 0x03
     532:	2a 83       	std	Y+2, r18	; 0x02
     534:	8a 81       	ldd	r24, Y+2	; 0x02
     536:	9b 81       	ldd	r25, Y+3	; 0x03
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	91 05       	cpc	r25, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <Timer1_Start+0x2c>
     53e:	40 c0       	rjmp	.+128    	; 0x5c0 <Timer1_Start+0xac>
     540:	2a 81       	ldd	r18, Y+2	; 0x02
     542:	3b 81       	ldd	r19, Y+3	; 0x03
     544:	24 30       	cpi	r18, 0x04	; 4
     546:	31 05       	cpc	r19, r1
     548:	7c f4       	brge	.+30     	; 0x568 <Timer1_Start+0x54>
     54a:	8a 81       	ldd	r24, Y+2	; 0x02
     54c:	9b 81       	ldd	r25, Y+3	; 0x03
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	91 05       	cpc	r25, r1
     552:	31 f1       	breq	.+76     	; 0x5a0 <Timer1_Start+0x8c>
     554:	2a 81       	ldd	r18, Y+2	; 0x02
     556:	3b 81       	ldd	r19, Y+3	; 0x03
     558:	22 30       	cpi	r18, 0x02	; 2
     55a:	31 05       	cpc	r19, r1
     55c:	4c f5       	brge	.+82     	; 0x5b0 <Timer1_Start+0x9c>
     55e:	8a 81       	ldd	r24, Y+2	; 0x02
     560:	9b 81       	ldd	r25, Y+3	; 0x03
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	b1 f0       	breq	.+44     	; 0x592 <Timer1_Start+0x7e>
     566:	53 c0       	rjmp	.+166    	; 0x60e <Timer1_Start+0xfa>
     568:	2a 81       	ldd	r18, Y+2	; 0x02
     56a:	3b 81       	ldd	r19, Y+3	; 0x03
     56c:	25 30       	cpi	r18, 0x05	; 5
     56e:	31 05       	cpc	r19, r1
     570:	b9 f1       	breq	.+110    	; 0x5e0 <Timer1_Start+0xcc>
     572:	8a 81       	ldd	r24, Y+2	; 0x02
     574:	9b 81       	ldd	r25, Y+3	; 0x03
     576:	85 30       	cpi	r24, 0x05	; 5
     578:	91 05       	cpc	r25, r1
     57a:	54 f1       	brlt	.+84     	; 0x5d0 <Timer1_Start+0xbc>
     57c:	2a 81       	ldd	r18, Y+2	; 0x02
     57e:	3b 81       	ldd	r19, Y+3	; 0x03
     580:	26 30       	cpi	r18, 0x06	; 6
     582:	31 05       	cpc	r19, r1
     584:	a9 f1       	breq	.+106    	; 0x5f0 <Timer1_Start+0xdc>
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	87 30       	cpi	r24, 0x07	; 7
     58c:	91 05       	cpc	r25, r1
     58e:	c1 f1       	breq	.+112    	; 0x600 <Timer1_Start+0xec>
     590:	3e c0       	rjmp	.+124    	; 0x60e <Timer1_Start+0xfa>

	case TIMER1_Stop_:

		TIMER1_TCCR1B_REG |= Timer1_Stopped;
     592:	ee e4       	ldi	r30, 0x4E	; 78
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	ae e4       	ldi	r26, 0x4E	; 78
     598:	b0 e0       	ldi	r27, 0x00	; 0
     59a:	8c 91       	ld	r24, X
     59c:	80 83       	st	Z, r24
     59e:	37 c0       	rjmp	.+110    	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_None_:

		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
     5a0:	ae e4       	ldi	r26, 0x4E	; 78
     5a2:	b0 e0       	ldi	r27, 0x00	; 0
     5a4:	ee e4       	ldi	r30, 0x4E	; 78
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	80 81       	ld	r24, Z
     5aa:	81 60       	ori	r24, 0x01	; 1
     5ac:	8c 93       	st	X, r24
     5ae:	2f c0       	rjmp	.+94     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_8_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
     5b0:	ae e4       	ldi	r26, 0x4E	; 78
     5b2:	b0 e0       	ldi	r27, 0x00	; 0
     5b4:	ee e4       	ldi	r30, 0x4E	; 78
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	82 60       	ori	r24, 0x02	; 2
     5bc:	8c 93       	st	X, r24
     5be:	27 c0       	rjmp	.+78     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_64_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
     5c0:	ae e4       	ldi	r26, 0x4E	; 78
     5c2:	b0 e0       	ldi	r27, 0x00	; 0
     5c4:	ee e4       	ldi	r30, 0x4E	; 78
     5c6:	f0 e0       	ldi	r31, 0x00	; 0
     5c8:	80 81       	ld	r24, Z
     5ca:	83 60       	ori	r24, 0x03	; 3
     5cc:	8c 93       	st	X, r24
     5ce:	1f c0       	rjmp	.+62     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_256_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
     5d0:	ae e4       	ldi	r26, 0x4E	; 78
     5d2:	b0 e0       	ldi	r27, 0x00	; 0
     5d4:	ee e4       	ldi	r30, 0x4E	; 78
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	84 60       	ori	r24, 0x04	; 4
     5dc:	8c 93       	st	X, r24
     5de:	17 c0       	rjmp	.+46     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_1024_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_1024;
     5e0:	ae e4       	ldi	r26, 0x4E	; 78
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	ee e4       	ldi	r30, 0x4E	; 78
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	85 60       	ori	r24, 0x05	; 5
     5ec:	8c 93       	st	X, r24
     5ee:	0f c0       	rjmp	.+30     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_Ext_Falling_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
     5f0:	ae e4       	ldi	r26, 0x4E	; 78
     5f2:	b0 e0       	ldi	r27, 0x00	; 0
     5f4:	ee e4       	ldi	r30, 0x4E	; 78
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	80 81       	ld	r24, Z
     5fa:	86 60       	ori	r24, 0x06	; 6
     5fc:	8c 93       	st	X, r24
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <Timer1_Start+0xfa>
		break;

	case TIMER1_Ext_Rising_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Rising_Edge;
     600:	ae e4       	ldi	r26, 0x4E	; 78
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	ee e4       	ldi	r30, 0x4E	; 78
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	87 60       	ori	r24, 0x07	; 7
     60c:	8c 93       	st	X, r24
		break;
    }
}
     60e:	0f 90       	pop	r0
     610:	0f 90       	pop	r0
     612:	0f 90       	pop	r0
     614:	cf 91       	pop	r28
     616:	df 91       	pop	r29
     618:	08 95       	ret

0000061a <Timer1_Stop>:


void Timer1_Stop(void){
     61a:	df 93       	push	r29
     61c:	cf 93       	push	r28
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62

	TIMER1_TCCR1B_REG |=Timer1_Stopped;
     622:	ee e4       	ldi	r30, 0x4E	; 78
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	ae e4       	ldi	r26, 0x4E	; 78
     628:	b0 e0       	ldi	r27, 0x00	; 0
     62a:	8c 91       	ld	r24, X
     62c:	80 83       	st	Z, r24
}
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <Timer1_EnableInterrupt>:


void Timer1_EnableInterrupt(void){
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     63c:	af e5       	ldi	r26, 0x5F	; 95
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	ef e5       	ldi	r30, 0x5F	; 95
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	80 68       	ori	r24, 0x80	; 128
     648:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     64a:	a9 e5       	ldi	r26, 0x59	; 89
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e9 e5       	ldi	r30, 0x59	; 89
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	84 60       	ori	r24, 0x04	; 4
     656:	8c 93       	st	X, r24
}
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <Timer1_DisableInterrupt>:


void Timer1_DisableInterrupt(void){
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	cd b7       	in	r28, 0x3d	; 61
     664:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     666:	a9 e5       	ldi	r26, 0x59	; 89
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	e9 e5       	ldi	r30, 0x59	; 89
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8b 7f       	andi	r24, 0xFB	; 251
     672:	8c 93       	st	X, r24
}
     674:	cf 91       	pop	r28
     676:	df 91       	pop	r29
     678:	08 95       	ret

0000067a <Timer0_Init>:
 *      Author: Marina
 */
#include "Timer0.h"


void Timer0_Init(void){
     67a:	df 93       	push	r29
     67c:	cf 93       	push	r28
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62

	//Interval Mode
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM00);
     682:	a3 e5       	ldi	r26, 0x53	; 83
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e3 e5       	ldi	r30, 0x53	; 83
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	8f 7b       	andi	r24, 0xBF	; 191
     68e:	8c 93       	st	X, r24
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM01);
     690:	a3 e5       	ldi	r26, 0x53	; 83
     692:	b0 e0       	ldi	r27, 0x00	; 0
     694:	e3 e5       	ldi	r30, 0x53	; 83
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	80 81       	ld	r24, Z
     69a:	87 7f       	andi	r24, 0xF7	; 247
     69c:	8c 93       	st	X, r24

}
     69e:	cf 91       	pop	r28
     6a0:	df 91       	pop	r29
     6a2:	08 95       	ret

000006a4 <Timer0_Start>:


void Timer0_Start(TIMER0_PreScaler_ID prescaler){
     6a4:	df 93       	push	r29
     6a6:	cf 93       	push	r28
     6a8:	00 d0       	rcall	.+0      	; 0x6aa <Timer0_Start+0x6>
     6aa:	0f 92       	push	r0
     6ac:	cd b7       	in	r28, 0x3d	; 61
     6ae:	de b7       	in	r29, 0x3e	; 62
     6b0:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_TCNT0_REG =0;  //Reset
     6b2:	e2 e5       	ldi	r30, 0x52	; 82
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	10 82       	st	Z, r1

	switch(prescaler){
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	28 2f       	mov	r18, r24
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	3b 83       	std	Y+3, r19	; 0x03
     6c0:	2a 83       	std	Y+2, r18	; 0x02
     6c2:	8a 81       	ldd	r24, Y+2	; 0x02
     6c4:	9b 81       	ldd	r25, Y+3	; 0x03
     6c6:	83 30       	cpi	r24, 0x03	; 3
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f4       	brne	.+2      	; 0x6ce <Timer0_Start+0x2a>
     6cc:	40 c0       	rjmp	.+128    	; 0x74e <Timer0_Start+0xaa>
     6ce:	2a 81       	ldd	r18, Y+2	; 0x02
     6d0:	3b 81       	ldd	r19, Y+3	; 0x03
     6d2:	24 30       	cpi	r18, 0x04	; 4
     6d4:	31 05       	cpc	r19, r1
     6d6:	7c f4       	brge	.+30     	; 0x6f6 <Timer0_Start+0x52>
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	9b 81       	ldd	r25, Y+3	; 0x03
     6dc:	81 30       	cpi	r24, 0x01	; 1
     6de:	91 05       	cpc	r25, r1
     6e0:	31 f1       	breq	.+76     	; 0x72e <Timer0_Start+0x8a>
     6e2:	2a 81       	ldd	r18, Y+2	; 0x02
     6e4:	3b 81       	ldd	r19, Y+3	; 0x03
     6e6:	22 30       	cpi	r18, 0x02	; 2
     6e8:	31 05       	cpc	r19, r1
     6ea:	4c f5       	brge	.+82     	; 0x73e <Timer0_Start+0x9a>
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	9b 81       	ldd	r25, Y+3	; 0x03
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	b1 f0       	breq	.+44     	; 0x720 <Timer0_Start+0x7c>
     6f4:	53 c0       	rjmp	.+166    	; 0x79c <Timer0_Start+0xf8>
     6f6:	2a 81       	ldd	r18, Y+2	; 0x02
     6f8:	3b 81       	ldd	r19, Y+3	; 0x03
     6fa:	25 30       	cpi	r18, 0x05	; 5
     6fc:	31 05       	cpc	r19, r1
     6fe:	b9 f1       	breq	.+110    	; 0x76e <Timer0_Start+0xca>
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	9b 81       	ldd	r25, Y+3	; 0x03
     704:	85 30       	cpi	r24, 0x05	; 5
     706:	91 05       	cpc	r25, r1
     708:	54 f1       	brlt	.+84     	; 0x75e <Timer0_Start+0xba>
     70a:	2a 81       	ldd	r18, Y+2	; 0x02
     70c:	3b 81       	ldd	r19, Y+3	; 0x03
     70e:	26 30       	cpi	r18, 0x06	; 6
     710:	31 05       	cpc	r19, r1
     712:	a9 f1       	breq	.+106    	; 0x77e <Timer0_Start+0xda>
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	9b 81       	ldd	r25, Y+3	; 0x03
     718:	87 30       	cpi	r24, 0x07	; 7
     71a:	91 05       	cpc	r25, r1
     71c:	c1 f1       	breq	.+112    	; 0x78e <Timer0_Start+0xea>
     71e:	3e c0       	rjmp	.+124    	; 0x79c <Timer0_Start+0xf8>

	case TIMER0_Stop_:

		TIMER0_TCCR0_REG |= Timer0_Stopped;
     720:	e3 e5       	ldi	r30, 0x53	; 83
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	a3 e5       	ldi	r26, 0x53	; 83
     726:	b0 e0       	ldi	r27, 0x00	; 0
     728:	8c 91       	ld	r24, X
     72a:	80 83       	st	Z, r24
     72c:	37 c0       	rjmp	.+110    	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_None_:

		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
     72e:	a3 e5       	ldi	r26, 0x53	; 83
     730:	b0 e0       	ldi	r27, 0x00	; 0
     732:	e3 e5       	ldi	r30, 0x53	; 83
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	81 60       	ori	r24, 0x01	; 1
     73a:	8c 93       	st	X, r24
     73c:	2f c0       	rjmp	.+94     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_8_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
     73e:	a3 e5       	ldi	r26, 0x53	; 83
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	e3 e5       	ldi	r30, 0x53	; 83
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	82 60       	ori	r24, 0x02	; 2
     74a:	8c 93       	st	X, r24
     74c:	27 c0       	rjmp	.+78     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_64_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
     74e:	a3 e5       	ldi	r26, 0x53	; 83
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	e3 e5       	ldi	r30, 0x53	; 83
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	83 60       	ori	r24, 0x03	; 3
     75a:	8c 93       	st	X, r24
     75c:	1f c0       	rjmp	.+62     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_256_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
     75e:	a3 e5       	ldi	r26, 0x53	; 83
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	e3 e5       	ldi	r30, 0x53	; 83
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	84 60       	ori	r24, 0x04	; 4
     76a:	8c 93       	st	X, r24
     76c:	17 c0       	rjmp	.+46     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_1024_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_1024;
     76e:	a3 e5       	ldi	r26, 0x53	; 83
     770:	b0 e0       	ldi	r27, 0x00	; 0
     772:	e3 e5       	ldi	r30, 0x53	; 83
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	85 60       	ori	r24, 0x05	; 5
     77a:	8c 93       	st	X, r24
     77c:	0f c0       	rjmp	.+30     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_Ext_Falling_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
     77e:	a3 e5       	ldi	r26, 0x53	; 83
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	e3 e5       	ldi	r30, 0x53	; 83
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	86 60       	ori	r24, 0x06	; 6
     78a:	8c 93       	st	X, r24
     78c:	07 c0       	rjmp	.+14     	; 0x79c <Timer0_Start+0xf8>
		break;

	case TIMER0_Ext_Rising_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Rising_Edge;
     78e:	a3 e5       	ldi	r26, 0x53	; 83
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e3 e5       	ldi	r30, 0x53	; 83
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	87 60       	ori	r24, 0x07	; 7
     79a:	8c 93       	st	X, r24
		break;
    }
}
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	cf 91       	pop	r28
     7a4:	df 91       	pop	r29
     7a6:	08 95       	ret

000007a8 <Timer0_Stop>:


void Timer0_Stop(void){
     7a8:	df 93       	push	r29
     7aa:	cf 93       	push	r28
     7ac:	cd b7       	in	r28, 0x3d	; 61
     7ae:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0_REG |=Timer0_Stopped;
     7b0:	e3 e5       	ldi	r30, 0x53	; 83
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	a3 e5       	ldi	r26, 0x53	; 83
     7b6:	b0 e0       	ldi	r27, 0x00	; 0
     7b8:	8c 91       	ld	r24, X
     7ba:	80 83       	st	Z, r24
}
     7bc:	cf 91       	pop	r28
     7be:	df 91       	pop	r29
     7c0:	08 95       	ret

000007c2 <Timer0_EnableInterrupt>:


void Timer0_EnableInterrupt(void){
     7c2:	df 93       	push	r29
     7c4:	cf 93       	push	r28
     7c6:	cd b7       	in	r28, 0x3d	; 61
     7c8:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     7ca:	af e5       	ldi	r26, 0x5F	; 95
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	ef e5       	ldi	r30, 0x5F	; 95
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	80 81       	ld	r24, Z
     7d4:	80 68       	ori	r24, 0x80	; 128
     7d6:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7d8:	a9 e5       	ldi	r26, 0x59	; 89
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e9 e5       	ldi	r30, 0x59	; 89
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	81 60       	ori	r24, 0x01	; 1
     7e4:	8c 93       	st	X, r24
}
     7e6:	cf 91       	pop	r28
     7e8:	df 91       	pop	r29
     7ea:	08 95       	ret

000007ec <Timer0_DisableInterrupt>:


void Timer0_DisableInterrupt(void){
     7ec:	df 93       	push	r29
     7ee:	cf 93       	push	r28
     7f0:	cd b7       	in	r28, 0x3d	; 61
     7f2:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7f4:	a9 e5       	ldi	r26, 0x59	; 89
     7f6:	b0 e0       	ldi	r27, 0x00	; 0
     7f8:	e9 e5       	ldi	r30, 0x59	; 89
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 81       	ld	r24, Z
     7fe:	8e 7f       	andi	r24, 0xFE	; 254
     800:	8c 93       	st	X, r24
}
     802:	cf 91       	pop	r28
     804:	df 91       	pop	r29
     806:	08 95       	ret

00000808 <Enable_Gl_Int>:
 */

#include "../Inc/Glbl_Int.h"
#include "Std_Operations.h"

void Enable_Gl_Int(){
     808:	df 93       	push	r29
     80a:	cf 93       	push	r28
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Enable;
    SET_BIT(Glbl_STATUS_REG,7);
     810:	af e5       	ldi	r26, 0x5F	; 95
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	ef e5       	ldi	r30, 0x5F	; 95
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	80 68       	ori	r24, 0x80	; 128
     81c:	8c 93       	st	X, r24
}
     81e:	cf 91       	pop	r28
     820:	df 91       	pop	r29
     822:	08 95       	ret

00000824 <Disable_Gl_Int>:
void Disable_Gl_Int(){
     824:	df 93       	push	r29
     826:	cf 93       	push	r28
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Disable;
	CLR_BIT(Glbl_STATUS_REG,7);
     82c:	af e5       	ldi	r26, 0x5F	; 95
     82e:	b0 e0       	ldi	r27, 0x00	; 0
     830:	ef e5       	ldi	r30, 0x5F	; 95
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	8f 77       	andi	r24, 0x7F	; 127
     838:	8c 93       	st	X, r24
}
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <DIO_SET_PIN>:
#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	00 d0       	rcall	.+0      	; 0x846 <DIO_SET_PIN+0x6>
     846:	00 d0       	rcall	.+0      	; 0x848 <DIO_SET_PIN+0x8>
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	3c 83       	std	Y+4, r19	; 0x04
     858:	2b 83       	std	Y+3, r18	; 0x03
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	9c 81       	ldd	r25, Y+4	; 0x04
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	91 05       	cpc	r25, r1
     862:	49 f1       	breq	.+82     	; 0x8b6 <__stack+0x57>
     864:	2b 81       	ldd	r18, Y+3	; 0x03
     866:	3c 81       	ldd	r19, Y+4	; 0x04
     868:	22 30       	cpi	r18, 0x02	; 2
     86a:	31 05       	cpc	r19, r1
     86c:	2c f4       	brge	.+10     	; 0x878 <__stack+0x19>
     86e:	8b 81       	ldd	r24, Y+3	; 0x03
     870:	9c 81       	ldd	r25, Y+4	; 0x04
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	61 f0       	breq	.+24     	; 0x88e <__stack+0x2f>
     876:	5a c0       	rjmp	.+180    	; 0x92c <__stack+0xcd>
     878:	2b 81       	ldd	r18, Y+3	; 0x03
     87a:	3c 81       	ldd	r19, Y+4	; 0x04
     87c:	22 30       	cpi	r18, 0x02	; 2
     87e:	31 05       	cpc	r19, r1
     880:	71 f1       	breq	.+92     	; 0x8de <__stack+0x7f>
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	83 30       	cpi	r24, 0x03	; 3
     888:	91 05       	cpc	r25, r1
     88a:	e9 f1       	breq	.+122    	; 0x906 <__stack+0xa7>
     88c:	4f c0       	rjmp	.+158    	; 0x92c <__stack+0xcd>
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
     88e:	ab e3       	ldi	r26, 0x3B	; 59
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	eb e3       	ldi	r30, 0x3B	; 59
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	80 81       	ld	r24, Z
     898:	48 2f       	mov	r20, r24
     89a:	8a 81       	ldd	r24, Y+2	; 0x02
     89c:	28 2f       	mov	r18, r24
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	02 2e       	mov	r0, r18
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	0a 94       	dec	r0
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
     8b0:	84 2b       	or	r24, r20
     8b2:	8c 93       	st	X, r24
     8b4:	3b c0       	rjmp	.+118    	; 0x92c <__stack+0xcd>
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
     8b6:	a8 e3       	ldi	r26, 0x38	; 56
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e8 e3       	ldi	r30, 0x38	; 56
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	48 2f       	mov	r20, r24
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 2e       	mov	r0, r18
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	0a 94       	dec	r0
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	84 2b       	or	r24, r20
     8da:	8c 93       	st	X, r24
     8dc:	27 c0       	rjmp	.+78     	; 0x92c <__stack+0xcd>
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
     8de:	a5 e3       	ldi	r26, 0x35	; 53
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	e5 e3       	ldi	r30, 0x35	; 53
     8e4:	f0 e0       	ldi	r31, 0x00	; 0
     8e6:	80 81       	ld	r24, Z
     8e8:	48 2f       	mov	r20, r24
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	28 2f       	mov	r18, r24
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 2e       	mov	r0, r18
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <__stack+0x9d>
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	0a 94       	dec	r0
     8fe:	e2 f7       	brpl	.-8      	; 0x8f8 <__stack+0x99>
     900:	84 2b       	or	r24, r20
     902:	8c 93       	st	X, r24
     904:	13 c0       	rjmp	.+38     	; 0x92c <__stack+0xcd>
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
     906:	a2 e3       	ldi	r26, 0x32	; 50
     908:	b0 e0       	ldi	r27, 0x00	; 0
     90a:	e2 e3       	ldi	r30, 0x32	; 50
     90c:	f0 e0       	ldi	r31, 0x00	; 0
     90e:	80 81       	ld	r24, Z
     910:	48 2f       	mov	r20, r24
     912:	8a 81       	ldd	r24, Y+2	; 0x02
     914:	28 2f       	mov	r18, r24
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 2e       	mov	r0, r18
     91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	0a 94       	dec	r0
     926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
     928:	84 2b       	or	r24, r20
     92a:	8c 93       	st	X, r24
		break;
	}
}
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <DIO_CLEAR_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	00 d0       	rcall	.+0      	; 0x940 <DIO_CLEAR_PIN+0x6>
     940:	00 d0       	rcall	.+0      	; 0x942 <DIO_CLEAR_PIN+0x8>
     942:	cd b7       	in	r28, 0x3d	; 61
     944:	de b7       	in	r29, 0x3e	; 62
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     94a:	89 81       	ldd	r24, Y+1	; 0x01
     94c:	28 2f       	mov	r18, r24
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	3c 83       	std	Y+4, r19	; 0x04
     952:	2b 83       	std	Y+3, r18	; 0x03
     954:	8b 81       	ldd	r24, Y+3	; 0x03
     956:	9c 81       	ldd	r25, Y+4	; 0x04
     958:	81 30       	cpi	r24, 0x01	; 1
     95a:	91 05       	cpc	r25, r1
     95c:	59 f1       	breq	.+86     	; 0x9b4 <DIO_CLEAR_PIN+0x7a>
     95e:	2b 81       	ldd	r18, Y+3	; 0x03
     960:	3c 81       	ldd	r19, Y+4	; 0x04
     962:	22 30       	cpi	r18, 0x02	; 2
     964:	31 05       	cpc	r19, r1
     966:	2c f4       	brge	.+10     	; 0x972 <DIO_CLEAR_PIN+0x38>
     968:	8b 81       	ldd	r24, Y+3	; 0x03
     96a:	9c 81       	ldd	r25, Y+4	; 0x04
     96c:	00 97       	sbiw	r24, 0x00	; 0
     96e:	69 f0       	breq	.+26     	; 0x98a <DIO_CLEAR_PIN+0x50>
     970:	5f c0       	rjmp	.+190    	; 0xa30 <DIO_CLEAR_PIN+0xf6>
     972:	2b 81       	ldd	r18, Y+3	; 0x03
     974:	3c 81       	ldd	r19, Y+4	; 0x04
     976:	22 30       	cpi	r18, 0x02	; 2
     978:	31 05       	cpc	r19, r1
     97a:	89 f1       	breq	.+98     	; 0x9de <DIO_CLEAR_PIN+0xa4>
     97c:	8b 81       	ldd	r24, Y+3	; 0x03
     97e:	9c 81       	ldd	r25, Y+4	; 0x04
     980:	83 30       	cpi	r24, 0x03	; 3
     982:	91 05       	cpc	r25, r1
     984:	09 f4       	brne	.+2      	; 0x988 <DIO_CLEAR_PIN+0x4e>
     986:	40 c0       	rjmp	.+128    	; 0xa08 <DIO_CLEAR_PIN+0xce>
     988:	53 c0       	rjmp	.+166    	; 0xa30 <DIO_CLEAR_PIN+0xf6>
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
     98a:	ab e3       	ldi	r26, 0x3B	; 59
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	eb e3       	ldi	r30, 0x3B	; 59
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	48 2f       	mov	r20, r24
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	02 2e       	mov	r0, r18
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_CLEAR_PIN+0x6e>
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	0a 94       	dec	r0
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_CLEAR_PIN+0x6a>
     9ac:	80 95       	com	r24
     9ae:	84 23       	and	r24, r20
     9b0:	8c 93       	st	X, r24
     9b2:	3e c0       	rjmp	.+124    	; 0xa30 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
     9b4:	a8 e3       	ldi	r26, 0x38	; 56
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	e8 e3       	ldi	r30, 0x38	; 56
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	48 2f       	mov	r20, r24
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	02 2e       	mov	r0, r18
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_CLEAR_PIN+0x98>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	0a 94       	dec	r0
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_CLEAR_PIN+0x94>
     9d6:	80 95       	com	r24
     9d8:	84 23       	and	r24, r20
     9da:	8c 93       	st	X, r24
     9dc:	29 c0       	rjmp	.+82     	; 0xa30 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
     9de:	a5 e3       	ldi	r26, 0x35	; 53
     9e0:	b0 e0       	ldi	r27, 0x00	; 0
     9e2:	e5 e3       	ldi	r30, 0x35	; 53
     9e4:	f0 e0       	ldi	r31, 0x00	; 0
     9e6:	80 81       	ld	r24, Z
     9e8:	48 2f       	mov	r20, r24
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	02 2e       	mov	r0, r18
     9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_CLEAR_PIN+0xc2>
     9f8:	88 0f       	add	r24, r24
     9fa:	99 1f       	adc	r25, r25
     9fc:	0a 94       	dec	r0
     9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_CLEAR_PIN+0xbe>
     a00:	80 95       	com	r24
     a02:	84 23       	and	r24, r20
     a04:	8c 93       	st	X, r24
     a06:	14 c0       	rjmp	.+40     	; 0xa30 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
     a08:	a2 e3       	ldi	r26, 0x32	; 50
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	e2 e3       	ldi	r30, 0x32	; 50
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	80 81       	ld	r24, Z
     a12:	48 2f       	mov	r20, r24
     a14:	8a 81       	ldd	r24, Y+2	; 0x02
     a16:	28 2f       	mov	r18, r24
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	02 2e       	mov	r0, r18
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <DIO_CLEAR_PIN+0xec>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <DIO_CLEAR_PIN+0xe8>
     a2a:	80 95       	com	r24
     a2c:	84 23       	and	r24, r20
     a2e:	8c 93       	st	X, r24
		break;
	}
}
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	cf 91       	pop	r28
     a3a:	df 91       	pop	r29
     a3c:	08 95       	ret

00000a3e <DIO_TOGGLE_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
     a42:	00 d0       	rcall	.+0      	; 0xa44 <DIO_TOGGLE_PIN+0x6>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <DIO_TOGGLE_PIN+0x8>
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	89 83       	std	Y+1, r24	; 0x01
     a4c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     a4e:	89 81       	ldd	r24, Y+1	; 0x01
     a50:	28 2f       	mov	r18, r24
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	3c 83       	std	Y+4, r19	; 0x04
     a56:	2b 83       	std	Y+3, r18	; 0x03
     a58:	8b 81       	ldd	r24, Y+3	; 0x03
     a5a:	9c 81       	ldd	r25, Y+4	; 0x04
     a5c:	81 30       	cpi	r24, 0x01	; 1
     a5e:	91 05       	cpc	r25, r1
     a60:	49 f1       	breq	.+82     	; 0xab4 <DIO_TOGGLE_PIN+0x76>
     a62:	2b 81       	ldd	r18, Y+3	; 0x03
     a64:	3c 81       	ldd	r19, Y+4	; 0x04
     a66:	22 30       	cpi	r18, 0x02	; 2
     a68:	31 05       	cpc	r19, r1
     a6a:	2c f4       	brge	.+10     	; 0xa76 <DIO_TOGGLE_PIN+0x38>
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	9c 81       	ldd	r25, Y+4	; 0x04
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	61 f0       	breq	.+24     	; 0xa8c <DIO_TOGGLE_PIN+0x4e>
     a74:	5a c0       	rjmp	.+180    	; 0xb2a <DIO_TOGGLE_PIN+0xec>
     a76:	2b 81       	ldd	r18, Y+3	; 0x03
     a78:	3c 81       	ldd	r19, Y+4	; 0x04
     a7a:	22 30       	cpi	r18, 0x02	; 2
     a7c:	31 05       	cpc	r19, r1
     a7e:	71 f1       	breq	.+92     	; 0xadc <DIO_TOGGLE_PIN+0x9e>
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	9c 81       	ldd	r25, Y+4	; 0x04
     a84:	83 30       	cpi	r24, 0x03	; 3
     a86:	91 05       	cpc	r25, r1
     a88:	e9 f1       	breq	.+122    	; 0xb04 <DIO_TOGGLE_PIN+0xc6>
     a8a:	4f c0       	rjmp	.+158    	; 0xb2a <DIO_TOGGLE_PIN+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
     a8c:	ab e3       	ldi	r26, 0x3B	; 59
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	eb e3       	ldi	r30, 0x3B	; 59
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	48 2f       	mov	r20, r24
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 2e       	mov	r0, r18
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_TOGGLE_PIN+0x6c>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_TOGGLE_PIN+0x68>
     aae:	84 27       	eor	r24, r20
     ab0:	8c 93       	st	X, r24
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
     ab4:	a8 e3       	ldi	r26, 0x38	; 56
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e8 e3       	ldi	r30, 0x38	; 56
     aba:	f0 e0       	ldi	r31, 0x00	; 0
     abc:	80 81       	ld	r24, Z
     abe:	48 2f       	mov	r20, r24
     ac0:	8a 81       	ldd	r24, Y+2	; 0x02
     ac2:	28 2f       	mov	r18, r24
     ac4:	30 e0       	ldi	r19, 0x00	; 0
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 2e       	mov	r0, r18
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <DIO_TOGGLE_PIN+0x94>
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	0a 94       	dec	r0
     ad4:	e2 f7       	brpl	.-8      	; 0xace <DIO_TOGGLE_PIN+0x90>
     ad6:	84 27       	eor	r24, r20
     ad8:	8c 93       	st	X, r24
     ada:	27 c0       	rjmp	.+78     	; 0xb2a <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
     adc:	a5 e3       	ldi	r26, 0x35	; 53
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	e5 e3       	ldi	r30, 0x35	; 53
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	80 81       	ld	r24, Z
     ae6:	48 2f       	mov	r20, r24
     ae8:	8a 81       	ldd	r24, Y+2	; 0x02
     aea:	28 2f       	mov	r18, r24
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	02 2e       	mov	r0, r18
     af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_TOGGLE_PIN+0xbc>
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	0a 94       	dec	r0
     afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_TOGGLE_PIN+0xb8>
     afe:	84 27       	eor	r24, r20
     b00:	8c 93       	st	X, r24
     b02:	13 c0       	rjmp	.+38     	; 0xb2a <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
     b04:	a2 e3       	ldi	r26, 0x32	; 50
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e2 e3       	ldi	r30, 0x32	; 50
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	48 2f       	mov	r20, r24
     b10:	8a 81       	ldd	r24, Y+2	; 0x02
     b12:	28 2f       	mov	r18, r24
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	02 2e       	mov	r0, r18
     b1c:	02 c0       	rjmp	.+4      	; 0xb22 <DIO_TOGGLE_PIN+0xe4>
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	0a 94       	dec	r0
     b24:	e2 f7       	brpl	.-8      	; 0xb1e <DIO_TOGGLE_PIN+0xe0>
     b26:	84 27       	eor	r24, r20
     b28:	8c 93       	st	X, r24
		break;
	}
}
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	0f 90       	pop	r0
     b30:	0f 90       	pop	r0
     b32:	cf 91       	pop	r28
     b34:	df 91       	pop	r29
     b36:	08 95       	ret

00000b38 <DIO_ENABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_ENABLE_PULLUP+0x6>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <DIO_ENABLE_PULLUP+0x8>
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	3c 83       	std	Y+4, r19	; 0x04
     b50:	2b 83       	std	Y+3, r18	; 0x03
     b52:	4b 81       	ldd	r20, Y+3	; 0x03
     b54:	5c 81       	ldd	r21, Y+4	; 0x04
     b56:	41 30       	cpi	r20, 0x01	; 1
     b58:	51 05       	cpc	r21, r1
     b5a:	09 f4       	brne	.+2      	; 0xb5e <DIO_ENABLE_PULLUP+0x26>
     b5c:	40 c0       	rjmp	.+128    	; 0xbde <DIO_ENABLE_PULLUP+0xa6>
     b5e:	8b 81       	ldd	r24, Y+3	; 0x03
     b60:	9c 81       	ldd	r25, Y+4	; 0x04
     b62:	82 30       	cpi	r24, 0x02	; 2
     b64:	91 05       	cpc	r25, r1
     b66:	34 f4       	brge	.+12     	; 0xb74 <DIO_ENABLE_PULLUP+0x3c>
     b68:	2b 81       	ldd	r18, Y+3	; 0x03
     b6a:	3c 81       	ldd	r19, Y+4	; 0x04
     b6c:	21 15       	cp	r18, r1
     b6e:	31 05       	cpc	r19, r1
     b70:	71 f0       	breq	.+28     	; 0xb8e <DIO_ENABLE_PULLUP+0x56>
     b72:	aa c0       	rjmp	.+340    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
     b74:	4b 81       	ldd	r20, Y+3	; 0x03
     b76:	5c 81       	ldd	r21, Y+4	; 0x04
     b78:	42 30       	cpi	r20, 0x02	; 2
     b7a:	51 05       	cpc	r21, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_ENABLE_PULLUP+0x48>
     b7e:	57 c0       	rjmp	.+174    	; 0xc2e <DIO_ENABLE_PULLUP+0xf6>
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	83 30       	cpi	r24, 0x03	; 3
     b86:	91 05       	cpc	r25, r1
     b88:	09 f4       	brne	.+2      	; 0xb8c <DIO_ENABLE_PULLUP+0x54>
     b8a:	78 c0       	rjmp	.+240    	; 0xc7c <DIO_ENABLE_PULLUP+0x144>
     b8c:	9d c0       	rjmp	.+314    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     b8e:	ea e3       	ldi	r30, 0x3A	; 58
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	28 2f       	mov	r18, r24
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	88 2f       	mov	r24, r24
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a9 01       	movw	r20, r18
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <DIO_ENABLE_PULLUP+0x6e>
     ba2:	55 95       	asr	r21
     ba4:	47 95       	ror	r20
     ba6:	8a 95       	dec	r24
     ba8:	e2 f7       	brpl	.-8      	; 0xba2 <DIO_ENABLE_PULLUP+0x6a>
     baa:	ca 01       	movw	r24, r20
     bac:	81 70       	andi	r24, 0x01	; 1
     bae:	90 70       	andi	r25, 0x00	; 0
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <DIO_ENABLE_PULLUP+0x7e>
     bb4:	89 c0       	rjmp	.+274    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTA_REG,pin);
     bb6:	ab e3       	ldi	r26, 0x3B	; 59
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	eb e3       	ldi	r30, 0x3B	; 59
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	80 81       	ld	r24, Z
     bc0:	48 2f       	mov	r20, r24
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_ENABLE_PULLUP+0x9c>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_ENABLE_PULLUP+0x98>
     bd8:	84 2b       	or	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	75 c0       	rjmp	.+234    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     bde:	e7 e3       	ldi	r30, 0x37	; 55
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	a9 01       	movw	r20, r18
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_ENABLE_PULLUP+0xbe>
     bf2:	55 95       	asr	r21
     bf4:	47 95       	ror	r20
     bf6:	8a 95       	dec	r24
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_ENABLE_PULLUP+0xba>
     bfa:	ca 01       	movw	r24, r20
     bfc:	81 70       	andi	r24, 0x01	; 1
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	09 f0       	breq	.+2      	; 0xc06 <DIO_ENABLE_PULLUP+0xce>
     c04:	61 c0       	rjmp	.+194    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTB_REG,pin);
     c06:	a8 e3       	ldi	r26, 0x38	; 56
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e8 e3       	ldi	r30, 0x38	; 56
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	80 81       	ld	r24, Z
     c10:	48 2f       	mov	r20, r24
     c12:	8a 81       	ldd	r24, Y+2	; 0x02
     c14:	28 2f       	mov	r18, r24
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	02 2e       	mov	r0, r18
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <DIO_ENABLE_PULLUP+0xec>
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	e2 f7       	brpl	.-8      	; 0xc20 <DIO_ENABLE_PULLUP+0xe8>
     c28:	84 2b       	or	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	4d c0       	rjmp	.+154    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     c2e:	e4 e3       	ldi	r30, 0x34	; 52
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a9 01       	movw	r20, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_ENABLE_PULLUP+0x10e>
     c42:	55 95       	asr	r21
     c44:	47 95       	ror	r20
     c46:	8a 95       	dec	r24
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_ENABLE_PULLUP+0x10a>
     c4a:	ca 01       	movw	r24, r20
     c4c:	81 70       	andi	r24, 0x01	; 1
     c4e:	90 70       	andi	r25, 0x00	; 0
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	d1 f5       	brne	.+116    	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTC_REG,pin);
     c54:	a5 e3       	ldi	r26, 0x35	; 53
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	e5 e3       	ldi	r30, 0x35	; 53
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	48 2f       	mov	r20, r24
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	02 2e       	mov	r0, r18
     c6c:	02 c0       	rjmp	.+4      	; 0xc72 <DIO_ENABLE_PULLUP+0x13a>
     c6e:	88 0f       	add	r24, r24
     c70:	99 1f       	adc	r25, r25
     c72:	0a 94       	dec	r0
     c74:	e2 f7       	brpl	.-8      	; 0xc6e <DIO_ENABLE_PULLUP+0x136>
     c76:	84 2b       	or	r24, r20
     c78:	8c 93       	st	X, r24
     c7a:	26 c0       	rjmp	.+76     	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     c7c:	e1 e3       	ldi	r30, 0x31	; 49
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a9 01       	movw	r20, r18
     c8e:	02 c0       	rjmp	.+4      	; 0xc94 <DIO_ENABLE_PULLUP+0x15c>
     c90:	55 95       	asr	r21
     c92:	47 95       	ror	r20
     c94:	8a 95       	dec	r24
     c96:	e2 f7       	brpl	.-8      	; 0xc90 <DIO_ENABLE_PULLUP+0x158>
     c98:	ca 01       	movw	r24, r20
     c9a:	81 70       	andi	r24, 0x01	; 1
     c9c:	90 70       	andi	r25, 0x00	; 0
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	99 f4       	brne	.+38     	; 0xcc8 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTD_REG,pin);
     ca2:	a2 e3       	ldi	r26, 0x32	; 50
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	e2 e3       	ldi	r30, 0x32	; 50
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_ENABLE_PULLUP+0x188>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_ENABLE_PULLUP+0x184>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
		break;
	}
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <DIO_DISABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <DIO_DISABLE_PULLUP+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <DIO_DISABLE_PULLUP+0x8>
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
     ce2:	89 83       	std	Y+1, r24	; 0x01
     ce4:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	3c 83       	std	Y+4, r19	; 0x04
     cee:	2b 83       	std	Y+3, r18	; 0x03
     cf0:	4b 81       	ldd	r20, Y+3	; 0x03
     cf2:	5c 81       	ldd	r21, Y+4	; 0x04
     cf4:	41 30       	cpi	r20, 0x01	; 1
     cf6:	51 05       	cpc	r21, r1
     cf8:	09 f4       	brne	.+2      	; 0xcfc <DIO_DISABLE_PULLUP+0x26>
     cfa:	41 c0       	rjmp	.+130    	; 0xd7e <DIO_DISABLE_PULLUP+0xa8>
     cfc:	8b 81       	ldd	r24, Y+3	; 0x03
     cfe:	9c 81       	ldd	r25, Y+4	; 0x04
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	91 05       	cpc	r25, r1
     d04:	34 f4       	brge	.+12     	; 0xd12 <DIO_DISABLE_PULLUP+0x3c>
     d06:	2b 81       	ldd	r18, Y+3	; 0x03
     d08:	3c 81       	ldd	r19, Y+4	; 0x04
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	71 f0       	breq	.+28     	; 0xd2c <DIO_DISABLE_PULLUP+0x56>
     d10:	ae c0       	rjmp	.+348    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
     d12:	4b 81       	ldd	r20, Y+3	; 0x03
     d14:	5c 81       	ldd	r21, Y+4	; 0x04
     d16:	42 30       	cpi	r20, 0x02	; 2
     d18:	51 05       	cpc	r21, r1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <DIO_DISABLE_PULLUP+0x48>
     d1c:	59 c0       	rjmp	.+178    	; 0xdd0 <DIO_DISABLE_PULLUP+0xfa>
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	9c 81       	ldd	r25, Y+4	; 0x04
     d22:	83 30       	cpi	r24, 0x03	; 3
     d24:	91 05       	cpc	r25, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <DIO_DISABLE_PULLUP+0x54>
     d28:	7b c0       	rjmp	.+246    	; 0xe20 <DIO_DISABLE_PULLUP+0x14a>
     d2a:	a1 c0       	rjmp	.+322    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     d2c:	ea e3       	ldi	r30, 0x3A	; 58
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a9 01       	movw	r20, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_DISABLE_PULLUP+0x6e>
     d40:	55 95       	asr	r21
     d42:	47 95       	ror	r20
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_DISABLE_PULLUP+0x6a>
     d48:	ca 01       	movw	r24, r20
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	90 70       	andi	r25, 0x00	; 0
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f0       	breq	.+2      	; 0xd54 <DIO_DISABLE_PULLUP+0x7e>
     d52:	8d c0       	rjmp	.+282    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTA_REG,pin);
     d54:	ab e3       	ldi	r26, 0x3B	; 59
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	eb e3       	ldi	r30, 0x3B	; 59
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	48 2f       	mov	r20, r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	28 2f       	mov	r18, r24
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 2e       	mov	r0, r18
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <DIO_DISABLE_PULLUP+0x9c>
     d6e:	88 0f       	add	r24, r24
     d70:	99 1f       	adc	r25, r25
     d72:	0a 94       	dec	r0
     d74:	e2 f7       	brpl	.-8      	; 0xd6e <DIO_DISABLE_PULLUP+0x98>
     d76:	80 95       	com	r24
     d78:	84 23       	and	r24, r20
     d7a:	8c 93       	st	X, r24
     d7c:	78 c0       	rjmp	.+240    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     d7e:	e7 e3       	ldi	r30, 0x37	; 55
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	8a 81       	ldd	r24, Y+2	; 0x02
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a9 01       	movw	r20, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_DISABLE_PULLUP+0xc0>
     d92:	55 95       	asr	r21
     d94:	47 95       	ror	r20
     d96:	8a 95       	dec	r24
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_DISABLE_PULLUP+0xbc>
     d9a:	ca 01       	movw	r24, r20
     d9c:	81 70       	andi	r24, 0x01	; 1
     d9e:	90 70       	andi	r25, 0x00	; 0
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	09 f0       	breq	.+2      	; 0xda6 <DIO_DISABLE_PULLUP+0xd0>
     da4:	64 c0       	rjmp	.+200    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTB_REG,pin);
     da6:	a8 e3       	ldi	r26, 0x38	; 56
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e3       	ldi	r30, 0x38	; 56
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	48 2f       	mov	r20, r24
     db2:	8a 81       	ldd	r24, Y+2	; 0x02
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_DISABLE_PULLUP+0xee>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_DISABLE_PULLUP+0xea>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	4f c0       	rjmp	.+158    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	8a 81       	ldd	r24, Y+2	; 0x02
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a9 01       	movw	r20, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_DISABLE_PULLUP+0x112>
     de4:	55 95       	asr	r21
     de6:	47 95       	ror	r20
     de8:	8a 95       	dec	r24
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_DISABLE_PULLUP+0x10e>
     dec:	ca 01       	movw	r24, r20
     dee:	81 70       	andi	r24, 0x01	; 1
     df0:	90 70       	andi	r25, 0x00	; 0
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	e1 f5       	brne	.+120    	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTC_REG,pin);
     df6:	a5 e3       	ldi	r26, 0x35	; 53
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e5 e3       	ldi	r30, 0x35	; 53
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_DISABLE_PULLUP+0x13e>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_DISABLE_PULLUP+0x13a>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
     e1e:	27 c0       	rjmp	.+78     	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     e20:	e1 e3       	ldi	r30, 0x31	; 49
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	8a 81       	ldd	r24, Y+2	; 0x02
     e2c:	88 2f       	mov	r24, r24
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a9 01       	movw	r20, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <DIO_DISABLE_PULLUP+0x162>
     e34:	55 95       	asr	r21
     e36:	47 95       	ror	r20
     e38:	8a 95       	dec	r24
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <DIO_DISABLE_PULLUP+0x15e>
     e3c:	ca 01       	movw	r24, r20
     e3e:	81 70       	andi	r24, 0x01	; 1
     e40:	90 70       	andi	r25, 0x00	; 0
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	a1 f4       	brne	.+40     	; 0xe6e <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTD_REG,pin);
     e46:	a2 e3       	ldi	r26, 0x32	; 50
     e48:	b0 e0       	ldi	r27, 0x00	; 0
     e4a:	e2 e3       	ldi	r30, 0x32	; 50
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	48 2f       	mov	r20, r24
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	28 2f       	mov	r18, r24
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	02 2e       	mov	r0, r18
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <DIO_DISABLE_PULLUP+0x18e>
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	0a 94       	dec	r0
     e66:	e2 f7       	brpl	.-8      	; 0xe60 <DIO_DISABLE_PULLUP+0x18a>
     e68:	80 95       	com	r24
     e6a:	84 23       	and	r24, r20
     e6c:	8c 93       	st	X, r24
		break;
	}
}
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <DIO_READ_LEVEL>:
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <DIO_READ_LEVEL+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <DIO_READ_LEVEL+0x8>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3d 83       	std	Y+5, r19	; 0x05
     e96:	2c 83       	std	Y+4, r18	; 0x04
     e98:	4c 81       	ldd	r20, Y+4	; 0x04
     e9a:	5d 81       	ldd	r21, Y+5	; 0x05
     e9c:	41 30       	cpi	r20, 0x01	; 1
     e9e:	51 05       	cpc	r21, r1
     ea0:	49 f1       	breq	.+82     	; 0xef4 <DIO_READ_LEVEL+0x78>
     ea2:	8c 81       	ldd	r24, Y+4	; 0x04
     ea4:	9d 81       	ldd	r25, Y+5	; 0x05
     ea6:	82 30       	cpi	r24, 0x02	; 2
     ea8:	91 05       	cpc	r25, r1
     eaa:	34 f4       	brge	.+12     	; 0xeb8 <DIO_READ_LEVEL+0x3c>
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	21 15       	cp	r18, r1
     eb2:	31 05       	cpc	r19, r1
     eb4:	61 f0       	breq	.+24     	; 0xece <DIO_READ_LEVEL+0x52>
     eb6:	57 c0       	rjmp	.+174    	; 0xf66 <DIO_READ_LEVEL+0xea>
     eb8:	4c 81       	ldd	r20, Y+4	; 0x04
     eba:	5d 81       	ldd	r21, Y+5	; 0x05
     ebc:	42 30       	cpi	r20, 0x02	; 2
     ebe:	51 05       	cpc	r21, r1
     ec0:	61 f1       	breq	.+88     	; 0xf1a <DIO_READ_LEVEL+0x9e>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	83 30       	cpi	r24, 0x03	; 3
     ec8:	91 05       	cpc	r25, r1
     eca:	d1 f1       	breq	.+116    	; 0xf40 <DIO_READ_LEVEL+0xc4>
     ecc:	4c c0       	rjmp	.+152    	; 0xf66 <DIO_READ_LEVEL+0xea>
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
     ece:	e9 e3       	ldi	r30, 0x39	; 57
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	88 2f       	mov	r24, r24
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a9 01       	movw	r20, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <DIO_READ_LEVEL+0x6a>
     ee2:	55 95       	asr	r21
     ee4:	47 95       	ror	r20
     ee6:	8a 95       	dec	r24
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <DIO_READ_LEVEL+0x66>
     eea:	ca 01       	movw	r24, r20
     eec:	58 2f       	mov	r21, r24
     eee:	51 70       	andi	r21, 0x01	; 1
     ef0:	5b 83       	std	Y+3, r21	; 0x03
     ef2:	3a c0       	rjmp	.+116    	; 0xf68 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
     ef4:	e6 e3       	ldi	r30, 0x36	; 54
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	28 2f       	mov	r18, r24
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a9 01       	movw	r20, r18
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_READ_LEVEL+0x90>
     f08:	55 95       	asr	r21
     f0a:	47 95       	ror	r20
     f0c:	8a 95       	dec	r24
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_READ_LEVEL+0x8c>
     f10:	ca 01       	movw	r24, r20
     f12:	58 2f       	mov	r21, r24
     f14:	51 70       	andi	r21, 0x01	; 1
     f16:	5b 83       	std	Y+3, r21	; 0x03
     f18:	27 c0       	rjmp	.+78     	; 0xf68 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
     f1a:	e3 e3       	ldi	r30, 0x33	; 51
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	88 2f       	mov	r24, r24
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a9 01       	movw	r20, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_READ_LEVEL+0xb6>
     f2e:	55 95       	asr	r21
     f30:	47 95       	ror	r20
     f32:	8a 95       	dec	r24
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_READ_LEVEL+0xb2>
     f36:	ca 01       	movw	r24, r20
     f38:	58 2f       	mov	r21, r24
     f3a:	51 70       	andi	r21, 0x01	; 1
     f3c:	5b 83       	std	Y+3, r21	; 0x03
     f3e:	14 c0       	rjmp	.+40     	; 0xf68 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
     f40:	e0 e3       	ldi	r30, 0x30	; 48
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	8a 81       	ldd	r24, Y+2	; 0x02
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	a9 01       	movw	r20, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_READ_LEVEL+0xdc>
     f54:	55 95       	asr	r21
     f56:	47 95       	ror	r20
     f58:	8a 95       	dec	r24
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_READ_LEVEL+0xd8>
     f5c:	ca 01       	movw	r24, r20
     f5e:	58 2f       	mov	r21, r24
     f60:	51 70       	andi	r21, 0x01	; 1
     f62:	5b 83       	std	Y+3, r21	; 0x03
     f64:	01 c0       	rjmp	.+2      	; 0xf68 <DIO_READ_LEVEL+0xec>
		break;
	}
	return 0;
     f66:	1b 82       	std	Y+3, r1	; 0x03
     f68:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <DIO_WRITE_STATUS>:
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <DIO_WRITE_STATUS+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <DIO_WRITE_STATUS+0x8>
     f82:	0f 92       	push	r0
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	89 83       	std	Y+1, r24	; 0x01
     f8a:	6a 83       	std	Y+2, r22	; 0x02
     f8c:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	3d 83       	std	Y+5, r19	; 0x05
     f96:	2c 83       	std	Y+4, r18	; 0x04
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	9d 81       	ldd	r25, Y+5	; 0x05
     f9c:	81 30       	cpi	r24, 0x01	; 1
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_WRITE_STATUS+0x2a>
     fa2:	43 c0       	rjmp	.+134    	; 0x102a <DIO_WRITE_STATUS+0xb0>
     fa4:	2c 81       	ldd	r18, Y+4	; 0x04
     fa6:	3d 81       	ldd	r19, Y+5	; 0x05
     fa8:	22 30       	cpi	r18, 0x02	; 2
     faa:	31 05       	cpc	r19, r1
     fac:	2c f4       	brge	.+10     	; 0xfb8 <DIO_WRITE_STATUS+0x3e>
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
     fb0:	9d 81       	ldd	r25, Y+5	; 0x05
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <DIO_WRITE_STATUS+0x58>
     fb6:	bc c0       	rjmp	.+376    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
     fb8:	2c 81       	ldd	r18, Y+4	; 0x04
     fba:	3d 81       	ldd	r19, Y+5	; 0x05
     fbc:	22 30       	cpi	r18, 0x02	; 2
     fbe:	31 05       	cpc	r19, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <DIO_WRITE_STATUS+0x4a>
     fc2:	5f c0       	rjmp	.+190    	; 0x1082 <DIO_WRITE_STATUS+0x108>
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <DIO_WRITE_STATUS+0x56>
     fce:	85 c0       	rjmp	.+266    	; 0x10da <DIO_WRITE_STATUS+0x160>
     fd0:	af c0       	rjmp	.+350    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
	case DIO_PORTA:
		if (direction==OUTPUT)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	a1 f4       	brne	.+40     	; 0x1000 <DIO_WRITE_STATUS+0x86>
			SET_BIT(DDRA_REG,pin);
     fd8:	aa e3       	ldi	r26, 0x3A	; 58
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	ea e3       	ldi	r30, 0x3A	; 58
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_WRITE_STATUS+0x7c>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_WRITE_STATUS+0x78>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	98 c0       	rjmp	.+304    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRA_REG,pin);
    1000:	aa e3       	ldi	r26, 0x3A	; 58
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	ea e3       	ldi	r30, 0x3A	; 58
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <DIO_WRITE_STATUS+0xa4>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <DIO_WRITE_STATUS+0xa0>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	83 c0       	rjmp	.+262    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTB:
		if (direction==OUTPUT)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	a1 f4       	brne	.+40     	; 0x1058 <DIO_WRITE_STATUS+0xde>
			SET_BIT(DDRB_REG,pin);
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_WRITE_STATUS+0xd4>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_WRITE_STATUS+0xd0>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	6c c0       	rjmp	.+216    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRB_REG,pin);
    1058:	a7 e3       	ldi	r26, 0x37	; 55
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e7 e3       	ldi	r30, 0x37	; 55
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_WRITE_STATUS+0xfc>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_WRITE_STATUS+0xf8>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	57 c0       	rjmp	.+174    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTC:
		if (direction==OUTPUT)
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	a1 f4       	brne	.+40     	; 0x10b0 <DIO_WRITE_STATUS+0x136>
			SET_BIT(DDRC_REG,pin);
    1088:	a4 e3       	ldi	r26, 0x34	; 52
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e4 e3       	ldi	r30, 0x34	; 52
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_WRITE_STATUS+0x12c>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_WRITE_STATUS+0x128>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	40 c0       	rjmp	.+128    	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRC_REG,pin);
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_WRITE_STATUS+0x154>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_WRITE_STATUS+0x150>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	2b c0       	rjmp	.+86     	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTD:
		if (direction==OUTPUT)
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	a1 f4       	brne	.+40     	; 0x1108 <DIO_WRITE_STATUS+0x18e>
			SET_BIT(DDRD_REG,pin);
    10e0:	a1 e3       	ldi	r26, 0x31	; 49
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e1 e3       	ldi	r30, 0x31	; 49
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	48 2f       	mov	r20, r24
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	02 2e       	mov	r0, r18
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <DIO_WRITE_STATUS+0x184>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	0a 94       	dec	r0
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <DIO_WRITE_STATUS+0x180>
    1102:	84 2b       	or	r24, r20
    1104:	8c 93       	st	X, r24
    1106:	14 c0       	rjmp	.+40     	; 0x1130 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRD_REG,pin);
    1108:	a1 e3       	ldi	r26, 0x31	; 49
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e1 e3       	ldi	r30, 0x31	; 49
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	48 2f       	mov	r20, r24
    1114:	8a 81       	ldd	r24, Y+2	; 0x02
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	02 2e       	mov	r0, r18
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <DIO_WRITE_STATUS+0x1ac>
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	0a 94       	dec	r0
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <DIO_WRITE_STATUS+0x1a8>
    112a:	80 95       	com	r24
    112c:	84 23       	and	r24, r20
    112e:	8c 93       	st	X, r24
		break;
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <Dio_WriteGroup>:
//--------------------------------------------------------------------------------------------------
void Dio_WriteGroup(Port_ID port,u8 mask,u8 data)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <Dio_WriteGroup+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <Dio_WriteGroup+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	6a 83       	std	Y+2, r22	; 0x02
    1152:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	3d 83       	std	Y+5, r19	; 0x05
    115c:	2c 83       	std	Y+4, r18	; 0x04
    115e:	8c 81       	ldd	r24, Y+4	; 0x04
    1160:	9d 81       	ldd	r25, Y+5	; 0x05
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	91 05       	cpc	r25, r1
    1166:	29 f1       	breq	.+74     	; 0x11b2 <Dio_WriteGroup+0x72>
    1168:	2c 81       	ldd	r18, Y+4	; 0x04
    116a:	3d 81       	ldd	r19, Y+5	; 0x05
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	2c f4       	brge	.+10     	; 0x117c <Dio_WriteGroup+0x3c>
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	61 f0       	breq	.+24     	; 0x1192 <Dio_WriteGroup+0x52>
    117a:	4a c0       	rjmp	.+148    	; 0x1210 <Dio_WriteGroup+0xd0>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	31 f1       	breq	.+76     	; 0x11d2 <Dio_WriteGroup+0x92>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	91 05       	cpc	r25, r1
    118e:	89 f1       	breq	.+98     	; 0x11f2 <Dio_WriteGroup+0xb2>
    1190:	3f c0       	rjmp	.+126    	; 0x1210 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		PORTA_REG = (PORTA_REG&~mask)|(data & mask);
    1192:	ab e3       	ldi	r26, 0x3B	; 59
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	98 2f       	mov	r25, r24
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	80 95       	com	r24
    11a2:	29 2f       	mov	r18, r25
    11a4:	28 23       	and	r18, r24
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	89 23       	and	r24, r25
    11ac:	82 2b       	or	r24, r18
    11ae:	8c 93       	st	X, r24
    11b0:	2f c0       	rjmp	.+94     	; 0x1210 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		PORTB_REG = (PORTB_REG&~mask)|(data & mask);
    11b2:	a8 e3       	ldi	r26, 0x38	; 56
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	e8 e3       	ldi	r30, 0x38	; 56
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	98 2f       	mov	r25, r24
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	80 95       	com	r24
    11c2:	29 2f       	mov	r18, r25
    11c4:	28 23       	and	r18, r24
    11c6:	9b 81       	ldd	r25, Y+3	; 0x03
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	89 23       	and	r24, r25
    11cc:	82 2b       	or	r24, r18
    11ce:	8c 93       	st	X, r24
    11d0:	1f c0       	rjmp	.+62     	; 0x1210 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		PORTC_REG = (PORTC_REG&~mask)|(data & mask);
    11d2:	a5 e3       	ldi	r26, 0x35	; 53
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e5 e3       	ldi	r30, 0x35	; 53
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	98 2f       	mov	r25, r24
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	80 95       	com	r24
    11e2:	29 2f       	mov	r18, r25
    11e4:	28 23       	and	r18, r24
    11e6:	9b 81       	ldd	r25, Y+3	; 0x03
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	89 23       	and	r24, r25
    11ec:	82 2b       	or	r24, r18
    11ee:	8c 93       	st	X, r24
    11f0:	0f c0       	rjmp	.+30     	; 0x1210 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		PORTD_REG = (PORTD_REG&~mask)|(data & mask);
    11f2:	a2 e3       	ldi	r26, 0x32	; 50
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e2 e3       	ldi	r30, 0x32	; 50
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	98 2f       	mov	r25, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 95       	com	r24
    1202:	29 2f       	mov	r18, r25
    1204:	28 23       	and	r18, r24
    1206:	9b 81       	ldd	r25, Y+3	; 0x03
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	89 23       	and	r24, r25
    120c:	82 2b       	or	r24, r18
    120e:	8c 93       	st	X, r24
		break;
	}
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <SSD_Init>:
#include "SSD.h"

static u8 Counter =0;

void SSD_Init(void)
{
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN4,OUTPUT);
    1228:	80 e0       	ldi	r24, 0x00	; 0
    122a:	64 e0       	ldi	r22, 0x04	; 4
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN5,OUTPUT);
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	65 e0       	ldi	r22, 0x05	; 5
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN6,OUTPUT);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	66 e0       	ldi	r22, 0x06	; 6
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN7,OUTPUT);
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	67 e0       	ldi	r22, 0x07	; 7
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>

	/*	Configure Control Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN1,OUTPUT);
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	61 e0       	ldi	r22, 0x01	; 1
    1254:	41 e0       	ldi	r20, 0x01	; 1
    1256:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN2,OUTPUT);
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	62 e0       	ldi	r22, 0x02	; 2
    125e:	41 e0       	ldi	r20, 0x01	; 1
    1260:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <SSD_DisplayNumber>:
//--------------------------------------------------------------------------------------------------
void SSD_DisplayNumber(u8 num)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <SSD_DisplayNumber+0x6>
    1270:	0f 92       	push	r0
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_FirstDigit = (num/10)<<4;
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9a e0       	ldi	r25, 0x0A	; 10
    127c:	69 2f       	mov	r22, r25
    127e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__udivmodqi4>
    1282:	82 95       	swap	r24
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_Second_Digit = (num%10)<<4;
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9a e0       	ldi	r25, 0x0A	; 10
    128c:	69 2f       	mov	r22, r25
    128e:	0e 94 91 0b 	call	0x1722	; 0x1722 <__udivmodqi4>
    1292:	89 2f       	mov	r24, r25
    1294:	82 95       	swap	r24
    1296:	80 7f       	andi	r24, 0xF0	; 240
    1298:	89 83       	std	Y+1, r24	; 0x01

	if(Counter < (((2^8)-1)/2)){
    129a:	80 91 69 00 	lds	r24, 0x0069
    129e:	84 30       	cpi	r24, 0x04	; 4
    12a0:	70 f4       	brcc	.+28     	; 0x12be <SSD_DisplayNumber+0x54>
		/*	Enable SSD1	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN2);
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	62 e0       	ldi	r22, 0x02	; 2
    12a6:	0e 94 20 04 	call	0x840	; 0x840 <DIO_SET_PIN>
		/*	Disable SSD2	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	60 ef       	ldi	r22, 0xF0	; 240
    12b6:	4a 81       	ldd	r20, Y+2	; 0x02
    12b8:	0e 94 a0 08 	call	0x1140	; 0x1140 <Dio_WriteGroup>
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <SSD_DisplayNumber+0x6e>
	}else{
		/*	Disable SSD1	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	62 e0       	ldi	r22, 0x02	; 2
    12c2:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
		/*	Enable SSD2	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN1);
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	0e 94 20 04 	call	0x840	; 0x840 <DIO_SET_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	60 ef       	ldi	r22, 0xF0	; 240
    12d2:	49 81       	ldd	r20, Y+1	; 0x01
    12d4:	0e 94 a0 08 	call	0x1140	; 0x1140 <Dio_WriteGroup>
	}
	Counter++;
    12d8:	80 91 69 00 	lds	r24, 0x0069
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	80 93 69 00 	sts	0x0069, r24
	if(Counter==((2^8)-1)){
    12e2:	80 91 69 00 	lds	r24, 0x0069
    12e6:	89 30       	cpi	r24, 0x09	; 9
    12e8:	11 f4       	brne	.+4      	; 0x12ee <SSD_DisplayNumber+0x84>
		Counter = 0;
    12ea:	10 92 69 00 	sts	0x0069, r1
	}
}
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <SSD_Stop>:
//--------------------------------------------------------------------------------------------------
void SSD_Stop(){
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
	/*	Disable SSD1	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	62 e0       	ldi	r22, 0x02	; 2
    1306:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
	/*	Disable SSD2	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <LED_Init>:
#include "LED.h"

void LED_Init(void){
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OUTPUT);
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	67 e0       	ldi	r22, 0x07	; 7
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <LED_ON>:

void LED_ON(void){
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	67 e0       	ldi	r22, 0x07	; 7
    133c:	0e 94 20 04 	call	0x840	; 0x840 <DIO_SET_PIN>
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	08 95       	ret

00001346 <LED_OFF>:

void LED_OFF(void){
    1346:	df 93       	push	r29
    1348:	cf 93       	push	r28
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	67 e0       	ldi	r22, 0x07	; 7
    1352:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <LED_TOGGLE>:

void LED_TOGGLE(void){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	67 e0       	ldi	r22, 0x07	; 7
    1368:	0e 94 1f 05 	call	0xa3e	; 0xa3e <DIO_TOGGLE_PIN>
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <Heater_Init>:
#include "Heater.h"

void Heater_Init(){
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OUTPUT);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	64 e0       	ldi	r22, 0x04	; 4
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
}
    1384:	cf 91       	pop	r28
    1386:	df 91       	pop	r29
    1388:	08 95       	ret

0000138a <Heater_ON>:

void Heater_ON(){
    138a:	df 93       	push	r29
    138c:	cf 93       	push	r28
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Heater_Port, Heater_Pin);
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	64 e0       	ldi	r22, 0x04	; 4
    1396:	0e 94 20 04 	call	0x840	; 0x840 <DIO_SET_PIN>
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <Heater_OFF>:
void Heater_OFF(){
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	cd b7       	in	r28, 0x3d	; 61
    13a6:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	64 e0       	ldi	r22, 0x04	; 4
    13ac:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
	LED_OFF();
    13b0:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED_OFF>
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Cooler_Init>:
#include "Cooler.h"

void Cooler_Init(){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OUTPUT);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <Cooler_ON>:
void Cooler_ON(){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	64 e0       	ldi	r22, 0x04	; 4
    13de:	0e 94 20 04 	call	0x840	; 0x840 <DIO_SET_PIN>
	LED_ON();
    13e2:	0e 94 98 09 	call	0x1330	; 0x1330 <LED_ON>
}
    13e6:	cf 91       	pop	r28
    13e8:	df 91       	pop	r29
    13ea:	08 95       	ret

000013ec <Cooler_OFF>:
void Cooler_OFF(){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
    13f4:	82 e0       	ldi	r24, 0x02	; 2
    13f6:	64 e0       	ldi	r22, 0x04	; 4
    13f8:	0e 94 9d 04 	call	0x93a	; 0x93a <DIO_CLEAR_PIN>
	LED_OFF();
    13fc:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED_OFF>
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Button_Init>:
#include "Button.h"

void Button_Init(Button_ID Button){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <Button_Init+0x6>
    140c:	0f 92       	push	r0
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	3b 83       	std	Y+3, r19	; 0x03
    141c:	2a 83       	std	Y+2, r18	; 0x02
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	9b 81       	ldd	r25, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	91 05       	cpc	r25, r1
    1426:	79 f0       	breq	.+30     	; 0x1446 <Button_Init+0x40>
    1428:	2a 81       	ldd	r18, Y+2	; 0x02
    142a:	3b 81       	ldd	r19, Y+3	; 0x03
    142c:	22 30       	cpi	r18, 0x02	; 2
    142e:	31 05       	cpc	r19, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <Button_Init+0x4c>
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	89 f4       	brne	.+34     	; 0x145c <Button_Init+0x56>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
    1444:	0b c0       	rjmp	.+22     	; 0x145c <Button_Init+0x56>
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	64 e0       	ldi	r22, 0x04	; 4
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
    1450:	05 c0       	rjmp	.+10     	; 0x145c <Button_Init+0x56>
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
    1452:	83 e0       	ldi	r24, 0x03	; 3
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 bd 07 	call	0xf7a	; 0xf7a <DIO_WRITE_STATUS>
				break;
		}
}
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <Button_READ>:
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <Button_READ+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <Button_READ+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	8a 83       	std	Y+2, r24	; 0x02
	Buttom_Status result;
	switch(Button){
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3c 83       	std	Y+4, r19	; 0x04
    147e:	2b 83       	std	Y+3, r18	; 0x03
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	9c 81       	ldd	r25, Y+4	; 0x04
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	79 f0       	breq	.+30     	; 0x14a8 <Button_READ+0x40>
    148a:	2b 81       	ldd	r18, Y+3	; 0x03
    148c:	3c 81       	ldd	r19, Y+4	; 0x04
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <Button_READ+0x4c>
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	89 f4       	brne	.+34     	; 0x14be <Button_READ+0x56>
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	60 e0       	ldi	r22, 0x00	; 0
    14a0:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_READ_LEVEL>
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	0b c0       	rjmp	.+22     	; 0x14be <Button_READ+0x56>
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	64 e0       	ldi	r22, 0x04	; 4
    14ac:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_READ_LEVEL>
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	05 c0       	rjmp	.+10     	; 0x14be <Button_READ+0x56>
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	62 e0       	ldi	r22, 0x02	; 2
    14b8:	0e 94 3e 07 	call	0xe7c	; 0xe7c <DIO_READ_LEVEL>
    14bc:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return result;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <Button_Pullup_Enable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <Button_Pullup_Enable+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	3b 83       	std	Y+3, r19	; 0x03
    14e4:	2a 83       	std	Y+2, r18	; 0x02
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	81 30       	cpi	r24, 0x01	; 1
    14ec:	91 05       	cpc	r25, r1
    14ee:	71 f0       	breq	.+28     	; 0x150c <Button_Pullup_Enable+0x3e>
    14f0:	2a 81       	ldd	r18, Y+2	; 0x02
    14f2:	3b 81       	ldd	r19, Y+3	; 0x03
    14f4:	22 30       	cpi	r18, 0x02	; 2
    14f6:	31 05       	cpc	r19, r1
    14f8:	71 f0       	breq	.+28     	; 0x1516 <Button_Pullup_Enable+0x48>
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	9b 81       	ldd	r25, Y+3	; 0x03
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	71 f4       	brne	.+28     	; 0x151e <Button_Pullup_Enable+0x50>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	0e 94 9c 05 	call	0xb38	; 0xb38 <DIO_ENABLE_PULLUP>
    150a:	09 c0       	rjmp	.+18     	; 0x151e <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	64 e0       	ldi	r22, 0x04	; 4
    1510:	0e 94 9c 05 	call	0xb38	; 0xb38 <DIO_ENABLE_PULLUP>
    1514:	04 c0       	rjmp	.+8      	; 0x151e <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
    1516:	83 e0       	ldi	r24, 0x03	; 3
    1518:	62 e0       	ldi	r22, 0x02	; 2
    151a:	0e 94 9c 05 	call	0xb38	; 0xb38 <DIO_ENABLE_PULLUP>
				break;
		}
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	cf 91       	pop	r28
    1526:	df 91       	pop	r29
    1528:	08 95       	ret

0000152a <Button_Pullup_Disable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
    152a:	df 93       	push	r29
    152c:	cf 93       	push	r28
    152e:	00 d0       	rcall	.+0      	; 0x1530 <Button_Pullup_Disable+0x6>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	3b 83       	std	Y+3, r19	; 0x03
    1540:	2a 83       	std	Y+2, r18	; 0x02
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	91 05       	cpc	r25, r1
    154a:	71 f0       	breq	.+28     	; 0x1568 <Button_Pullup_Disable+0x3e>
    154c:	2a 81       	ldd	r18, Y+2	; 0x02
    154e:	3b 81       	ldd	r19, Y+3	; 0x03
    1550:	22 30       	cpi	r18, 0x02	; 2
    1552:	31 05       	cpc	r19, r1
    1554:	71 f0       	breq	.+28     	; 0x1572 <Button_Pullup_Disable+0x48>
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	9b 81       	ldd	r25, Y+3	; 0x03
    155a:	00 97       	sbiw	r24, 0x00	; 0
    155c:	71 f4       	brne	.+28     	; 0x157a <Button_Pullup_Disable+0x50>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
    155e:	81 e0       	ldi	r24, 0x01	; 1
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_DISABLE_PULLUP>
    1566:	09 c0       	rjmp	.+18     	; 0x157a <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	64 e0       	ldi	r22, 0x04	; 4
    156c:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_DISABLE_PULLUP>
    1570:	04 c0       	rjmp	.+8      	; 0x157a <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
    1572:	83 e0       	ldi	r24, 0x03	; 3
    1574:	62 e0       	ldi	r22, 0x02	; 2
    1576:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <DIO_DISABLE_PULLUP>
				break;
		}
}
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <main>:
#include "Lib.h"
#include "Main_Types.h"
#include "Services.h"


int main (){
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <main+0x6>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Timer0_Init();
    1590:	0e 94 3d 03 	call	0x67a	; 0x67a <Timer0_Init>
	Timer1_Init();
    1594:	0e 94 67 02 	call	0x4ce	; 0x4ce <Timer1_Init>
	Timer2_Init();
    1598:	0e 94 a0 01 	call	0x340	; 0x340 <Timer2_Init>
	Heater_Init();
    159c:	0e 94 b9 09 	call	0x1372	; 0x1372 <Heater_Init>
	Cooler_Init();
    15a0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Cooler_Init>
	//	TempSen_Init();
	SSD_Init();
    15a4:	0e 94 10 09 	call	0x1220	; 0x1220 <SSD_Init>
	Button_Init(BUTTON0);
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	0e 94 03 0a 	call	0x1406	; 0x1406 <Button_Init>
	Button_Init(BUTTON1);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	0e 94 03 0a 	call	0x1406	; 0x1406 <Button_Init>
	Button_Init(BUTTON2);
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	0e 94 03 0a 	call	0x1406	; 0x1406 <Button_Init>
	LED_Init();
    15ba:	0e 94 8c 09 	call	0x1318	; 0x1318 <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
    15be:	19 82       	std	Y+1, r1	; 0x01
	ButtonEnable = TRUE;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	80 93 6f 00 	sts	0x006F, r24
	Mode = Temp_Control;
    15c6:	10 92 6e 00 	sts	0x006E, r1
	Curr_Temp = 0;
    15ca:	10 92 6b 00 	sts	0x006B, r1
	Restore_Temp();
    15ce:	0e 94 fe 00 	call	0x1fc	; 0x1fc <Restore_Temp>
	Update_Temp_En = TRUE;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	80 93 6c 00 	sts	0x006C, r24
	Blink_Status = FALSE;
    15d8:	10 92 6a 00 	sts	0x006A, r1
	Timer2_Start(TIMER2_1024_);
    15dc:	87 e0       	ldi	r24, 0x07	; 7
    15de:	0e 94 b5 01 	call	0x36a	; 0x36a <Timer2_Start>
	Timer2_EnableInterrupt();
    15e2:	0e 94 44 02 	call	0x488	; 0x488 <Timer2_EnableInterrupt>
		SSD_DisplayNumber(54);*/


		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 34 0a 	call	0x1468	; 0x1468 <Button_READ>
    15ec:	88 23       	and	r24, r24
    15ee:	71 f0       	breq	.+28     	; 0x160c <main+0x86>
			if(ButtonEnable == TRUE){
    15f0:	80 91 6f 00 	lds	r24, 0x006F
    15f4:	81 30       	cpi	r24, 0x01	; 1
    15f6:	41 f4       	brne	.+16     	; 0x1608 <main+0x82>
				SystemStatus = !SystemStatus;
    15f8:	1a 82       	std	Y+2, r1	; 0x02
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	88 23       	and	r24, r24
    15fe:	11 f4       	brne	.+4      	; 0x1604 <main+0x7e>
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
			}
			Debounce_Handler();
    1608:	0e 94 92 01 	call	0x324	; 0x324 <Debounce_Handler>
		}

		if(SystemStatus==OFF){
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	88 23       	and	r24, r24
    1610:	49 f4       	brne	.+18     	; 0x1624 <main+0x9e>
			Heater_OFF();
    1612:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <Heater_OFF>
			Cooler_OFF();
    1616:	0e 94 f6 09 	call	0x13ec	; 0x13ec <Cooler_OFF>
			SSD_Stop();
    161a:	0e 94 7d 09 	call	0x12fa	; 0x12fa <SSD_Stop>
			Mode = Temp_Control;
    161e:	10 92 6e 00 	sts	0x006E, r1
    1622:	e1 cf       	rjmp	.-62     	; 0x15e6 <main+0x60>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
    1624:	80 91 6c 00 	lds	r24, 0x006C
    1628:	81 30       	cpi	r24, 0x01	; 1
    162a:	11 f4       	brne	.+4      	; 0x1630 <main+0xaa>
			Update_Temp();
    162c:	0e 94 93 00 	call	0x126	; 0x126 <Update_Temp>
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	0e 94 34 0a 	call	0x1468	; 0x1468 <Button_READ>
    1636:	88 23       	and	r24, r24
    1638:	29 f4       	brne	.+10     	; 0x1644 <main+0xbe>
    163a:	82 e0       	ldi	r24, 0x02	; 2
    163c:	0e 94 34 0a 	call	0x1468	; 0x1468 <Button_READ>
    1640:	88 23       	and	r24, r24
    1642:	39 f1       	breq	.+78     	; 0x1692 <main+0x10c>
			if(ButtonEnable == TRUE){
    1644:	80 91 6f 00 	lds	r24, 0x006F
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	f9 f4       	brne	.+62     	; 0x168a <main+0x104>
				Mode_Handler();
    164c:	0e 94 46 01 	call	0x28c	; 0x28c <Mode_Handler>
				Mode = Temp_Set;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	80 93 6e 00 	sts	0x006E, r24

				if(Button_READ(BUTTON2)){
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	0e 94 34 0a 	call	0x1468	; 0x1468 <Button_READ>
    165c:	88 23       	and	r24, r24
    165e:	51 f0       	breq	.+20     	; 0x1674 <main+0xee>
					if(Des_Temp<Max_Temp){
    1660:	80 91 6d 00 	lds	r24, 0x006D
    1664:	80 35       	cpi	r24, 0x50	; 80
    1666:	78 f4       	brcc	.+30     	; 0x1686 <main+0x100>
						Des_Temp +=5;
    1668:	80 91 6d 00 	lds	r24, 0x006D
    166c:	8b 5f       	subi	r24, 0xFB	; 251
    166e:	80 93 6d 00 	sts	0x006D, r24
    1672:	09 c0       	rjmp	.+18     	; 0x1686 <main+0x100>
					}
				}else{
					if(Des_Temp>Min_Temp){
    1674:	80 91 6d 00 	lds	r24, 0x006D
    1678:	8f 31       	cpi	r24, 0x1F	; 31
    167a:	28 f0       	brcs	.+10     	; 0x1686 <main+0x100>
						Des_Temp -=5;
    167c:	80 91 6d 00 	lds	r24, 0x006D
    1680:	85 50       	subi	r24, 0x05	; 5
    1682:	80 93 6d 00 	sts	0x006D, r24
					}
				}
				Store_Temp();
    1686:	0e 94 f7 00 	call	0x1ee	; 0x1ee <Store_Temp>

			}
			Mode_Handler();
    168a:	0e 94 46 01 	call	0x28c	; 0x28c <Mode_Handler>
			Debounce_Handler();
    168e:	0e 94 92 01 	call	0x324	; 0x324 <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
    1692:	80 91 6e 00 	lds	r24, 0x006E
    1696:	88 23       	and	r24, r24
    1698:	29 f4       	brne	.+10     	; 0x16a4 <main+0x11e>
			SSD_DisplayNumber(Curr_Temp);
    169a:	80 91 6b 00 	lds	r24, 0x006B
    169e:	0e 94 35 09 	call	0x126a	; 0x126a <SSD_DisplayNumber>
    16a2:	0f c0       	rjmp	.+30     	; 0x16c2 <main+0x13c>
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
    16a4:	80 91 6e 00 	lds	r24, 0x006E
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	49 f4       	brne	.+18     	; 0x16be <main+0x138>
    16ac:	80 91 6a 00 	lds	r24, 0x006A
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	29 f4       	brne	.+10     	; 0x16be <main+0x138>
			SSD_DisplayNumber(Des_Temp);
    16b4:	80 91 6d 00 	lds	r24, 0x006D
    16b8:	0e 94 35 09 	call	0x126a	; 0x126a <SSD_DisplayNumber>
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <main+0x13c>

		}else{
			SSD_Stop();
    16be:	0e 94 7d 09 	call	0x12fa	; 0x12fa <SSD_Stop>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
    16c2:	80 91 6b 00 	lds	r24, 0x006B
    16c6:	88 2f       	mov	r24, r24
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9c 01       	movw	r18, r24
    16cc:	2b 5f       	subi	r18, 0xFB	; 251
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	80 91 6d 00 	lds	r24, 0x006D
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	64 f4       	brge	.+24     	; 0x16f6 <main+0x170>
			Heater_ON();
    16de:	0e 94 c5 09 	call	0x138a	; 0x138a <Heater_ON>
			if(Blink_Status==TRUE){
    16e2:	80 91 6a 00 	lds	r24, 0x006A
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	19 f4       	brne	.+6      	; 0x16f0 <main+0x16a>
				LED_ON();
    16ea:	0e 94 98 09 	call	0x1330	; 0x1330 <LED_ON>
    16ee:	7b cf       	rjmp	.-266    	; 0x15e6 <main+0x60>
			}else{
				LED_OFF();
    16f0:	0e 94 a3 09 	call	0x1346	; 0x1346 <LED_OFF>
    16f4:	78 cf       	rjmp	.-272    	; 0x15e6 <main+0x60>
			}
		}else if((Curr_Temp-5)>Des_Temp){
    16f6:	80 91 6b 00 	lds	r24, 0x006B
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	9c 01       	movw	r18, r24
    1700:	25 50       	subi	r18, 0x05	; 5
    1702:	30 40       	sbci	r19, 0x00	; 0
    1704:	80 91 6d 00 	lds	r24, 0x006D
    1708:	88 2f       	mov	r24, r24
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	82 17       	cp	r24, r18
    170e:	93 07       	cpc	r25, r19
    1710:	1c f4       	brge	.+6      	; 0x1718 <main+0x192>
			Cooler_ON();
    1712:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Cooler_ON>
    1716:	67 cf       	rjmp	.-306    	; 0x15e6 <main+0x60>
		}else{
			Heater_OFF();
    1718:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <Heater_OFF>
			Cooler_OFF();
    171c:	0e 94 f6 09 	call	0x13ec	; 0x13ec <Cooler_OFF>
    1720:	62 cf       	rjmp	.-316    	; 0x15e6 <main+0x60>

00001722 <__udivmodqi4>:
    1722:	99 1b       	sub	r25, r25
    1724:	79 e0       	ldi	r23, 0x09	; 9
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <__udivmodqi4_ep>

00001728 <__udivmodqi4_loop>:
    1728:	99 1f       	adc	r25, r25
    172a:	96 17       	cp	r25, r22
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__udivmodqi4_ep>
    172e:	96 1b       	sub	r25, r22

00001730 <__udivmodqi4_ep>:
    1730:	88 1f       	adc	r24, r24
    1732:	7a 95       	dec	r23
    1734:	c9 f7       	brne	.-14     	; 0x1728 <__udivmodqi4_loop>
    1736:	80 95       	com	r24
    1738:	08 95       	ret

0000173a <__udivmodhi4>:
    173a:	aa 1b       	sub	r26, r26
    173c:	bb 1b       	sub	r27, r27
    173e:	51 e1       	ldi	r21, 0x11	; 17
    1740:	07 c0       	rjmp	.+14     	; 0x1750 <__udivmodhi4_ep>

00001742 <__udivmodhi4_loop>:
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	a6 17       	cp	r26, r22
    1748:	b7 07       	cpc	r27, r23
    174a:	10 f0       	brcs	.+4      	; 0x1750 <__udivmodhi4_ep>
    174c:	a6 1b       	sub	r26, r22
    174e:	b7 0b       	sbc	r27, r23

00001750 <__udivmodhi4_ep>:
    1750:	88 1f       	adc	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	5a 95       	dec	r21
    1756:	a9 f7       	brne	.-22     	; 0x1742 <__udivmodhi4_loop>
    1758:	80 95       	com	r24
    175a:	90 95       	com	r25
    175c:	bc 01       	movw	r22, r24
    175e:	cd 01       	movw	r24, r26
    1760:	08 95       	ret

00001762 <_exit>:
    1762:	f8 94       	cli

00001764 <__stop_program>:
    1764:	ff cf       	rjmp	.-2      	; 0x1764 <__stop_program>
