
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000fa4  00001038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  0000103a  2**0
                  ALLOC
  3 .stab         0000219c  00000000  00000000  0000103c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014b8  00000000  00000000  000031d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 21 07 	call	0xe42	; 0xe42 <main>
  8a:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	df 93       	push	r29
  a0:	cf 93       	push	r28
  a2:	0f 92       	push	r0
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	80 93 6c 00 	sts	0x006C, r24
  ae:	80 91 6a 00 	lds	r24, 0x006A
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	88 23       	and	r24, r24
  b6:	11 f4       	brne	.+4      	; 0xbc <__vector_5+0x2a>
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	80 93 6a 00 	sts	0x006A, r24
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <Calc_Average>:
ISR (TIMER2_OVF_vect){
	Update_Temp_En =TRUE;
	Blink_Status = !Blink_Status;
}

static u8 Calc_Average(){
  d4:	df 93       	push	r29
  d6:	cf 93       	push	r28
  d8:	00 d0       	rcall	.+0      	; 0xda <Calc_Average+0x6>
  da:	0f 92       	push	r0
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
	u8 result = 0;
  e0:	1b 82       	std	Y+3, r1	; 0x03
	for(int i=0;i<5;i++){
  e2:	1a 82       	std	Y+2, r1	; 0x02
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	0e c0       	rjmp	.+28     	; 0x104 <Calc_Average+0x30>
		result+=Temp_arr[i];
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	9a 81       	ldd	r25, Y+2	; 0x02
  ec:	fc 01       	movw	r30, r24
  ee:	ed 59       	subi	r30, 0x9D	; 157
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	90 81       	ld	r25, Z
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
  f6:	89 0f       	add	r24, r25
  f8:	8b 83       	std	Y+3, r24	; 0x03
	Blink_Status = !Blink_Status;
}

static u8 Calc_Average(){
	u8 result = 0;
	for(int i=0;i<5;i++){
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	9a 81       	ldd	r25, Y+2	; 0x02
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	9a 83       	std	Y+2, r25	; 0x02
 102:	89 83       	std	Y+1, r24	; 0x01
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	9a 81       	ldd	r25, Y+2	; 0x02
 108:	85 30       	cpi	r24, 0x05	; 5
 10a:	91 05       	cpc	r25, r1
 10c:	6c f3       	brlt	.-38     	; 0xe8 <Calc_Average+0x14>
		result+=Temp_arr[i];
	}
	result /=5;
 10e:	8b 81       	ldd	r24, Y+3	; 0x03
 110:	95 e0       	ldi	r25, 0x05	; 5
 112:	69 2f       	mov	r22, r25
 114:	0e 94 c4 07 	call	0xf88	; 0xf88 <__udivmodqi4>
 118:	8b 83       	std	Y+3, r24	; 0x03
	return result;
 11a:	8b 81       	ldd	r24, Y+3	; 0x03
}
 11c:	0f 90       	pop	r0
 11e:	0f 90       	pop	r0
 120:	0f 90       	pop	r0
 122:	cf 91       	pop	r28
 124:	df 91       	pop	r29
 126:	08 95       	ret

00000128 <Update_Temp>:

void Update_Temp(void){
 128:	df 93       	push	r29
 12a:	cf 93       	push	r28
 12c:	00 d0       	rcall	.+0      	; 0x12e <Update_Temp+0x6>
 12e:	00 d0       	rcall	.+0      	; 0x130 <Update_Temp+0x8>
 130:	cd b7       	in	r28, 0x3d	; 61
 132:	de b7       	in	r29, 0x3e	; 62
	if(Counter==122){
 134:	80 91 62 00 	lds	r24, 0x0062
 138:	8a 37       	cpi	r24, 0x7A	; 122
 13a:	89 f5       	brne	.+98     	; 0x19e <Update_Temp+0x76>
		//Timer2_Stop();
		u8 Temp = 0/*TempSen_Read()*/;
 13c:	1c 82       	std	Y+4, r1	; 0x04
		u8 Var1 = Temp_arr[0];
 13e:	80 91 63 00 	lds	r24, 0x0063
 142:	8b 83       	std	Y+3, r24	; 0x03
		for(int i=0;i<4;i++){
 144:	1a 82       	std	Y+2, r1	; 0x02
 146:	19 82       	std	Y+1, r1	; 0x01
 148:	20 c0       	rjmp	.+64     	; 0x18a <Update_Temp+0x62>
			if(i==0){
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	9a 81       	ldd	r25, Y+2	; 0x02
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	41 f4       	brne	.+16     	; 0x162 <Update_Temp+0x3a>
				Temp_arr[i] = Temp;
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	fc 01       	movw	r30, r24
 158:	ed 59       	subi	r30, 0x9D	; 157
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	8c 81       	ldd	r24, Y+4	; 0x04
 15e:	80 83       	st	Z, r24
 160:	0f c0       	rjmp	.+30     	; 0x180 <Update_Temp+0x58>
			}
			else{
				Temp_arr[i] = Var1;
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	9a 81       	ldd	r25, Y+2	; 0x02
 166:	fc 01       	movw	r30, r24
 168:	ed 59       	subi	r30, 0x9D	; 157
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	8b 81       	ldd	r24, Y+3	; 0x03
 16e:	80 83       	st	Z, r24
				Var1 = Temp_arr[i+1];
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	fc 01       	movw	r30, r24
 178:	ed 59       	subi	r30, 0x9D	; 157
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	80 81       	ld	r24, Z
 17e:	8b 83       	std	Y+3, r24	; 0x03
void Update_Temp(void){
	if(Counter==122){
		//Timer2_Stop();
		u8 Temp = 0/*TempSen_Read()*/;
		u8 Var1 = Temp_arr[0];
		for(int i=0;i<4;i++){
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	9a 83       	std	Y+2, r25	; 0x02
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	84 30       	cpi	r24, 0x04	; 4
 190:	91 05       	cpc	r25, r1
 192:	dc f2       	brlt	.-74     	; 0x14a <Update_Temp+0x22>
			else{
				Temp_arr[i] = Var1;
				Var1 = Temp_arr[i+1];
			}
		}
		Curr_Temp=Calc_Average();
 194:	0e 94 6a 00 	call	0xd4	; 0xd4 <Calc_Average>
 198:	80 93 6b 00 	sts	0x006B, r24
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <Update_Temp+0x80>
	}
	else{
		Counter++;
 19e:	80 91 62 00 	lds	r24, 0x0062
 1a2:	8f 5f       	subi	r24, 0xFF	; 255
 1a4:	80 93 62 00 	sts	0x0062, r24
		//Timer2_Start(1024);
	}
	Update_Temp_En =FALSE;
 1a8:	10 92 6c 00 	sts	0x006C, r1
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	cf 91       	pop	r28
 1b6:	df 91       	pop	r29
 1b8:	08 95       	ret

000001ba <Store_Temp>:
#include "Store_Temp.h"


void Store_Temp(void){
 1ba:	df 93       	push	r29
 1bc:	cf 93       	push	r28
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
//	EEPROM_Write((u16)1,Des_Temp);
}
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <Restore_Temp>:
#include "Restore_Temp.h"

static u8 CHK = 0b01010101;


void Restore_Temp(void){
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <Restore_Temp+0x6>
 1ce:	0f 92       	push	r0
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	u8 Reading=0;
 1d4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Add=0;
 1d6:	1a 82       	std	Y+2, r1	; 0x02
 1d8:	19 82       	std	Y+1, r1	; 0x01

	//Reading = EEPROM_Read(Add);
	if (Reading == CHK){
 1da:	90 91 60 00 	lds	r25, 0x0060
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	89 17       	cp	r24, r25
 1e2:	19 f4       	brne	.+6      	; 0x1ea <Restore_Temp+0x22>
		Des_Temp = 0/*EEPROM_Read(Add+1)*/;
 1e4:	10 92 6d 00 	sts	0x006D, r1
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <Restore_Temp+0x28>
	}
	else{
		//EEPROM_Write(Add,CHK);
		//EEPROM_Write(Add+1,(u8)default_Temp);
		Des_Temp = default_Temp;
 1ea:	8c e3       	ldi	r24, 0x3C	; 60
 1ec:	80 93 6d 00 	sts	0x006D, r24
	}
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <__vector_9>:
#include "Mode_Handler.h"

ISR(TIMER1_OVF_vect){
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
	Mode = Temp_Set;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 6e 00 	sts	0x006E, r24
	//Timer1_Stop();
	//Timer1_DisableInterrupt();
}
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <Mode_Handler>:

void Mode_Handler(void){
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	//Timer1_Start(1024);
	//Timer1_EnableInterrupt();
}
 22e:	cf 91       	pop	r28
 230:	df 91       	pop	r29
 232:	08 95       	ret

00000234 <__vector_11>:
#include "Debounce_Handler.h"

ISR(TIMER0_OVF_vect){
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	df 93       	push	r29
 242:	cf 93       	push	r28
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = TRUE;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 6f 00 	sts	0x006F, r24
	//Timer0_Stop();
	//Timer0_DisableInterrupt();
}
 24e:	cf 91       	pop	r28
 250:	df 91       	pop	r29
 252:	8f 91       	pop	r24
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <Debounce_Handler>:

void Debounce_Handler(void){
 25e:	df 93       	push	r29
 260:	cf 93       	push	r28
 262:	cd b7       	in	r28, 0x3d	; 61
 264:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = FALSE;
 266:	10 92 6f 00 	sts	0x006F, r1
	//Timer0_Start(1024);
	//Timer0_EnableInterrupt();
}
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <GNRL_ISR_Enable_Global_ISR>:
#include "GNRL_ISR.h"

void GNRL_ISR_Enable_Global_ISR(){
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,7);
 278:	af e5       	ldi	r26, 0x5F	; 95
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	ef e5       	ldi	r30, 0x5F	; 95
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 68       	ori	r24, 0x80	; 128
 284:	8c 93       	st	X, r24
}
 286:	cf 91       	pop	r28
 288:	df 91       	pop	r29
 28a:	08 95       	ret

0000028c <GNRL_ISR_Disable_Global_ISR>:
//--------------------------------------------------------------------------------------------------
void GNRL_ISR_Disable_Global_ISR(){
 28c:	df 93       	push	r29
 28e:	cf 93       	push	r28
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,7);
 294:	af e5       	ldi	r26, 0x5F	; 95
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	ef e5       	ldi	r30, 0x5F	; 95
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	8f 77       	andi	r24, 0x7F	; 127
 2a0:	8c 93       	st	X, r24
}
 2a2:	cf 91       	pop	r28
 2a4:	df 91       	pop	r29
 2a6:	08 95       	ret

000002a8 <DIO_SET_PIN>:
#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
 2a8:	df 93       	push	r29
 2aa:	cf 93       	push	r28
 2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_SET_PIN+0x6>
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_SET_PIN+0x8>
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 2b8:	89 81       	ldd	r24, Y+1	; 0x01
 2ba:	28 2f       	mov	r18, r24
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	3c 83       	std	Y+4, r19	; 0x04
 2c0:	2b 83       	std	Y+3, r18	; 0x03
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	9c 81       	ldd	r25, Y+4	; 0x04
 2c6:	81 30       	cpi	r24, 0x01	; 1
 2c8:	91 05       	cpc	r25, r1
 2ca:	49 f1       	breq	.+82     	; 0x31e <DIO_SET_PIN+0x76>
 2cc:	2b 81       	ldd	r18, Y+3	; 0x03
 2ce:	3c 81       	ldd	r19, Y+4	; 0x04
 2d0:	22 30       	cpi	r18, 0x02	; 2
 2d2:	31 05       	cpc	r19, r1
 2d4:	2c f4       	brge	.+10     	; 0x2e0 <DIO_SET_PIN+0x38>
 2d6:	8b 81       	ldd	r24, Y+3	; 0x03
 2d8:	9c 81       	ldd	r25, Y+4	; 0x04
 2da:	00 97       	sbiw	r24, 0x00	; 0
 2dc:	61 f0       	breq	.+24     	; 0x2f6 <DIO_SET_PIN+0x4e>
 2de:	5a c0       	rjmp	.+180    	; 0x394 <DIO_SET_PIN+0xec>
 2e0:	2b 81       	ldd	r18, Y+3	; 0x03
 2e2:	3c 81       	ldd	r19, Y+4	; 0x04
 2e4:	22 30       	cpi	r18, 0x02	; 2
 2e6:	31 05       	cpc	r19, r1
 2e8:	71 f1       	breq	.+92     	; 0x346 <DIO_SET_PIN+0x9e>
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	91 05       	cpc	r25, r1
 2f2:	e9 f1       	breq	.+122    	; 0x36e <DIO_SET_PIN+0xc6>
 2f4:	4f c0       	rjmp	.+158    	; 0x394 <DIO_SET_PIN+0xec>
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
 2f6:	ab e3       	ldi	r26, 0x3B	; 59
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	eb e3       	ldi	r30, 0x3B	; 59
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	80 81       	ld	r24, Z
 300:	48 2f       	mov	r20, r24
 302:	8a 81       	ldd	r24, Y+2	; 0x02
 304:	28 2f       	mov	r18, r24
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 2e       	mov	r0, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_SET_PIN+0x6c>
 310:	88 0f       	add	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	0a 94       	dec	r0
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_SET_PIN+0x68>
 318:	84 2b       	or	r24, r20
 31a:	8c 93       	st	X, r24
 31c:	3b c0       	rjmp	.+118    	; 0x394 <DIO_SET_PIN+0xec>
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
 31e:	a8 e3       	ldi	r26, 0x38	; 56
 320:	b0 e0       	ldi	r27, 0x00	; 0
 322:	e8 e3       	ldi	r30, 0x38	; 56
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	48 2f       	mov	r20, r24
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	02 2e       	mov	r0, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_SET_PIN+0x94>
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	0a 94       	dec	r0
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_SET_PIN+0x90>
 340:	84 2b       	or	r24, r20
 342:	8c 93       	st	X, r24
 344:	27 c0       	rjmp	.+78     	; 0x394 <DIO_SET_PIN+0xec>
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
 346:	a5 e3       	ldi	r26, 0x35	; 53
 348:	b0 e0       	ldi	r27, 0x00	; 0
 34a:	e5 e3       	ldi	r30, 0x35	; 53
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	48 2f       	mov	r20, r24
 352:	8a 81       	ldd	r24, Y+2	; 0x02
 354:	28 2f       	mov	r18, r24
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	02 2e       	mov	r0, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_SET_PIN+0xbc>
 360:	88 0f       	add	r24, r24
 362:	99 1f       	adc	r25, r25
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_SET_PIN+0xb8>
 368:	84 2b       	or	r24, r20
 36a:	8c 93       	st	X, r24
 36c:	13 c0       	rjmp	.+38     	; 0x394 <DIO_SET_PIN+0xec>
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
 36e:	a2 e3       	ldi	r26, 0x32	; 50
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	e2 e3       	ldi	r30, 0x32	; 50
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	80 81       	ld	r24, Z
 378:	48 2f       	mov	r20, r24
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	28 2f       	mov	r18, r24
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_SET_PIN+0xe4>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_SET_PIN+0xe0>
 390:	84 2b       	or	r24, r20
 392:	8c 93       	st	X, r24
		break;
	}
}
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	cf 91       	pop	r28
 39e:	df 91       	pop	r29
 3a0:	08 95       	ret

000003a2 <DIO_CLEAR_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
 3a2:	df 93       	push	r29
 3a4:	cf 93       	push	r28
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <DIO_CLEAR_PIN+0x6>
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <DIO_CLEAR_PIN+0x8>
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	89 83       	std	Y+1, r24	; 0x01
 3b0:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	3c 83       	std	Y+4, r19	; 0x04
 3ba:	2b 83       	std	Y+3, r18	; 0x03
 3bc:	8b 81       	ldd	r24, Y+3	; 0x03
 3be:	9c 81       	ldd	r25, Y+4	; 0x04
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	91 05       	cpc	r25, r1
 3c4:	59 f1       	breq	.+86     	; 0x41c <DIO_CLEAR_PIN+0x7a>
 3c6:	2b 81       	ldd	r18, Y+3	; 0x03
 3c8:	3c 81       	ldd	r19, Y+4	; 0x04
 3ca:	22 30       	cpi	r18, 0x02	; 2
 3cc:	31 05       	cpc	r19, r1
 3ce:	2c f4       	brge	.+10     	; 0x3da <DIO_CLEAR_PIN+0x38>
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	9c 81       	ldd	r25, Y+4	; 0x04
 3d4:	00 97       	sbiw	r24, 0x00	; 0
 3d6:	69 f0       	breq	.+26     	; 0x3f2 <DIO_CLEAR_PIN+0x50>
 3d8:	5f c0       	rjmp	.+190    	; 0x498 <DIO_CLEAR_PIN+0xf6>
 3da:	2b 81       	ldd	r18, Y+3	; 0x03
 3dc:	3c 81       	ldd	r19, Y+4	; 0x04
 3de:	22 30       	cpi	r18, 0x02	; 2
 3e0:	31 05       	cpc	r19, r1
 3e2:	89 f1       	breq	.+98     	; 0x446 <DIO_CLEAR_PIN+0xa4>
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	9c 81       	ldd	r25, Y+4	; 0x04
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	91 05       	cpc	r25, r1
 3ec:	09 f4       	brne	.+2      	; 0x3f0 <DIO_CLEAR_PIN+0x4e>
 3ee:	40 c0       	rjmp	.+128    	; 0x470 <DIO_CLEAR_PIN+0xce>
 3f0:	53 c0       	rjmp	.+166    	; 0x498 <DIO_CLEAR_PIN+0xf6>
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
 3f2:	ab e3       	ldi	r26, 0x3B	; 59
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	eb e3       	ldi	r30, 0x3B	; 59
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	48 2f       	mov	r20, r24
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	28 2f       	mov	r18, r24
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 2e       	mov	r0, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <DIO_CLEAR_PIN+0x6e>
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	0a 94       	dec	r0
 412:	e2 f7       	brpl	.-8      	; 0x40c <DIO_CLEAR_PIN+0x6a>
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	8c 93       	st	X, r24
 41a:	3e c0       	rjmp	.+124    	; 0x498 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
 41c:	a8 e3       	ldi	r26, 0x38	; 56
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e8 e3       	ldi	r30, 0x38	; 56
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	48 2f       	mov	r20, r24
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 2e       	mov	r0, r18
 434:	02 c0       	rjmp	.+4      	; 0x43a <DIO_CLEAR_PIN+0x98>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <DIO_CLEAR_PIN+0x94>
 43e:	80 95       	com	r24
 440:	84 23       	and	r24, r20
 442:	8c 93       	st	X, r24
 444:	29 c0       	rjmp	.+82     	; 0x498 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
 446:	a5 e3       	ldi	r26, 0x35	; 53
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e5 e3       	ldi	r30, 0x35	; 53
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	48 2f       	mov	r20, r24
 452:	8a 81       	ldd	r24, Y+2	; 0x02
 454:	28 2f       	mov	r18, r24
 456:	30 e0       	ldi	r19, 0x00	; 0
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 2e       	mov	r0, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <DIO_CLEAR_PIN+0xc2>
 460:	88 0f       	add	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <DIO_CLEAR_PIN+0xbe>
 468:	80 95       	com	r24
 46a:	84 23       	and	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	14 c0       	rjmp	.+40     	; 0x498 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
 470:	a2 e3       	ldi	r26, 0x32	; 50
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e2 e3       	ldi	r30, 0x32	; 50
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	48 2f       	mov	r20, r24
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	28 2f       	mov	r18, r24
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	02 2e       	mov	r0, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_CLEAR_PIN+0xec>
 48a:	88 0f       	add	r24, r24
 48c:	99 1f       	adc	r25, r25
 48e:	0a 94       	dec	r0
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_CLEAR_PIN+0xe8>
 492:	80 95       	com	r24
 494:	84 23       	and	r24, r20
 496:	8c 93       	st	X, r24
		break;
	}
}
 498:	0f 90       	pop	r0
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	cf 91       	pop	r28
 4a2:	df 91       	pop	r29
 4a4:	08 95       	ret

000004a6 <DIO_TOGGLE_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
 4a6:	df 93       	push	r29
 4a8:	cf 93       	push	r28
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <DIO_TOGGLE_PIN+0x6>
 4ac:	00 d0       	rcall	.+0      	; 0x4ae <DIO_TOGGLE_PIN+0x8>
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
 4b2:	89 83       	std	Y+1, r24	; 0x01
 4b4:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
 4b6:	89 81       	ldd	r24, Y+1	; 0x01
 4b8:	28 2f       	mov	r18, r24
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	3c 83       	std	Y+4, r19	; 0x04
 4be:	2b 83       	std	Y+3, r18	; 0x03
 4c0:	8b 81       	ldd	r24, Y+3	; 0x03
 4c2:	9c 81       	ldd	r25, Y+4	; 0x04
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 05       	cpc	r25, r1
 4c8:	49 f1       	breq	.+82     	; 0x51c <DIO_TOGGLE_PIN+0x76>
 4ca:	2b 81       	ldd	r18, Y+3	; 0x03
 4cc:	3c 81       	ldd	r19, Y+4	; 0x04
 4ce:	22 30       	cpi	r18, 0x02	; 2
 4d0:	31 05       	cpc	r19, r1
 4d2:	2c f4       	brge	.+10     	; 0x4de <DIO_TOGGLE_PIN+0x38>
 4d4:	8b 81       	ldd	r24, Y+3	; 0x03
 4d6:	9c 81       	ldd	r25, Y+4	; 0x04
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	61 f0       	breq	.+24     	; 0x4f4 <DIO_TOGGLE_PIN+0x4e>
 4dc:	5a c0       	rjmp	.+180    	; 0x592 <DIO_TOGGLE_PIN+0xec>
 4de:	2b 81       	ldd	r18, Y+3	; 0x03
 4e0:	3c 81       	ldd	r19, Y+4	; 0x04
 4e2:	22 30       	cpi	r18, 0x02	; 2
 4e4:	31 05       	cpc	r19, r1
 4e6:	71 f1       	breq	.+92     	; 0x544 <DIO_TOGGLE_PIN+0x9e>
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	9c 81       	ldd	r25, Y+4	; 0x04
 4ec:	83 30       	cpi	r24, 0x03	; 3
 4ee:	91 05       	cpc	r25, r1
 4f0:	e9 f1       	breq	.+122    	; 0x56c <DIO_TOGGLE_PIN+0xc6>
 4f2:	4f c0       	rjmp	.+158    	; 0x592 <DIO_TOGGLE_PIN+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
 4f4:	ab e3       	ldi	r26, 0x3B	; 59
 4f6:	b0 e0       	ldi	r27, 0x00	; 0
 4f8:	eb e3       	ldi	r30, 0x3B	; 59
 4fa:	f0 e0       	ldi	r31, 0x00	; 0
 4fc:	80 81       	ld	r24, Z
 4fe:	48 2f       	mov	r20, r24
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	02 2e       	mov	r0, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <DIO_TOGGLE_PIN+0x6c>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	0a 94       	dec	r0
 514:	e2 f7       	brpl	.-8      	; 0x50e <DIO_TOGGLE_PIN+0x68>
 516:	84 27       	eor	r24, r20
 518:	8c 93       	st	X, r24
 51a:	3b c0       	rjmp	.+118    	; 0x592 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
 51c:	a8 e3       	ldi	r26, 0x38	; 56
 51e:	b0 e0       	ldi	r27, 0x00	; 0
 520:	e8 e3       	ldi	r30, 0x38	; 56
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	48 2f       	mov	r20, r24
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	28 2f       	mov	r18, r24
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	02 2e       	mov	r0, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_TOGGLE_PIN+0x94>
 536:	88 0f       	add	r24, r24
 538:	99 1f       	adc	r25, r25
 53a:	0a 94       	dec	r0
 53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_TOGGLE_PIN+0x90>
 53e:	84 27       	eor	r24, r20
 540:	8c 93       	st	X, r24
 542:	27 c0       	rjmp	.+78     	; 0x592 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
 544:	a5 e3       	ldi	r26, 0x35	; 53
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e5 e3       	ldi	r30, 0x35	; 53
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_TOGGLE_PIN+0xbc>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_TOGGLE_PIN+0xb8>
 566:	84 27       	eor	r24, r20
 568:	8c 93       	st	X, r24
 56a:	13 c0       	rjmp	.+38     	; 0x592 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
 56c:	a2 e3       	ldi	r26, 0x32	; 50
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	e2 e3       	ldi	r30, 0x32	; 50
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	48 2f       	mov	r20, r24
 578:	8a 81       	ldd	r24, Y+2	; 0x02
 57a:	28 2f       	mov	r18, r24
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	02 2e       	mov	r0, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_TOGGLE_PIN+0xe4>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	0a 94       	dec	r0
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_TOGGLE_PIN+0xe0>
 58e:	84 27       	eor	r24, r20
 590:	8c 93       	st	X, r24
		break;
	}
}
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
 598:	0f 90       	pop	r0
 59a:	cf 91       	pop	r28
 59c:	df 91       	pop	r29
 59e:	08 95       	ret

000005a0 <DIO_ENABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <DIO_ENABLE_PULLUP+0x6>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <DIO_ENABLE_PULLUP+0x8>
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	89 83       	std	Y+1, r24	; 0x01
 5ae:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
 5b0:	89 81       	ldd	r24, Y+1	; 0x01
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	3c 83       	std	Y+4, r19	; 0x04
 5b8:	2b 83       	std	Y+3, r18	; 0x03
 5ba:	4b 81       	ldd	r20, Y+3	; 0x03
 5bc:	5c 81       	ldd	r21, Y+4	; 0x04
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	51 05       	cpc	r21, r1
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <DIO_ENABLE_PULLUP+0x26>
 5c4:	40 c0       	rjmp	.+128    	; 0x646 <DIO_ENABLE_PULLUP+0xa6>
 5c6:	8b 81       	ldd	r24, Y+3	; 0x03
 5c8:	9c 81       	ldd	r25, Y+4	; 0x04
 5ca:	82 30       	cpi	r24, 0x02	; 2
 5cc:	91 05       	cpc	r25, r1
 5ce:	34 f4       	brge	.+12     	; 0x5dc <DIO_ENABLE_PULLUP+0x3c>
 5d0:	2b 81       	ldd	r18, Y+3	; 0x03
 5d2:	3c 81       	ldd	r19, Y+4	; 0x04
 5d4:	21 15       	cp	r18, r1
 5d6:	31 05       	cpc	r19, r1
 5d8:	71 f0       	breq	.+28     	; 0x5f6 <DIO_ENABLE_PULLUP+0x56>
 5da:	aa c0       	rjmp	.+340    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
 5dc:	4b 81       	ldd	r20, Y+3	; 0x03
 5de:	5c 81       	ldd	r21, Y+4	; 0x04
 5e0:	42 30       	cpi	r20, 0x02	; 2
 5e2:	51 05       	cpc	r21, r1
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_ENABLE_PULLUP+0x48>
 5e6:	57 c0       	rjmp	.+174    	; 0x696 <DIO_ENABLE_PULLUP+0xf6>
 5e8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ea:	9c 81       	ldd	r25, Y+4	; 0x04
 5ec:	83 30       	cpi	r24, 0x03	; 3
 5ee:	91 05       	cpc	r25, r1
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <DIO_ENABLE_PULLUP+0x54>
 5f2:	78 c0       	rjmp	.+240    	; 0x6e4 <DIO_ENABLE_PULLUP+0x144>
 5f4:	9d c0       	rjmp	.+314    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
 5f6:	ea e3       	ldi	r30, 0x3A	; 58
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8a 81       	ldd	r24, Y+2	; 0x02
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	a9 01       	movw	r20, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_ENABLE_PULLUP+0x6e>
 60a:	55 95       	asr	r21
 60c:	47 95       	ror	r20
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_ENABLE_PULLUP+0x6a>
 612:	ca 01       	movw	r24, r20
 614:	81 70       	andi	r24, 0x01	; 1
 616:	90 70       	andi	r25, 0x00	; 0
 618:	00 97       	sbiw	r24, 0x00	; 0
 61a:	09 f0       	breq	.+2      	; 0x61e <DIO_ENABLE_PULLUP+0x7e>
 61c:	89 c0       	rjmp	.+274    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTA_REG,pin);
 61e:	ab e3       	ldi	r26, 0x3B	; 59
 620:	b0 e0       	ldi	r27, 0x00	; 0
 622:	eb e3       	ldi	r30, 0x3B	; 59
 624:	f0 e0       	ldi	r31, 0x00	; 0
 626:	80 81       	ld	r24, Z
 628:	48 2f       	mov	r20, r24
 62a:	8a 81       	ldd	r24, Y+2	; 0x02
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	02 2e       	mov	r0, r18
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_ENABLE_PULLUP+0x9c>
 638:	88 0f       	add	r24, r24
 63a:	99 1f       	adc	r25, r25
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_ENABLE_PULLUP+0x98>
 640:	84 2b       	or	r24, r20
 642:	8c 93       	st	X, r24
 644:	75 c0       	rjmp	.+234    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
 646:	e7 e3       	ldi	r30, 0x37	; 55
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	28 2f       	mov	r18, r24
 64e:	30 e0       	ldi	r19, 0x00	; 0
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	88 2f       	mov	r24, r24
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	a9 01       	movw	r20, r18
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_ENABLE_PULLUP+0xbe>
 65a:	55 95       	asr	r21
 65c:	47 95       	ror	r20
 65e:	8a 95       	dec	r24
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_ENABLE_PULLUP+0xba>
 662:	ca 01       	movw	r24, r20
 664:	81 70       	andi	r24, 0x01	; 1
 666:	90 70       	andi	r25, 0x00	; 0
 668:	00 97       	sbiw	r24, 0x00	; 0
 66a:	09 f0       	breq	.+2      	; 0x66e <DIO_ENABLE_PULLUP+0xce>
 66c:	61 c0       	rjmp	.+194    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTB_REG,pin);
 66e:	a8 e3       	ldi	r26, 0x38	; 56
 670:	b0 e0       	ldi	r27, 0x00	; 0
 672:	e8 e3       	ldi	r30, 0x38	; 56
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	80 81       	ld	r24, Z
 678:	48 2f       	mov	r20, r24
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	28 2f       	mov	r18, r24
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	02 2e       	mov	r0, r18
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_ENABLE_PULLUP+0xec>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	0a 94       	dec	r0
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_ENABLE_PULLUP+0xe8>
 690:	84 2b       	or	r24, r20
 692:	8c 93       	st	X, r24
 694:	4d c0       	rjmp	.+154    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
 696:	e4 e3       	ldi	r30, 0x34	; 52
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	28 2f       	mov	r18, r24
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	88 2f       	mov	r24, r24
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	a9 01       	movw	r20, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <DIO_ENABLE_PULLUP+0x10e>
 6aa:	55 95       	asr	r21
 6ac:	47 95       	ror	r20
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <DIO_ENABLE_PULLUP+0x10a>
 6b2:	ca 01       	movw	r24, r20
 6b4:	81 70       	andi	r24, 0x01	; 1
 6b6:	90 70       	andi	r25, 0x00	; 0
 6b8:	00 97       	sbiw	r24, 0x00	; 0
 6ba:	d1 f5       	brne	.+116    	; 0x730 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTC_REG,pin);
 6bc:	a5 e3       	ldi	r26, 0x35	; 53
 6be:	b0 e0       	ldi	r27, 0x00	; 0
 6c0:	e5 e3       	ldi	r30, 0x35	; 53
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	80 81       	ld	r24, Z
 6c6:	48 2f       	mov	r20, r24
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 2e       	mov	r0, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <DIO_ENABLE_PULLUP+0x13a>
 6d6:	88 0f       	add	r24, r24
 6d8:	99 1f       	adc	r25, r25
 6da:	0a 94       	dec	r0
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <DIO_ENABLE_PULLUP+0x136>
 6de:	84 2b       	or	r24, r20
 6e0:	8c 93       	st	X, r24
 6e2:	26 c0       	rjmp	.+76     	; 0x730 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
 6e4:	e1 e3       	ldi	r30, 0x31	; 49
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	80 81       	ld	r24, Z
 6ea:	28 2f       	mov	r18, r24
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	8a 81       	ldd	r24, Y+2	; 0x02
 6f0:	88 2f       	mov	r24, r24
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	a9 01       	movw	r20, r18
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_ENABLE_PULLUP+0x15c>
 6f8:	55 95       	asr	r21
 6fa:	47 95       	ror	r20
 6fc:	8a 95       	dec	r24
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_ENABLE_PULLUP+0x158>
 700:	ca 01       	movw	r24, r20
 702:	81 70       	andi	r24, 0x01	; 1
 704:	90 70       	andi	r25, 0x00	; 0
 706:	00 97       	sbiw	r24, 0x00	; 0
 708:	99 f4       	brne	.+38     	; 0x730 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTD_REG,pin);
 70a:	a2 e3       	ldi	r26, 0x32	; 50
 70c:	b0 e0       	ldi	r27, 0x00	; 0
 70e:	e2 e3       	ldi	r30, 0x32	; 50
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	48 2f       	mov	r20, r24
 716:	8a 81       	ldd	r24, Y+2	; 0x02
 718:	28 2f       	mov	r18, r24
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	02 2e       	mov	r0, r18
 722:	02 c0       	rjmp	.+4      	; 0x728 <DIO_ENABLE_PULLUP+0x188>
 724:	88 0f       	add	r24, r24
 726:	99 1f       	adc	r25, r25
 728:	0a 94       	dec	r0
 72a:	e2 f7       	brpl	.-8      	; 0x724 <DIO_ENABLE_PULLUP+0x184>
 72c:	84 2b       	or	r24, r20
 72e:	8c 93       	st	X, r24
		break;
	}
}
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <DIO_DISABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	00 d0       	rcall	.+0      	; 0x744 <DIO_DISABLE_PULLUP+0x6>
 744:	00 d0       	rcall	.+0      	; 0x746 <DIO_DISABLE_PULLUP+0x8>
 746:	cd b7       	in	r28, 0x3d	; 61
 748:	de b7       	in	r29, 0x3e	; 62
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
 74e:	89 81       	ldd	r24, Y+1	; 0x01
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	3c 83       	std	Y+4, r19	; 0x04
 756:	2b 83       	std	Y+3, r18	; 0x03
 758:	4b 81       	ldd	r20, Y+3	; 0x03
 75a:	5c 81       	ldd	r21, Y+4	; 0x04
 75c:	41 30       	cpi	r20, 0x01	; 1
 75e:	51 05       	cpc	r21, r1
 760:	09 f4       	brne	.+2      	; 0x764 <DIO_DISABLE_PULLUP+0x26>
 762:	41 c0       	rjmp	.+130    	; 0x7e6 <DIO_DISABLE_PULLUP+0xa8>
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	9c 81       	ldd	r25, Y+4	; 0x04
 768:	82 30       	cpi	r24, 0x02	; 2
 76a:	91 05       	cpc	r25, r1
 76c:	34 f4       	brge	.+12     	; 0x77a <DIO_DISABLE_PULLUP+0x3c>
 76e:	2b 81       	ldd	r18, Y+3	; 0x03
 770:	3c 81       	ldd	r19, Y+4	; 0x04
 772:	21 15       	cp	r18, r1
 774:	31 05       	cpc	r19, r1
 776:	71 f0       	breq	.+28     	; 0x794 <DIO_DISABLE_PULLUP+0x56>
 778:	ae c0       	rjmp	.+348    	; 0x8d6 <__stack+0x77>
 77a:	4b 81       	ldd	r20, Y+3	; 0x03
 77c:	5c 81       	ldd	r21, Y+4	; 0x04
 77e:	42 30       	cpi	r20, 0x02	; 2
 780:	51 05       	cpc	r21, r1
 782:	09 f4       	brne	.+2      	; 0x786 <DIO_DISABLE_PULLUP+0x48>
 784:	59 c0       	rjmp	.+178    	; 0x838 <DIO_DISABLE_PULLUP+0xfa>
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	9c 81       	ldd	r25, Y+4	; 0x04
 78a:	83 30       	cpi	r24, 0x03	; 3
 78c:	91 05       	cpc	r25, r1
 78e:	09 f4       	brne	.+2      	; 0x792 <DIO_DISABLE_PULLUP+0x54>
 790:	7b c0       	rjmp	.+246    	; 0x888 <__stack+0x29>
 792:	a1 c0       	rjmp	.+322    	; 0x8d6 <__stack+0x77>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
 794:	ea e3       	ldi	r30, 0x3A	; 58
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	80 81       	ld	r24, Z
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	8a 81       	ldd	r24, Y+2	; 0x02
 7a0:	88 2f       	mov	r24, r24
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a9 01       	movw	r20, r18
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <DIO_DISABLE_PULLUP+0x6e>
 7a8:	55 95       	asr	r21
 7aa:	47 95       	ror	r20
 7ac:	8a 95       	dec	r24
 7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <DIO_DISABLE_PULLUP+0x6a>
 7b0:	ca 01       	movw	r24, r20
 7b2:	81 70       	andi	r24, 0x01	; 1
 7b4:	90 70       	andi	r25, 0x00	; 0
 7b6:	00 97       	sbiw	r24, 0x00	; 0
 7b8:	09 f0       	breq	.+2      	; 0x7bc <DIO_DISABLE_PULLUP+0x7e>
 7ba:	8d c0       	rjmp	.+282    	; 0x8d6 <__stack+0x77>
			CLR_BIT(PORTA_REG,pin);
 7bc:	ab e3       	ldi	r26, 0x3B	; 59
 7be:	b0 e0       	ldi	r27, 0x00	; 0
 7c0:	eb e3       	ldi	r30, 0x3B	; 59
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	80 81       	ld	r24, Z
 7c6:	48 2f       	mov	r20, r24
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 2e       	mov	r0, r18
 7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_DISABLE_PULLUP+0x9c>
 7d6:	88 0f       	add	r24, r24
 7d8:	99 1f       	adc	r25, r25
 7da:	0a 94       	dec	r0
 7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_DISABLE_PULLUP+0x98>
 7de:	80 95       	com	r24
 7e0:	84 23       	and	r24, r20
 7e2:	8c 93       	st	X, r24
 7e4:	78 c0       	rjmp	.+240    	; 0x8d6 <__stack+0x77>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
 7e6:	e7 e3       	ldi	r30, 0x37	; 55
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	28 2f       	mov	r18, r24
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	8a 81       	ldd	r24, Y+2	; 0x02
 7f2:	88 2f       	mov	r24, r24
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	a9 01       	movw	r20, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_DISABLE_PULLUP+0xc0>
 7fa:	55 95       	asr	r21
 7fc:	47 95       	ror	r20
 7fe:	8a 95       	dec	r24
 800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_DISABLE_PULLUP+0xbc>
 802:	ca 01       	movw	r24, r20
 804:	81 70       	andi	r24, 0x01	; 1
 806:	90 70       	andi	r25, 0x00	; 0
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	09 f0       	breq	.+2      	; 0x80e <DIO_DISABLE_PULLUP+0xd0>
 80c:	64 c0       	rjmp	.+200    	; 0x8d6 <__stack+0x77>
			CLR_BIT(PORTB_REG,pin);
 80e:	a8 e3       	ldi	r26, 0x38	; 56
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	e8 e3       	ldi	r30, 0x38	; 56
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	48 2f       	mov	r20, r24
 81a:	8a 81       	ldd	r24, Y+2	; 0x02
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 2e       	mov	r0, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_DISABLE_PULLUP+0xee>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	0a 94       	dec	r0
 82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_DISABLE_PULLUP+0xea>
 830:	80 95       	com	r24
 832:	84 23       	and	r24, r20
 834:	8c 93       	st	X, r24
 836:	4f c0       	rjmp	.+158    	; 0x8d6 <__stack+0x77>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
 838:	e4 e3       	ldi	r30, 0x34	; 52
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	28 2f       	mov	r18, r24
 840:	30 e0       	ldi	r19, 0x00	; 0
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	88 2f       	mov	r24, r24
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a9 01       	movw	r20, r18
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_DISABLE_PULLUP+0x112>
 84c:	55 95       	asr	r21
 84e:	47 95       	ror	r20
 850:	8a 95       	dec	r24
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_DISABLE_PULLUP+0x10e>
 854:	ca 01       	movw	r24, r20
 856:	81 70       	andi	r24, 0x01	; 1
 858:	90 70       	andi	r25, 0x00	; 0
 85a:	00 97       	sbiw	r24, 0x00	; 0
 85c:	e1 f5       	brne	.+120    	; 0x8d6 <__stack+0x77>
			CLR_BIT(PORTC_REG,pin);
 85e:	a5 e3       	ldi	r26, 0x35	; 53
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e5 e3       	ldi	r30, 0x35	; 53
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	48 2f       	mov	r20, r24
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 2e       	mov	r0, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	0a 94       	dec	r0
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	80 95       	com	r24
 882:	84 23       	and	r24, r20
 884:	8c 93       	st	X, r24
 886:	27 c0       	rjmp	.+78     	; 0x8d6 <__stack+0x77>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
 888:	e1 e3       	ldi	r30, 0x31	; 49
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	80 81       	ld	r24, Z
 88e:	28 2f       	mov	r18, r24
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	8a 81       	ldd	r24, Y+2	; 0x02
 894:	88 2f       	mov	r24, r24
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	a9 01       	movw	r20, r18
 89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
 89c:	55 95       	asr	r21
 89e:	47 95       	ror	r20
 8a0:	8a 95       	dec	r24
 8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
 8a4:	ca 01       	movw	r24, r20
 8a6:	81 70       	andi	r24, 0x01	; 1
 8a8:	90 70       	andi	r25, 0x00	; 0
 8aa:	00 97       	sbiw	r24, 0x00	; 0
 8ac:	a1 f4       	brne	.+40     	; 0x8d6 <__stack+0x77>
			CLR_BIT(PORTD_REG,pin);
 8ae:	a2 e3       	ldi	r26, 0x32	; 50
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	e2 e3       	ldi	r30, 0x32	; 50
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	48 2f       	mov	r20, r24
 8ba:	8a 81       	ldd	r24, Y+2	; 0x02
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	02 2e       	mov	r0, r18
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	0a 94       	dec	r0
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	80 95       	com	r24
 8d2:	84 23       	and	r24, r20
 8d4:	8c 93       	st	X, r24
		break;
	}
}
 8d6:	0f 90       	pop	r0
 8d8:	0f 90       	pop	r0
 8da:	0f 90       	pop	r0
 8dc:	0f 90       	pop	r0
 8de:	cf 91       	pop	r28
 8e0:	df 91       	pop	r29
 8e2:	08 95       	ret

000008e4 <DIO_READ_LEVEL>:
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input
 8e4:	df 93       	push	r29
 8e6:	cf 93       	push	r28
 8e8:	00 d0       	rcall	.+0      	; 0x8ea <DIO_READ_LEVEL+0x6>
 8ea:	00 d0       	rcall	.+0      	; 0x8ec <DIO_READ_LEVEL+0x8>
 8ec:	0f 92       	push	r0
 8ee:	cd b7       	in	r28, 0x3d	; 61
 8f0:	de b7       	in	r29, 0x3e	; 62
 8f2:	89 83       	std	Y+1, r24	; 0x01
 8f4:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	3d 83       	std	Y+5, r19	; 0x05
 8fe:	2c 83       	std	Y+4, r18	; 0x04
 900:	4c 81       	ldd	r20, Y+4	; 0x04
 902:	5d 81       	ldd	r21, Y+5	; 0x05
 904:	41 30       	cpi	r20, 0x01	; 1
 906:	51 05       	cpc	r21, r1
 908:	49 f1       	breq	.+82     	; 0x95c <DIO_READ_LEVEL+0x78>
 90a:	8c 81       	ldd	r24, Y+4	; 0x04
 90c:	9d 81       	ldd	r25, Y+5	; 0x05
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	91 05       	cpc	r25, r1
 912:	34 f4       	brge	.+12     	; 0x920 <DIO_READ_LEVEL+0x3c>
 914:	2c 81       	ldd	r18, Y+4	; 0x04
 916:	3d 81       	ldd	r19, Y+5	; 0x05
 918:	21 15       	cp	r18, r1
 91a:	31 05       	cpc	r19, r1
 91c:	61 f0       	breq	.+24     	; 0x936 <DIO_READ_LEVEL+0x52>
 91e:	57 c0       	rjmp	.+174    	; 0x9ce <DIO_READ_LEVEL+0xea>
 920:	4c 81       	ldd	r20, Y+4	; 0x04
 922:	5d 81       	ldd	r21, Y+5	; 0x05
 924:	42 30       	cpi	r20, 0x02	; 2
 926:	51 05       	cpc	r21, r1
 928:	61 f1       	breq	.+88     	; 0x982 <DIO_READ_LEVEL+0x9e>
 92a:	8c 81       	ldd	r24, Y+4	; 0x04
 92c:	9d 81       	ldd	r25, Y+5	; 0x05
 92e:	83 30       	cpi	r24, 0x03	; 3
 930:	91 05       	cpc	r25, r1
 932:	d1 f1       	breq	.+116    	; 0x9a8 <DIO_READ_LEVEL+0xc4>
 934:	4c c0       	rjmp	.+152    	; 0x9ce <DIO_READ_LEVEL+0xea>
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
 936:	e9 e3       	ldi	r30, 0x39	; 57
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	28 2f       	mov	r18, r24
 93e:	30 e0       	ldi	r19, 0x00	; 0
 940:	8a 81       	ldd	r24, Y+2	; 0x02
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	a9 01       	movw	r20, r18
 948:	02 c0       	rjmp	.+4      	; 0x94e <DIO_READ_LEVEL+0x6a>
 94a:	55 95       	asr	r21
 94c:	47 95       	ror	r20
 94e:	8a 95       	dec	r24
 950:	e2 f7       	brpl	.-8      	; 0x94a <DIO_READ_LEVEL+0x66>
 952:	ca 01       	movw	r24, r20
 954:	58 2f       	mov	r21, r24
 956:	51 70       	andi	r21, 0x01	; 1
 958:	5b 83       	std	Y+3, r21	; 0x03
 95a:	3a c0       	rjmp	.+116    	; 0x9d0 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
 95c:	e6 e3       	ldi	r30, 0x36	; 54
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	80 81       	ld	r24, Z
 962:	28 2f       	mov	r18, r24
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	8a 81       	ldd	r24, Y+2	; 0x02
 968:	88 2f       	mov	r24, r24
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	a9 01       	movw	r20, r18
 96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_READ_LEVEL+0x90>
 970:	55 95       	asr	r21
 972:	47 95       	ror	r20
 974:	8a 95       	dec	r24
 976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_READ_LEVEL+0x8c>
 978:	ca 01       	movw	r24, r20
 97a:	58 2f       	mov	r21, r24
 97c:	51 70       	andi	r21, 0x01	; 1
 97e:	5b 83       	std	Y+3, r21	; 0x03
 980:	27 c0       	rjmp	.+78     	; 0x9d0 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
 982:	e3 e3       	ldi	r30, 0x33	; 51
 984:	f0 e0       	ldi	r31, 0x00	; 0
 986:	80 81       	ld	r24, Z
 988:	28 2f       	mov	r18, r24
 98a:	30 e0       	ldi	r19, 0x00	; 0
 98c:	8a 81       	ldd	r24, Y+2	; 0x02
 98e:	88 2f       	mov	r24, r24
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	a9 01       	movw	r20, r18
 994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_READ_LEVEL+0xb6>
 996:	55 95       	asr	r21
 998:	47 95       	ror	r20
 99a:	8a 95       	dec	r24
 99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_READ_LEVEL+0xb2>
 99e:	ca 01       	movw	r24, r20
 9a0:	58 2f       	mov	r21, r24
 9a2:	51 70       	andi	r21, 0x01	; 1
 9a4:	5b 83       	std	Y+3, r21	; 0x03
 9a6:	14 c0       	rjmp	.+40     	; 0x9d0 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
 9a8:	e0 e3       	ldi	r30, 0x30	; 48
 9aa:	f0 e0       	ldi	r31, 0x00	; 0
 9ac:	80 81       	ld	r24, Z
 9ae:	28 2f       	mov	r18, r24
 9b0:	30 e0       	ldi	r19, 0x00	; 0
 9b2:	8a 81       	ldd	r24, Y+2	; 0x02
 9b4:	88 2f       	mov	r24, r24
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	a9 01       	movw	r20, r18
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_READ_LEVEL+0xdc>
 9bc:	55 95       	asr	r21
 9be:	47 95       	ror	r20
 9c0:	8a 95       	dec	r24
 9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_READ_LEVEL+0xd8>
 9c4:	ca 01       	movw	r24, r20
 9c6:	58 2f       	mov	r21, r24
 9c8:	51 70       	andi	r21, 0x01	; 1
 9ca:	5b 83       	std	Y+3, r21	; 0x03
 9cc:	01 c0       	rjmp	.+2      	; 0x9d0 <DIO_READ_LEVEL+0xec>
		break;
	}
	return 0;
 9ce:	1b 82       	std	Y+3, r1	; 0x03
 9d0:	8b 81       	ldd	r24, Y+3	; 0x03
}
 9d2:	0f 90       	pop	r0
 9d4:	0f 90       	pop	r0
 9d6:	0f 90       	pop	r0
 9d8:	0f 90       	pop	r0
 9da:	0f 90       	pop	r0
 9dc:	cf 91       	pop	r28
 9de:	df 91       	pop	r29
 9e0:	08 95       	ret

000009e2 <DIO_WRITE_STATUS>:
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
 9e2:	df 93       	push	r29
 9e4:	cf 93       	push	r28
 9e6:	00 d0       	rcall	.+0      	; 0x9e8 <DIO_WRITE_STATUS+0x6>
 9e8:	00 d0       	rcall	.+0      	; 0x9ea <DIO_WRITE_STATUS+0x8>
 9ea:	0f 92       	push	r0
 9ec:	cd b7       	in	r28, 0x3d	; 61
 9ee:	de b7       	in	r29, 0x3e	; 62
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	6a 83       	std	Y+2, r22	; 0x02
 9f4:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
 9f6:	89 81       	ldd	r24, Y+1	; 0x01
 9f8:	28 2f       	mov	r18, r24
 9fa:	30 e0       	ldi	r19, 0x00	; 0
 9fc:	3d 83       	std	Y+5, r19	; 0x05
 9fe:	2c 83       	std	Y+4, r18	; 0x04
 a00:	8c 81       	ldd	r24, Y+4	; 0x04
 a02:	9d 81       	ldd	r25, Y+5	; 0x05
 a04:	81 30       	cpi	r24, 0x01	; 1
 a06:	91 05       	cpc	r25, r1
 a08:	09 f4       	brne	.+2      	; 0xa0c <DIO_WRITE_STATUS+0x2a>
 a0a:	43 c0       	rjmp	.+134    	; 0xa92 <DIO_WRITE_STATUS+0xb0>
 a0c:	2c 81       	ldd	r18, Y+4	; 0x04
 a0e:	3d 81       	ldd	r19, Y+5	; 0x05
 a10:	22 30       	cpi	r18, 0x02	; 2
 a12:	31 05       	cpc	r19, r1
 a14:	2c f4       	brge	.+10     	; 0xa20 <DIO_WRITE_STATUS+0x3e>
 a16:	8c 81       	ldd	r24, Y+4	; 0x04
 a18:	9d 81       	ldd	r25, Y+5	; 0x05
 a1a:	00 97       	sbiw	r24, 0x00	; 0
 a1c:	71 f0       	breq	.+28     	; 0xa3a <DIO_WRITE_STATUS+0x58>
 a1e:	bc c0       	rjmp	.+376    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
 a20:	2c 81       	ldd	r18, Y+4	; 0x04
 a22:	3d 81       	ldd	r19, Y+5	; 0x05
 a24:	22 30       	cpi	r18, 0x02	; 2
 a26:	31 05       	cpc	r19, r1
 a28:	09 f4       	brne	.+2      	; 0xa2c <DIO_WRITE_STATUS+0x4a>
 a2a:	5f c0       	rjmp	.+190    	; 0xaea <DIO_WRITE_STATUS+0x108>
 a2c:	8c 81       	ldd	r24, Y+4	; 0x04
 a2e:	9d 81       	ldd	r25, Y+5	; 0x05
 a30:	83 30       	cpi	r24, 0x03	; 3
 a32:	91 05       	cpc	r25, r1
 a34:	09 f4       	brne	.+2      	; 0xa38 <DIO_WRITE_STATUS+0x56>
 a36:	85 c0       	rjmp	.+266    	; 0xb42 <DIO_WRITE_STATUS+0x160>
 a38:	af c0       	rjmp	.+350    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
	case DIO_PORTA:
		if (direction==OTUPUT)
 a3a:	8b 81       	ldd	r24, Y+3	; 0x03
 a3c:	81 30       	cpi	r24, 0x01	; 1
 a3e:	a1 f4       	brne	.+40     	; 0xa68 <DIO_WRITE_STATUS+0x86>
			SET_BIT(DDRA_REG,pin);
 a40:	aa e3       	ldi	r26, 0x3A	; 58
 a42:	b0 e0       	ldi	r27, 0x00	; 0
 a44:	ea e3       	ldi	r30, 0x3A	; 58
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	80 81       	ld	r24, Z
 a4a:	48 2f       	mov	r20, r24
 a4c:	8a 81       	ldd	r24, Y+2	; 0x02
 a4e:	28 2f       	mov	r18, r24
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	81 e0       	ldi	r24, 0x01	; 1
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	02 2e       	mov	r0, r18
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_WRITE_STATUS+0x7c>
 a5a:	88 0f       	add	r24, r24
 a5c:	99 1f       	adc	r25, r25
 a5e:	0a 94       	dec	r0
 a60:	e2 f7       	brpl	.-8      	; 0xa5a <DIO_WRITE_STATUS+0x78>
 a62:	84 2b       	or	r24, r20
 a64:	8c 93       	st	X, r24
 a66:	98 c0       	rjmp	.+304    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRA_REG,pin);
 a68:	aa e3       	ldi	r26, 0x3A	; 58
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	ea e3       	ldi	r30, 0x3A	; 58
 a6e:	f0 e0       	ldi	r31, 0x00	; 0
 a70:	80 81       	ld	r24, Z
 a72:	48 2f       	mov	r20, r24
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	28 2f       	mov	r18, r24
 a78:	30 e0       	ldi	r19, 0x00	; 0
 a7a:	81 e0       	ldi	r24, 0x01	; 1
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	02 2e       	mov	r0, r18
 a80:	02 c0       	rjmp	.+4      	; 0xa86 <DIO_WRITE_STATUS+0xa4>
 a82:	88 0f       	add	r24, r24
 a84:	99 1f       	adc	r25, r25
 a86:	0a 94       	dec	r0
 a88:	e2 f7       	brpl	.-8      	; 0xa82 <DIO_WRITE_STATUS+0xa0>
 a8a:	80 95       	com	r24
 a8c:	84 23       	and	r24, r20
 a8e:	8c 93       	st	X, r24
 a90:	83 c0       	rjmp	.+262    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTB:
		if (direction==OTUPUT)
 a92:	8b 81       	ldd	r24, Y+3	; 0x03
 a94:	81 30       	cpi	r24, 0x01	; 1
 a96:	a1 f4       	brne	.+40     	; 0xac0 <DIO_WRITE_STATUS+0xde>
			SET_BIT(DDRB_REG,pin);
 a98:	a7 e3       	ldi	r26, 0x37	; 55
 a9a:	b0 e0       	ldi	r27, 0x00	; 0
 a9c:	e7 e3       	ldi	r30, 0x37	; 55
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	80 81       	ld	r24, Z
 aa2:	48 2f       	mov	r20, r24
 aa4:	8a 81       	ldd	r24, Y+2	; 0x02
 aa6:	28 2f       	mov	r18, r24
 aa8:	30 e0       	ldi	r19, 0x00	; 0
 aaa:	81 e0       	ldi	r24, 0x01	; 1
 aac:	90 e0       	ldi	r25, 0x00	; 0
 aae:	02 2e       	mov	r0, r18
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_WRITE_STATUS+0xd4>
 ab2:	88 0f       	add	r24, r24
 ab4:	99 1f       	adc	r25, r25
 ab6:	0a 94       	dec	r0
 ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_WRITE_STATUS+0xd0>
 aba:	84 2b       	or	r24, r20
 abc:	8c 93       	st	X, r24
 abe:	6c c0       	rjmp	.+216    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRB_REG,pin);
 ac0:	a7 e3       	ldi	r26, 0x37	; 55
 ac2:	b0 e0       	ldi	r27, 0x00	; 0
 ac4:	e7 e3       	ldi	r30, 0x37	; 55
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	80 81       	ld	r24, Z
 aca:	48 2f       	mov	r20, r24
 acc:	8a 81       	ldd	r24, Y+2	; 0x02
 ace:	28 2f       	mov	r18, r24
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	02 2e       	mov	r0, r18
 ad8:	02 c0       	rjmp	.+4      	; 0xade <DIO_WRITE_STATUS+0xfc>
 ada:	88 0f       	add	r24, r24
 adc:	99 1f       	adc	r25, r25
 ade:	0a 94       	dec	r0
 ae0:	e2 f7       	brpl	.-8      	; 0xada <DIO_WRITE_STATUS+0xf8>
 ae2:	80 95       	com	r24
 ae4:	84 23       	and	r24, r20
 ae6:	8c 93       	st	X, r24
 ae8:	57 c0       	rjmp	.+174    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTC:
		if (direction==OTUPUT)
 aea:	8b 81       	ldd	r24, Y+3	; 0x03
 aec:	81 30       	cpi	r24, 0x01	; 1
 aee:	a1 f4       	brne	.+40     	; 0xb18 <DIO_WRITE_STATUS+0x136>
			SET_BIT(DDRC_REG,pin);
 af0:	a4 e3       	ldi	r26, 0x34	; 52
 af2:	b0 e0       	ldi	r27, 0x00	; 0
 af4:	e4 e3       	ldi	r30, 0x34	; 52
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	80 81       	ld	r24, Z
 afa:	48 2f       	mov	r20, r24
 afc:	8a 81       	ldd	r24, Y+2	; 0x02
 afe:	28 2f       	mov	r18, r24
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	81 e0       	ldi	r24, 0x01	; 1
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	02 2e       	mov	r0, r18
 b08:	02 c0       	rjmp	.+4      	; 0xb0e <DIO_WRITE_STATUS+0x12c>
 b0a:	88 0f       	add	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	0a 94       	dec	r0
 b10:	e2 f7       	brpl	.-8      	; 0xb0a <DIO_WRITE_STATUS+0x128>
 b12:	84 2b       	or	r24, r20
 b14:	8c 93       	st	X, r24
 b16:	40 c0       	rjmp	.+128    	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRC_REG,pin);
 b18:	a4 e3       	ldi	r26, 0x34	; 52
 b1a:	b0 e0       	ldi	r27, 0x00	; 0
 b1c:	e4 e3       	ldi	r30, 0x34	; 52
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	80 81       	ld	r24, Z
 b22:	48 2f       	mov	r20, r24
 b24:	8a 81       	ldd	r24, Y+2	; 0x02
 b26:	28 2f       	mov	r18, r24
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	02 2e       	mov	r0, r18
 b30:	02 c0       	rjmp	.+4      	; 0xb36 <DIO_WRITE_STATUS+0x154>
 b32:	88 0f       	add	r24, r24
 b34:	99 1f       	adc	r25, r25
 b36:	0a 94       	dec	r0
 b38:	e2 f7       	brpl	.-8      	; 0xb32 <DIO_WRITE_STATUS+0x150>
 b3a:	80 95       	com	r24
 b3c:	84 23       	and	r24, r20
 b3e:	8c 93       	st	X, r24
 b40:	2b c0       	rjmp	.+86     	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTD:
		if (direction==OTUPUT)
 b42:	8b 81       	ldd	r24, Y+3	; 0x03
 b44:	81 30       	cpi	r24, 0x01	; 1
 b46:	a1 f4       	brne	.+40     	; 0xb70 <DIO_WRITE_STATUS+0x18e>
			SET_BIT(DDRD_REG,pin);
 b48:	a1 e3       	ldi	r26, 0x31	; 49
 b4a:	b0 e0       	ldi	r27, 0x00	; 0
 b4c:	e1 e3       	ldi	r30, 0x31	; 49
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	80 81       	ld	r24, Z
 b52:	48 2f       	mov	r20, r24
 b54:	8a 81       	ldd	r24, Y+2	; 0x02
 b56:	28 2f       	mov	r18, r24
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	90 e0       	ldi	r25, 0x00	; 0
 b5e:	02 2e       	mov	r0, r18
 b60:	02 c0       	rjmp	.+4      	; 0xb66 <DIO_WRITE_STATUS+0x184>
 b62:	88 0f       	add	r24, r24
 b64:	99 1f       	adc	r25, r25
 b66:	0a 94       	dec	r0
 b68:	e2 f7       	brpl	.-8      	; 0xb62 <DIO_WRITE_STATUS+0x180>
 b6a:	84 2b       	or	r24, r20
 b6c:	8c 93       	st	X, r24
 b6e:	14 c0       	rjmp	.+40     	; 0xb98 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRD_REG,pin);
 b70:	a1 e3       	ldi	r26, 0x31	; 49
 b72:	b0 e0       	ldi	r27, 0x00	; 0
 b74:	e1 e3       	ldi	r30, 0x31	; 49
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	48 2f       	mov	r20, r24
 b7c:	8a 81       	ldd	r24, Y+2	; 0x02
 b7e:	28 2f       	mov	r18, r24
 b80:	30 e0       	ldi	r19, 0x00	; 0
 b82:	81 e0       	ldi	r24, 0x01	; 1
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	02 2e       	mov	r0, r18
 b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_WRITE_STATUS+0x1ac>
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	0a 94       	dec	r0
 b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_WRITE_STATUS+0x1a8>
 b92:	80 95       	com	r24
 b94:	84 23       	and	r24, r20
 b96:	8c 93       	st	X, r24
		break;
	}
}
 b98:	0f 90       	pop	r0
 b9a:	0f 90       	pop	r0
 b9c:	0f 90       	pop	r0
 b9e:	0f 90       	pop	r0
 ba0:	0f 90       	pop	r0
 ba2:	cf 91       	pop	r28
 ba4:	df 91       	pop	r29
 ba6:	08 95       	ret

00000ba8 <LED_Init>:
#include "LED.h"

void LED_Init(void){
 ba8:	df 93       	push	r29
 baa:	cf 93       	push	r28
 bac:	cd b7       	in	r28, 0x3d	; 61
 bae:	de b7       	in	r29, 0x3e	; 62
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OTUPUT);
 bb0:	82 e0       	ldi	r24, 0x02	; 2
 bb2:	67 e0       	ldi	r22, 0x07	; 7
 bb4:	41 e0       	ldi	r20, 0x01	; 1
 bb6:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
}
 bba:	cf 91       	pop	r28
 bbc:	df 91       	pop	r29
 bbe:	08 95       	ret

00000bc0 <LED_ON>:

void LED_ON(void){
 bc0:	df 93       	push	r29
 bc2:	cf 93       	push	r28
 bc4:	cd b7       	in	r28, 0x3d	; 61
 bc6:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
 bc8:	82 e0       	ldi	r24, 0x02	; 2
 bca:	67 e0       	ldi	r22, 0x07	; 7
 bcc:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_SET_PIN>
}
 bd0:	cf 91       	pop	r28
 bd2:	df 91       	pop	r29
 bd4:	08 95       	ret

00000bd6 <LED_OFF>:

void LED_OFF(void){
 bd6:	df 93       	push	r29
 bd8:	cf 93       	push	r28
 bda:	cd b7       	in	r28, 0x3d	; 61
 bdc:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
 bde:	82 e0       	ldi	r24, 0x02	; 2
 be0:	67 e0       	ldi	r22, 0x07	; 7
 be2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_CLEAR_PIN>
}
 be6:	cf 91       	pop	r28
 be8:	df 91       	pop	r29
 bea:	08 95       	ret

00000bec <LED_TOGGLE>:

void LED_TOGGLE(void){
 bec:	df 93       	push	r29
 bee:	cf 93       	push	r28
 bf0:	cd b7       	in	r28, 0x3d	; 61
 bf2:	de b7       	in	r29, 0x3e	; 62
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
 bf4:	82 e0       	ldi	r24, 0x02	; 2
 bf6:	67 e0       	ldi	r22, 0x07	; 7
 bf8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_TOGGLE_PIN>
}
 bfc:	cf 91       	pop	r28
 bfe:	df 91       	pop	r29
 c00:	08 95       	ret

00000c02 <Heater_Init>:
#include "Heater.h"
static u16 Counter = 0;
void Heater_Init(){
 c02:	df 93       	push	r29
 c04:	cf 93       	push	r28
 c06:	cd b7       	in	r28, 0x3d	; 61
 c08:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, INPUT);
 c0a:	82 e0       	ldi	r24, 0x02	; 2
 c0c:	64 e0       	ldi	r22, 0x04	; 4
 c0e:	40 e0       	ldi	r20, 0x00	; 0
 c10:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
}
 c14:	cf 91       	pop	r28
 c16:	df 91       	pop	r29
 c18:	08 95       	ret

00000c1a <Heater_ON>:

void Heater_ON(){
 c1a:	df 93       	push	r29
 c1c:	cf 93       	push	r28
 c1e:	cd b7       	in	r28, 0x3d	; 61
 c20:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Heater_Port, Heater_Pin);
 c22:	82 e0       	ldi	r24, 0x02	; 2
 c24:	64 e0       	ldi	r22, 0x04	; 4
 c26:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_SET_PIN>
	Counter++;
 c2a:	80 91 68 00 	lds	r24, 0x0068
 c2e:	90 91 69 00 	lds	r25, 0x0069
 c32:	01 96       	adiw	r24, 0x01	; 1
 c34:	90 93 69 00 	sts	0x0069, r25
 c38:	80 93 68 00 	sts	0x0068, r24
	if (Counter == (2^15)){
 c3c:	80 91 68 00 	lds	r24, 0x0068
 c40:	90 91 69 00 	lds	r25, 0x0069
 c44:	8d 30       	cpi	r24, 0x0D	; 13
 c46:	91 05       	cpc	r25, r1
 c48:	31 f4       	brne	.+12     	; 0xc56 <Heater_ON+0x3c>
		LED_TOGGLE();
 c4a:	0e 94 f6 05 	call	0xbec	; 0xbec <LED_TOGGLE>
		Counter = 0;
 c4e:	10 92 69 00 	sts	0x0069, r1
 c52:	10 92 68 00 	sts	0x0068, r1
	}
}
 c56:	cf 91       	pop	r28
 c58:	df 91       	pop	r29
 c5a:	08 95       	ret

00000c5c <Heater_OFF>:
void Heater_OFF(){
 c5c:	df 93       	push	r29
 c5e:	cf 93       	push	r28
 c60:	cd b7       	in	r28, 0x3d	; 61
 c62:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
 c64:	82 e0       	ldi	r24, 0x02	; 2
 c66:	64 e0       	ldi	r22, 0x04	; 4
 c68:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_CLEAR_PIN>
	LED_OFF();
 c6c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <LED_OFF>
}
 c70:	cf 91       	pop	r28
 c72:	df 91       	pop	r29
 c74:	08 95       	ret

00000c76 <Cooler_Init>:
#include "Cooler.h"

void Cooler_Init(){
 c76:	df 93       	push	r29
 c78:	cf 93       	push	r28
 c7a:	cd b7       	in	r28, 0x3d	; 61
 c7c:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, INPUT);
 c7e:	82 e0       	ldi	r24, 0x02	; 2
 c80:	64 e0       	ldi	r22, 0x04	; 4
 c82:	40 e0       	ldi	r20, 0x00	; 0
 c84:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
}
 c88:	cf 91       	pop	r28
 c8a:	df 91       	pop	r29
 c8c:	08 95       	ret

00000c8e <Cooler_ON>:
void Cooler_ON(){
 c8e:	df 93       	push	r29
 c90:	cf 93       	push	r28
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
 c96:	82 e0       	ldi	r24, 0x02	; 2
 c98:	64 e0       	ldi	r22, 0x04	; 4
 c9a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_SET_PIN>
	LED_ON();
 c9e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <LED_ON>
}
 ca2:	cf 91       	pop	r28
 ca4:	df 91       	pop	r29
 ca6:	08 95       	ret

00000ca8 <Cooler_OFF>:
void Cooler_OFF(){
 ca8:	df 93       	push	r29
 caa:	cf 93       	push	r28
 cac:	cd b7       	in	r28, 0x3d	; 61
 cae:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
 cb0:	82 e0       	ldi	r24, 0x02	; 2
 cb2:	64 e0       	ldi	r22, 0x04	; 4
 cb4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <DIO_CLEAR_PIN>
	LED_OFF();
 cb8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <LED_OFF>
}
 cbc:	cf 91       	pop	r28
 cbe:	df 91       	pop	r29
 cc0:	08 95       	ret

00000cc2 <Button_Init>:
#include "Button.h"

void Button_Init(Button_ID Button){
 cc2:	df 93       	push	r29
 cc4:	cf 93       	push	r28
 cc6:	00 d0       	rcall	.+0      	; 0xcc8 <Button_Init+0x6>
 cc8:	0f 92       	push	r0
 cca:	cd b7       	in	r28, 0x3d	; 61
 ccc:	de b7       	in	r29, 0x3e	; 62
 cce:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
 cd0:	89 81       	ldd	r24, Y+1	; 0x01
 cd2:	28 2f       	mov	r18, r24
 cd4:	30 e0       	ldi	r19, 0x00	; 0
 cd6:	3b 83       	std	Y+3, r19	; 0x03
 cd8:	2a 83       	std	Y+2, r18	; 0x02
 cda:	8a 81       	ldd	r24, Y+2	; 0x02
 cdc:	9b 81       	ldd	r25, Y+3	; 0x03
 cde:	81 30       	cpi	r24, 0x01	; 1
 ce0:	91 05       	cpc	r25, r1
 ce2:	79 f0       	breq	.+30     	; 0xd02 <Button_Init+0x40>
 ce4:	2a 81       	ldd	r18, Y+2	; 0x02
 ce6:	3b 81       	ldd	r19, Y+3	; 0x03
 ce8:	22 30       	cpi	r18, 0x02	; 2
 cea:	31 05       	cpc	r19, r1
 cec:	81 f0       	breq	.+32     	; 0xd0e <Button_Init+0x4c>
 cee:	8a 81       	ldd	r24, Y+2	; 0x02
 cf0:	9b 81       	ldd	r25, Y+3	; 0x03
 cf2:	00 97       	sbiw	r24, 0x00	; 0
 cf4:	89 f4       	brne	.+34     	; 0xd18 <Button_Init+0x56>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	60 e0       	ldi	r22, 0x00	; 0
 cfa:	40 e0       	ldi	r20, 0x00	; 0
 cfc:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
 d00:	0b c0       	rjmp	.+22     	; 0xd18 <Button_Init+0x56>
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	64 e0       	ldi	r22, 0x04	; 4
 d06:	40 e0       	ldi	r20, 0x00	; 0
 d08:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
 d0c:	05 c0       	rjmp	.+10     	; 0xd18 <Button_Init+0x56>
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
 d0e:	83 e0       	ldi	r24, 0x03	; 3
 d10:	62 e0       	ldi	r22, 0x02	; 2
 d12:	40 e0       	ldi	r20, 0x00	; 0
 d14:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <DIO_WRITE_STATUS>
				break;
		}
}
 d18:	0f 90       	pop	r0
 d1a:	0f 90       	pop	r0
 d1c:	0f 90       	pop	r0
 d1e:	cf 91       	pop	r28
 d20:	df 91       	pop	r29
 d22:	08 95       	ret

00000d24 <Button_READ>:
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
 d24:	df 93       	push	r29
 d26:	cf 93       	push	r28
 d28:	00 d0       	rcall	.+0      	; 0xd2a <Button_READ+0x6>
 d2a:	00 d0       	rcall	.+0      	; 0xd2c <Button_READ+0x8>
 d2c:	cd b7       	in	r28, 0x3d	; 61
 d2e:	de b7       	in	r29, 0x3e	; 62
 d30:	8a 83       	std	Y+2, r24	; 0x02
	Buttom_Status result;
	switch(Button){
 d32:	8a 81       	ldd	r24, Y+2	; 0x02
 d34:	28 2f       	mov	r18, r24
 d36:	30 e0       	ldi	r19, 0x00	; 0
 d38:	3c 83       	std	Y+4, r19	; 0x04
 d3a:	2b 83       	std	Y+3, r18	; 0x03
 d3c:	8b 81       	ldd	r24, Y+3	; 0x03
 d3e:	9c 81       	ldd	r25, Y+4	; 0x04
 d40:	81 30       	cpi	r24, 0x01	; 1
 d42:	91 05       	cpc	r25, r1
 d44:	79 f0       	breq	.+30     	; 0xd64 <Button_READ+0x40>
 d46:	2b 81       	ldd	r18, Y+3	; 0x03
 d48:	3c 81       	ldd	r19, Y+4	; 0x04
 d4a:	22 30       	cpi	r18, 0x02	; 2
 d4c:	31 05       	cpc	r19, r1
 d4e:	81 f0       	breq	.+32     	; 0xd70 <Button_READ+0x4c>
 d50:	8b 81       	ldd	r24, Y+3	; 0x03
 d52:	9c 81       	ldd	r25, Y+4	; 0x04
 d54:	00 97       	sbiw	r24, 0x00	; 0
 d56:	89 f4       	brne	.+34     	; 0xd7a <Button_READ+0x56>
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
 d58:	81 e0       	ldi	r24, 0x01	; 1
 d5a:	60 e0       	ldi	r22, 0x00	; 0
 d5c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_READ_LEVEL>
 d60:	89 83       	std	Y+1, r24	; 0x01
 d62:	0b c0       	rjmp	.+22     	; 0xd7a <Button_READ+0x56>
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
 d64:	81 e0       	ldi	r24, 0x01	; 1
 d66:	64 e0       	ldi	r22, 0x04	; 4
 d68:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_READ_LEVEL>
 d6c:	89 83       	std	Y+1, r24	; 0x01
 d6e:	05 c0       	rjmp	.+10     	; 0xd7a <Button_READ+0x56>
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	62 e0       	ldi	r22, 0x02	; 2
 d74:	0e 94 72 04 	call	0x8e4	; 0x8e4 <DIO_READ_LEVEL>
 d78:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return result;
 d7a:	89 81       	ldd	r24, Y+1	; 0x01
}
 d7c:	0f 90       	pop	r0
 d7e:	0f 90       	pop	r0
 d80:	0f 90       	pop	r0
 d82:	0f 90       	pop	r0
 d84:	cf 91       	pop	r28
 d86:	df 91       	pop	r29
 d88:	08 95       	ret

00000d8a <Button_Pullup_Enable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
 d8a:	df 93       	push	r29
 d8c:	cf 93       	push	r28
 d8e:	00 d0       	rcall	.+0      	; 0xd90 <Button_Pullup_Enable+0x6>
 d90:	0f 92       	push	r0
 d92:	cd b7       	in	r28, 0x3d	; 61
 d94:	de b7       	in	r29, 0x3e	; 62
 d96:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
 d98:	89 81       	ldd	r24, Y+1	; 0x01
 d9a:	28 2f       	mov	r18, r24
 d9c:	30 e0       	ldi	r19, 0x00	; 0
 d9e:	3b 83       	std	Y+3, r19	; 0x03
 da0:	2a 83       	std	Y+2, r18	; 0x02
 da2:	8a 81       	ldd	r24, Y+2	; 0x02
 da4:	9b 81       	ldd	r25, Y+3	; 0x03
 da6:	81 30       	cpi	r24, 0x01	; 1
 da8:	91 05       	cpc	r25, r1
 daa:	71 f0       	breq	.+28     	; 0xdc8 <Button_Pullup_Enable+0x3e>
 dac:	2a 81       	ldd	r18, Y+2	; 0x02
 dae:	3b 81       	ldd	r19, Y+3	; 0x03
 db0:	22 30       	cpi	r18, 0x02	; 2
 db2:	31 05       	cpc	r19, r1
 db4:	71 f0       	breq	.+28     	; 0xdd2 <Button_Pullup_Enable+0x48>
 db6:	8a 81       	ldd	r24, Y+2	; 0x02
 db8:	9b 81       	ldd	r25, Y+3	; 0x03
 dba:	00 97       	sbiw	r24, 0x00	; 0
 dbc:	71 f4       	brne	.+28     	; 0xdda <Button_Pullup_Enable+0x50>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
 dbe:	81 e0       	ldi	r24, 0x01	; 1
 dc0:	60 e0       	ldi	r22, 0x00	; 0
 dc2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <DIO_ENABLE_PULLUP>
 dc6:	09 c0       	rjmp	.+18     	; 0xdda <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
 dc8:	81 e0       	ldi	r24, 0x01	; 1
 dca:	64 e0       	ldi	r22, 0x04	; 4
 dcc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <DIO_ENABLE_PULLUP>
 dd0:	04 c0       	rjmp	.+8      	; 0xdda <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
 dd2:	83 e0       	ldi	r24, 0x03	; 3
 dd4:	62 e0       	ldi	r22, 0x02	; 2
 dd6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <DIO_ENABLE_PULLUP>
				break;
		}
}
 dda:	0f 90       	pop	r0
 ddc:	0f 90       	pop	r0
 dde:	0f 90       	pop	r0
 de0:	cf 91       	pop	r28
 de2:	df 91       	pop	r29
 de4:	08 95       	ret

00000de6 <Button_Pullup_Disable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
 de6:	df 93       	push	r29
 de8:	cf 93       	push	r28
 dea:	00 d0       	rcall	.+0      	; 0xdec <Button_Pullup_Disable+0x6>
 dec:	0f 92       	push	r0
 dee:	cd b7       	in	r28, 0x3d	; 61
 df0:	de b7       	in	r29, 0x3e	; 62
 df2:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
 df4:	89 81       	ldd	r24, Y+1	; 0x01
 df6:	28 2f       	mov	r18, r24
 df8:	30 e0       	ldi	r19, 0x00	; 0
 dfa:	3b 83       	std	Y+3, r19	; 0x03
 dfc:	2a 83       	std	Y+2, r18	; 0x02
 dfe:	8a 81       	ldd	r24, Y+2	; 0x02
 e00:	9b 81       	ldd	r25, Y+3	; 0x03
 e02:	81 30       	cpi	r24, 0x01	; 1
 e04:	91 05       	cpc	r25, r1
 e06:	71 f0       	breq	.+28     	; 0xe24 <Button_Pullup_Disable+0x3e>
 e08:	2a 81       	ldd	r18, Y+2	; 0x02
 e0a:	3b 81       	ldd	r19, Y+3	; 0x03
 e0c:	22 30       	cpi	r18, 0x02	; 2
 e0e:	31 05       	cpc	r19, r1
 e10:	71 f0       	breq	.+28     	; 0xe2e <Button_Pullup_Disable+0x48>
 e12:	8a 81       	ldd	r24, Y+2	; 0x02
 e14:	9b 81       	ldd	r25, Y+3	; 0x03
 e16:	00 97       	sbiw	r24, 0x00	; 0
 e18:	71 f4       	brne	.+28     	; 0xe36 <Button_Pullup_Disable+0x50>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
 e1a:	81 e0       	ldi	r24, 0x01	; 1
 e1c:	60 e0       	ldi	r22, 0x00	; 0
 e1e:	0e 94 9f 03 	call	0x73e	; 0x73e <DIO_DISABLE_PULLUP>
 e22:	09 c0       	rjmp	.+18     	; 0xe36 <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
 e24:	81 e0       	ldi	r24, 0x01	; 1
 e26:	64 e0       	ldi	r22, 0x04	; 4
 e28:	0e 94 9f 03 	call	0x73e	; 0x73e <DIO_DISABLE_PULLUP>
 e2c:	04 c0       	rjmp	.+8      	; 0xe36 <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
 e2e:	83 e0       	ldi	r24, 0x03	; 3
 e30:	62 e0       	ldi	r22, 0x02	; 2
 e32:	0e 94 9f 03 	call	0x73e	; 0x73e <DIO_DISABLE_PULLUP>
				break;
		}
}
 e36:	0f 90       	pop	r0
 e38:	0f 90       	pop	r0
 e3a:	0f 90       	pop	r0
 e3c:	cf 91       	pop	r28
 e3e:	df 91       	pop	r29
 e40:	08 95       	ret

00000e42 <main>:
#include "Main_Types.h"
#include "Services.h"



int main (){
 e42:	df 93       	push	r29
 e44:	cf 93       	push	r28
 e46:	00 d0       	rcall	.+0      	; 0xe48 <main+0x6>
 e48:	cd b7       	in	r28, 0x3d	; 61
 e4a:	de b7       	in	r29, 0x3e	; 62
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	//	Timer0_init();
	//	Timer1_init();
	//	Timer2_init();
	Heater_Init();
 e4c:	0e 94 01 06 	call	0xc02	; 0xc02 <Heater_Init>
	Cooler_Init();
 e50:	0e 94 3b 06 	call	0xc76	; 0xc76 <Cooler_Init>
	//	TempSen_Init();
	//	SSD_Init();
	Button_Init(BUTTON0);
 e54:	80 e0       	ldi	r24, 0x00	; 0
 e56:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Button_Init>
	Button_Init(BUTTON1);
 e5a:	81 e0       	ldi	r24, 0x01	; 1
 e5c:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Button_Init>
	Button_Init(BUTTON2);
 e60:	82 e0       	ldi	r24, 0x02	; 2
 e62:	0e 94 61 06 	call	0xcc2	; 0xcc2 <Button_Init>
	LED_Init();
 e66:	0e 94 d4 05 	call	0xba8	; 0xba8 <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
 e6a:	19 82       	std	Y+1, r1	; 0x01
	ButtonEnable = TRUE;
 e6c:	81 e0       	ldi	r24, 0x01	; 1
 e6e:	80 93 6f 00 	sts	0x006F, r24
	Mode = Temp_Control;
 e72:	10 92 6e 00 	sts	0x006E, r1
	Curr_Temp = 0;
 e76:	10 92 6b 00 	sts	0x006B, r1
	Restore_Temp();
 e7a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <Restore_Temp>
	Update_Temp_En = TRUE;
 e7e:	81 e0       	ldi	r24, 0x01	; 1
 e80:	80 93 6c 00 	sts	0x006C, r24
	Blink_Status = FALSE;
 e84:	10 92 6a 00 	sts	0x006A, r1
	/*--------------------------------------------------------------------------------------------------------------*/
	while (1){

		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
 e88:	81 e0       	ldi	r24, 0x01	; 1
 e8a:	0e 94 92 06 	call	0xd24	; 0xd24 <Button_READ>
 e8e:	88 23       	and	r24, r24
 e90:	71 f0       	breq	.+28     	; 0xeae <main+0x6c>
			if(ButtonEnable == TRUE){
 e92:	80 91 6f 00 	lds	r24, 0x006F
 e96:	81 30       	cpi	r24, 0x01	; 1
 e98:	41 f4       	brne	.+16     	; 0xeaa <main+0x68>
				SystemStatus = !SystemStatus;
 e9a:	1a 82       	std	Y+2, r1	; 0x02
 e9c:	89 81       	ldd	r24, Y+1	; 0x01
 e9e:	88 23       	and	r24, r24
 ea0:	11 f4       	brne	.+4      	; 0xea6 <main+0x64>
 ea2:	81 e0       	ldi	r24, 0x01	; 1
 ea4:	8a 83       	std	Y+2, r24	; 0x02
 ea6:	8a 81       	ldd	r24, Y+2	; 0x02
 ea8:	89 83       	std	Y+1, r24	; 0x01
			}
			Debounce_Handler();
 eaa:	0e 94 2f 01 	call	0x25e	; 0x25e <Debounce_Handler>
		}

		if(SystemStatus==OFF){
 eae:	89 81       	ldd	r24, Y+1	; 0x01
 eb0:	88 23       	and	r24, r24
 eb2:	29 f4       	brne	.+10     	; 0xebe <main+0x7c>
			Heater_OFF();
 eb4:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Heater_OFF>
			Cooler_OFF();
 eb8:	0e 94 54 06 	call	0xca8	; 0xca8 <Cooler_OFF>
 ebc:	e5 cf       	rjmp	.-54     	; 0xe88 <main+0x46>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
 ebe:	80 91 6c 00 	lds	r24, 0x006C
 ec2:	81 30       	cpi	r24, 0x01	; 1
 ec4:	11 f4       	brne	.+4      	; 0xeca <main+0x88>
			Update_Temp();
 ec6:	0e 94 94 00 	call	0x128	; 0x128 <Update_Temp>
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
 eca:	80 e0       	ldi	r24, 0x00	; 0
 ecc:	0e 94 92 06 	call	0xd24	; 0xd24 <Button_READ>
 ed0:	88 23       	and	r24, r24
 ed2:	29 f4       	brne	.+10     	; 0xede <main+0x9c>
 ed4:	82 e0       	ldi	r24, 0x02	; 2
 ed6:	0e 94 92 06 	call	0xd24	; 0xd24 <Button_READ>
 eda:	88 23       	and	r24, r24
 edc:	e9 f0       	breq	.+58     	; 0xf18 <main+0xd6>
			if(ButtonEnable == TRUE){
 ede:	80 91 6f 00 	lds	r24, 0x006F
 ee2:	81 30       	cpi	r24, 0x01	; 1
 ee4:	b9 f4       	brne	.+46     	; 0xf14 <main+0xd2>

				Mode_Handler();
 ee6:	0e 94 13 01 	call	0x226	; 0x226 <Mode_Handler>
				Mode = Temp_Set;
 eea:	81 e0       	ldi	r24, 0x01	; 1
 eec:	80 93 6e 00 	sts	0x006E, r24

				if(Button_READ(BUTTON0)){
 ef0:	80 e0       	ldi	r24, 0x00	; 0
 ef2:	0e 94 92 06 	call	0xd24	; 0xd24 <Button_READ>
 ef6:	88 23       	and	r24, r24
 ef8:	31 f0       	breq	.+12     	; 0xf06 <main+0xc4>
					Des_Temp +=5;
 efa:	80 91 6d 00 	lds	r24, 0x006D
 efe:	8b 5f       	subi	r24, 0xFB	; 251
 f00:	80 93 6d 00 	sts	0x006D, r24
 f04:	05 c0       	rjmp	.+10     	; 0xf10 <main+0xce>
				}else{
					Des_Temp -=5;
 f06:	80 91 6d 00 	lds	r24, 0x006D
 f0a:	85 50       	subi	r24, 0x05	; 5
 f0c:	80 93 6d 00 	sts	0x006D, r24
				}
				Store_Temp();
 f10:	0e 94 dd 00 	call	0x1ba	; 0x1ba <Store_Temp>

			}
			Debounce_Handler();
 f14:	0e 94 2f 01 	call	0x25e	; 0x25e <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
 f18:	80 91 6e 00 	lds	r24, 0x006E
 f1c:	88 23       	and	r24, r24
 f1e:	69 f0       	breq	.+26     	; 0xf3a <main+0xf8>
			//SSD_Display(Des_Temp);
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
 f20:	80 91 6e 00 	lds	r24, 0x006E
 f24:	81 30       	cpi	r24, 0x01	; 1
 f26:	39 f4       	brne	.+14     	; 0xf36 <main+0xf4>
 f28:	80 91 6a 00 	lds	r24, 0x006A
 f2c:	81 30       	cpi	r24, 0x01	; 1
 f2e:	19 f4       	brne	.+6      	; 0xf36 <main+0xf4>
			//SSD_Display(Curr_Temp);
			LED_ON();
 f30:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <LED_ON>
 f34:	02 c0       	rjmp	.+4      	; 0xf3a <main+0xf8>
		}else{
			LED_OFF();
 f36:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <LED_OFF>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
 f3a:	80 91 6b 00 	lds	r24, 0x006B
 f3e:	88 2f       	mov	r24, r24
 f40:	90 e0       	ldi	r25, 0x00	; 0
 f42:	9c 01       	movw	r18, r24
 f44:	2b 5f       	subi	r18, 0xFB	; 251
 f46:	3f 4f       	sbci	r19, 0xFF	; 255
 f48:	80 91 6d 00 	lds	r24, 0x006D
 f4c:	88 2f       	mov	r24, r24
 f4e:	90 e0       	ldi	r25, 0x00	; 0
 f50:	28 17       	cp	r18, r24
 f52:	39 07       	cpc	r19, r25
 f54:	1c f4       	brge	.+6      	; 0xf5c <main+0x11a>
			Heater_ON();
 f56:	0e 94 0d 06 	call	0xc1a	; 0xc1a <Heater_ON>
 f5a:	02 c0       	rjmp	.+4      	; 0xf60 <main+0x11e>
		}else{
			Heater_OFF();
 f5c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <Heater_OFF>
		}

		if((Curr_Temp-5)>Des_Temp){
 f60:	80 91 6b 00 	lds	r24, 0x006B
 f64:	88 2f       	mov	r24, r24
 f66:	90 e0       	ldi	r25, 0x00	; 0
 f68:	9c 01       	movw	r18, r24
 f6a:	25 50       	subi	r18, 0x05	; 5
 f6c:	30 40       	sbci	r19, 0x00	; 0
 f6e:	80 91 6d 00 	lds	r24, 0x006D
 f72:	88 2f       	mov	r24, r24
 f74:	90 e0       	ldi	r25, 0x00	; 0
 f76:	82 17       	cp	r24, r18
 f78:	93 07       	cpc	r25, r19
 f7a:	1c f4       	brge	.+6      	; 0xf82 <main+0x140>
			Cooler_ON();
 f7c:	0e 94 47 06 	call	0xc8e	; 0xc8e <Cooler_ON>
 f80:	83 cf       	rjmp	.-250    	; 0xe88 <main+0x46>
		}else{
			Cooler_OFF();
 f82:	0e 94 54 06 	call	0xca8	; 0xca8 <Cooler_OFF>
 f86:	80 cf       	rjmp	.-256    	; 0xe88 <main+0x46>

00000f88 <__udivmodqi4>:
 f88:	99 1b       	sub	r25, r25
 f8a:	79 e0       	ldi	r23, 0x09	; 9
 f8c:	04 c0       	rjmp	.+8      	; 0xf96 <__udivmodqi4_ep>

00000f8e <__udivmodqi4_loop>:
 f8e:	99 1f       	adc	r25, r25
 f90:	96 17       	cp	r25, r22
 f92:	08 f0       	brcs	.+2      	; 0xf96 <__udivmodqi4_ep>
 f94:	96 1b       	sub	r25, r22

00000f96 <__udivmodqi4_ep>:
 f96:	88 1f       	adc	r24, r24
 f98:	7a 95       	dec	r23
 f9a:	c9 f7       	brne	.-14     	; 0xf8e <__udivmodqi4_loop>
 f9c:	80 95       	com	r24
 f9e:	08 95       	ret

00000fa0 <_exit>:
 fa0:	f8 94       	cli

00000fa2 <__stop_program>:
 fa2:	ff cf       	rjmp	.-2      	; 0xfa2 <__stop_program>
