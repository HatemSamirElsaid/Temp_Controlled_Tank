
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000014f0  00001584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800062  00800062  00001586  2**0
                  ALLOC
  3 .stab         00002b50  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ac1  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b3 09 	call	0x1366	; 0x1366 <main>
      8a:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	df 93       	push	r29
      a0:	cf 93       	push	r28
      a2:	cd b7       	in	r28, 0x3d	; 61
      a4:	de b7       	in	r29, 0x3e	; 62
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 6b 00 	sts	0x006B, r24
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	8f 91       	pop	r24
      b2:	0f 90       	pop	r0
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	0f 90       	pop	r0
      b8:	1f 90       	pop	r1
      ba:	18 95       	reti

000000bc <Calc_Average>:

ISR (TIMER2_OVF_vect){
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <Calc_Average+0x6>
      c2:	0f 92       	push	r0
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
	u8 result = 0;
      c8:	1b 82       	std	Y+3, r1	; 0x03
	for(int i=0;i<5;i++){
      ca:	1a 82       	std	Y+2, r1	; 0x02
      cc:	19 82       	std	Y+1, r1	; 0x01
      ce:	0e c0       	rjmp	.+28     	; 0xec <Calc_Average+0x30>
		result+=Temp_arr[i];
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	9a 81       	ldd	r25, Y+2	; 0x02
      d4:	fc 01       	movw	r30, r24
      d6:	ed 59       	subi	r30, 0x9D	; 157
      d8:	ff 4f       	sbci	r31, 0xFF	; 255
      da:	90 81       	ld	r25, Z
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	89 0f       	add	r24, r25
      e0:	8b 83       	std	Y+3, r24	; 0x03
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
	u8 result = 0;
	for(int i=0;i<5;i++){
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	9a 81       	ldd	r25, Y+2	; 0x02
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	9a 83       	std	Y+2, r25	; 0x02
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	85 30       	cpi	r24, 0x05	; 5
      f2:	91 05       	cpc	r25, r1
      f4:	6c f3       	brlt	.-38     	; 0xd0 <Calc_Average+0x14>
		result+=Temp_arr[i];
	}
	result /=5;
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	95 e0       	ldi	r25, 0x05	; 5
      fa:	69 2f       	mov	r22, r25
      fc:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__udivmodqi4>
     100:	8b 83       	std	Y+3, r24	; 0x03
	return result;
     102:	8b 81       	ldd	r24, Y+3	; 0x03
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <Update_Temp>:

void Update_Temp(void){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	00 d0       	rcall	.+0      	; 0x116 <Update_Temp+0x6>
     116:	00 d0       	rcall	.+0      	; 0x118 <Update_Temp+0x8>
     118:	0f 92       	push	r0
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     11e:	80 91 62 00 	lds	r24, 0x0062
     122:	8d 30       	cpi	r24, 0x0D	; 13
     124:	09 f0       	breq	.+2      	; 0x128 <Update_Temp+0x18>
     126:	3f c0       	rjmp	.+126    	; 0x1a6 <Update_Temp+0x96>
		Timer2_Stop();
     128:	0e 94 08 02 	call	0x410	; 0x410 <Timer2_Stop>
		Blink_Status = !Blink_Status;
     12c:	80 91 69 00 	lds	r24, 0x0069
     130:	1d 82       	std	Y+5, r1	; 0x05
     132:	88 23       	and	r24, r24
     134:	11 f4       	brne	.+4      	; 0x13a <Update_Temp+0x2a>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	8d 81       	ldd	r24, Y+5	; 0x05
     13c:	80 93 69 00 	sts	0x0069, r24
		u8 Temp = 0/*TempSen_Read()*/;
     140:	1c 82       	std	Y+4, r1	; 0x04
		u8 Var1 = Temp_arr[0];
     142:	80 91 63 00 	lds	r24, 0x0063
     146:	8b 83       	std	Y+3, r24	; 0x03
		for(int i=0;i<4;i++){
     148:	1a 82       	std	Y+2, r1	; 0x02
     14a:	19 82       	std	Y+1, r1	; 0x01
     14c:	20 c0       	rjmp	.+64     	; 0x18e <Update_Temp+0x7e>
			if(i==0){
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	41 f4       	brne	.+16     	; 0x166 <Update_Temp+0x56>
				Temp_arr[i] = Temp;
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	fc 01       	movw	r30, r24
     15c:	ed 59       	subi	r30, 0x9D	; 157
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	8c 81       	ldd	r24, Y+4	; 0x04
     162:	80 83       	st	Z, r24
     164:	0f c0       	rjmp	.+30     	; 0x184 <Update_Temp+0x74>
			}
			else{
				Temp_arr[i] = Var1;
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	fc 01       	movw	r30, r24
     16c:	ed 59       	subi	r30, 0x9D	; 157
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	80 83       	st	Z, r24
				Var1 = Temp_arr[i+1];
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	fc 01       	movw	r30, r24
     17c:	ed 59       	subi	r30, 0x9D	; 157
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 81       	ld	r24, Z
     182:	8b 83       	std	Y+3, r24	; 0x03
	if(Counter==13){
		Timer2_Stop();
		Blink_Status = !Blink_Status;
		u8 Temp = 0/*TempSen_Read()*/;
		u8 Var1 = Temp_arr[0];
		for(int i=0;i<4;i++){
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	84 30       	cpi	r24, 0x04	; 4
     194:	91 05       	cpc	r25, r1
     196:	dc f2       	brlt	.-74     	; 0x14e <Update_Temp+0x3e>
			else{
				Temp_arr[i] = Var1;
				Var1 = Temp_arr[i+1];
			}
		}
		Curr_Temp=Calc_Average();
     198:	0e 94 5e 00 	call	0xbc	; 0xbc <Calc_Average>
     19c:	80 93 6a 00 	sts	0x006A, r24
		Counter=0;
     1a0:	10 92 62 00 	sts	0x0062, r1
     1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <Update_Temp+0xa6>
	}
	else{
		Counter++;
     1a6:	80 91 62 00 	lds	r24, 0x0062
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 62 00 	sts	0x0062, r24
		Timer2_Start(TIMER2_1024_);
     1b0:	87 e0       	ldi	r24, 0x07	; 7
     1b2:	0e 94 83 01 	call	0x306	; 0x306 <Timer2_Start>
	}
	Update_Temp_En =FALSE;
     1b6:	10 92 6b 00 	sts	0x006B, r1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	cf 91       	pop	r28
     1c6:	df 91       	pop	r29
     1c8:	08 95       	ret

000001ca <Store_Temp>:
#include "Store_Temp.h"


void Store_Temp(void){
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
//	EEPROM_Write((u16)1,Des_Temp);
}
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <Restore_Temp>:
#include "Restore_Temp.h"

static u8 CHK = 0b01010101;


void Restore_Temp(void){
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Restore_Temp+0x6>
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	u8 Reading=0;
     1e4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Add=0;
     1e6:	1a 82       	std	Y+2, r1	; 0x02
     1e8:	19 82       	std	Y+1, r1	; 0x01

	//Reading = EEPROM_Read(Add);
	if (Reading == CHK){
     1ea:	90 91 60 00 	lds	r25, 0x0060
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	89 17       	cp	r24, r25
     1f2:	19 f4       	brne	.+6      	; 0x1fa <Restore_Temp+0x22>
		Des_Temp = 0/*EEPROM_Read(Add+1)*/;
     1f4:	10 92 6c 00 	sts	0x006C, r1
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <Restore_Temp+0x28>
	}
	else{
		//EEPROM_Write(Add,CHK);
		//EEPROM_Write(Add+1,(u8)default_Temp);
		Des_Temp = default_Temp;
     1fa:	8c e3       	ldi	r24, 0x3C	; 60
     1fc:	80 93 6c 00 	sts	0x006C, r24
	}
}
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <__vector_9>:
#include "Mode_Handler.h"

ISR(TIMER1_OVF_vect){
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	8f 93       	push	r24
     218:	df 93       	push	r29
     21a:	cf 93       	push	r28
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	Mode = Temp_Set;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	80 93 6d 00 	sts	0x006D, r24
	//Timer1_Stop();
	//Timer1_DisableInterrupt();
}
     226:	cf 91       	pop	r28
     228:	df 91       	pop	r29
     22a:	8f 91       	pop	r24
     22c:	0f 90       	pop	r0
     22e:	0f be       	out	0x3f, r0	; 63
     230:	0f 90       	pop	r0
     232:	1f 90       	pop	r1
     234:	18 95       	reti

00000236 <Mode_Handler>:

void Mode_Handler(void){
     236:	df 93       	push	r29
     238:	cf 93       	push	r28
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
	//Timer1_Start(1024);
	//Timer1_EnableInterrupt();
}
     23e:	cf 91       	pop	r28
     240:	df 91       	pop	r29
     242:	08 95       	ret

00000244 <__vector_11>:
#include "Debounce_Handler.h"

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
     266:	df 93       	push	r29
     268:	cf 93       	push	r28
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     26e:	80 91 68 00 	lds	r24, 0x0068
     272:	8d 30       	cpi	r24, 0x0D	; 13
     274:	51 f4       	brne	.+20     	; 0x28a <__vector_11+0x46>
		ButtonEnable = TRUE;
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	80 93 6e 00 	sts	0x006E, r24
		Timer0_Stop();
     27c:	0e 94 b0 03 	call	0x760	; 0x760 <Timer0_Stop>
		Timer0_DisableInterrupt();
     280:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <Timer0_DisableInterrupt>
		Counter = 0;
     284:	10 92 68 00 	sts	0x0068, r1
     288:	08 c0       	rjmp	.+16     	; 0x29a <__vector_11+0x56>
	}
	else{
		Counter++;
     28a:	80 91 68 00 	lds	r24, 0x0068
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	80 93 68 00 	sts	0x0068, r24
		Timer0_Start(TIMER0_1024_);
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	0e 94 2b 03 	call	0x656	; 0x656 <Timer0_Start>
	}

}
     29a:	cf 91       	pop	r28
     29c:	df 91       	pop	r29
     29e:	ff 91       	pop	r31
     2a0:	ef 91       	pop	r30
     2a2:	bf 91       	pop	r27
     2a4:	af 91       	pop	r26
     2a6:	9f 91       	pop	r25
     2a8:	8f 91       	pop	r24
     2aa:	7f 91       	pop	r23
     2ac:	6f 91       	pop	r22
     2ae:	5f 91       	pop	r21
     2b0:	4f 91       	pop	r20
     2b2:	3f 91       	pop	r19
     2b4:	2f 91       	pop	r18
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <Debounce_Handler>:

void Debounce_Handler(void){
     2c0:	df 93       	push	r29
     2c2:	cf 93       	push	r28
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = FALSE;
     2c8:	10 92 6e 00 	sts	0x006E, r1
	Timer0_Start(TIMER0_1024_);
     2cc:	85 e0       	ldi	r24, 0x05	; 5
     2ce:	0e 94 2b 03 	call	0x656	; 0x656 <Timer0_Start>
	Timer0_EnableInterrupt();
     2d2:	0e 94 bd 03 	call	0x77a	; 0x77a <Timer0_EnableInterrupt>
}
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	08 95       	ret

000002dc <Timer2_Init>:


#include "Timer2.h"


void Timer2_Init(void){
     2dc:	df 93       	push	r29
     2de:	cf 93       	push	r28
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62

	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM20);
     2e4:	a5 e4       	ldi	r26, 0x45	; 69
     2e6:	b0 e0       	ldi	r27, 0x00	; 0
     2e8:	e5 e4       	ldi	r30, 0x45	; 69
     2ea:	f0 e0       	ldi	r31, 0x00	; 0
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 7b       	andi	r24, 0xBF	; 191
     2f0:	8c 93       	st	X, r24
	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM21);
     2f2:	a5 e4       	ldi	r26, 0x45	; 69
     2f4:	b0 e0       	ldi	r27, 0x00	; 0
     2f6:	e5 e4       	ldi	r30, 0x45	; 69
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	87 7f       	andi	r24, 0xF7	; 247
     2fe:	8c 93       	st	X, r24
}
     300:	cf 91       	pop	r28
     302:	df 91       	pop	r29
     304:	08 95       	ret

00000306 <Timer2_Start>:


void Timer2_Start(TIMER2_PreScaler_ID prescaler){
     306:	df 93       	push	r29
     308:	cf 93       	push	r28
     30a:	00 d0       	rcall	.+0      	; 0x30c <Timer2_Start+0x6>
     30c:	0f 92       	push	r0
     30e:	cd b7       	in	r28, 0x3d	; 61
     310:	de b7       	in	r29, 0x3e	; 62
     312:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_TCNT2_REG |=0x00;  //Reset
     314:	a4 e4       	ldi	r26, 0x44	; 68
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	e4 e4       	ldi	r30, 0x44	; 68
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	8c 93       	st	X, r24

	switch(prescaler){
     320:	89 81       	ldd	r24, Y+1	; 0x01
     322:	28 2f       	mov	r18, r24
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	3b 83       	std	Y+3, r19	; 0x03
     328:	2a 83       	std	Y+2, r18	; 0x02
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	83 30       	cpi	r24, 0x03	; 3
     330:	91 05       	cpc	r25, r1
     332:	09 f4       	brne	.+2      	; 0x336 <Timer2_Start+0x30>
     334:	40 c0       	rjmp	.+128    	; 0x3b6 <Timer2_Start+0xb0>
     336:	2a 81       	ldd	r18, Y+2	; 0x02
     338:	3b 81       	ldd	r19, Y+3	; 0x03
     33a:	24 30       	cpi	r18, 0x04	; 4
     33c:	31 05       	cpc	r19, r1
     33e:	7c f4       	brge	.+30     	; 0x35e <Timer2_Start+0x58>
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	9b 81       	ldd	r25, Y+3	; 0x03
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	91 05       	cpc	r25, r1
     348:	31 f1       	breq	.+76     	; 0x396 <Timer2_Start+0x90>
     34a:	2a 81       	ldd	r18, Y+2	; 0x02
     34c:	3b 81       	ldd	r19, Y+3	; 0x03
     34e:	22 30       	cpi	r18, 0x02	; 2
     350:	31 05       	cpc	r19, r1
     352:	4c f5       	brge	.+82     	; 0x3a6 <Timer2_Start+0xa0>
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	00 97       	sbiw	r24, 0x00	; 0
     35a:	b1 f0       	breq	.+44     	; 0x388 <Timer2_Start+0x82>
     35c:	53 c0       	rjmp	.+166    	; 0x404 <Timer2_Start+0xfe>
     35e:	2a 81       	ldd	r18, Y+2	; 0x02
     360:	3b 81       	ldd	r19, Y+3	; 0x03
     362:	25 30       	cpi	r18, 0x05	; 5
     364:	31 05       	cpc	r19, r1
     366:	b9 f1       	breq	.+110    	; 0x3d6 <Timer2_Start+0xd0>
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	9b 81       	ldd	r25, Y+3	; 0x03
     36c:	85 30       	cpi	r24, 0x05	; 5
     36e:	91 05       	cpc	r25, r1
     370:	54 f1       	brlt	.+84     	; 0x3c6 <Timer2_Start+0xc0>
     372:	2a 81       	ldd	r18, Y+2	; 0x02
     374:	3b 81       	ldd	r19, Y+3	; 0x03
     376:	26 30       	cpi	r18, 0x06	; 6
     378:	31 05       	cpc	r19, r1
     37a:	a9 f1       	breq	.+106    	; 0x3e6 <Timer2_Start+0xe0>
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	87 30       	cpi	r24, 0x07	; 7
     382:	91 05       	cpc	r25, r1
     384:	c1 f1       	breq	.+112    	; 0x3f6 <Timer2_Start+0xf0>
     386:	3e c0       	rjmp	.+124    	; 0x404 <Timer2_Start+0xfe>

	case TIMER2_Stop_:

		TIMER2_TCCR2_REG |= Timer2_Stopped;
     388:	e5 e4       	ldi	r30, 0x45	; 69
     38a:	f0 e0       	ldi	r31, 0x00	; 0
     38c:	a5 e4       	ldi	r26, 0x45	; 69
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	8c 91       	ld	r24, X
     392:	80 83       	st	Z, r24
     394:	37 c0       	rjmp	.+110    	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_None_:

		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
     396:	a5 e4       	ldi	r26, 0x45	; 69
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e5 e4       	ldi	r30, 0x45	; 69
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	8c 93       	st	X, r24
     3a4:	2f c0       	rjmp	.+94     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_8_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
     3a6:	a5 e4       	ldi	r26, 0x45	; 69
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	e5 e4       	ldi	r30, 0x45	; 69
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	82 60       	ori	r24, 0x02	; 2
     3b2:	8c 93       	st	X, r24
     3b4:	27 c0       	rjmp	.+78     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_32_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
     3b6:	a5 e4       	ldi	r26, 0x45	; 69
     3b8:	b0 e0       	ldi	r27, 0x00	; 0
     3ba:	e5 e4       	ldi	r30, 0x45	; 69
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	80 81       	ld	r24, Z
     3c0:	83 60       	ori	r24, 0x03	; 3
     3c2:	8c 93       	st	X, r24
     3c4:	1f c0       	rjmp	.+62     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_64_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
     3c6:	a5 e4       	ldi	r26, 0x45	; 69
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e5 e4       	ldi	r30, 0x45	; 69
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	84 60       	ori	r24, 0x04	; 4
     3d2:	8c 93       	st	X, r24
     3d4:	17 c0       	rjmp	.+46     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_128_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_128;
     3d6:	a5 e4       	ldi	r26, 0x45	; 69
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e5 e4       	ldi	r30, 0x45	; 69
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	85 60       	ori	r24, 0x05	; 5
     3e2:	8c 93       	st	X, r24
     3e4:	0f c0       	rjmp	.+30     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_256_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
     3e6:	a5 e4       	ldi	r26, 0x45	; 69
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e5 e4       	ldi	r30, 0x45	; 69
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	86 60       	ori	r24, 0x06	; 6
     3f2:	8c 93       	st	X, r24
     3f4:	07 c0       	rjmp	.+14     	; 0x404 <Timer2_Start+0xfe>
		break;

	case TIMER2_1024_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_1024;
     3f6:	a5 e4       	ldi	r26, 0x45	; 69
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	e5 e4       	ldi	r30, 0x45	; 69
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	87 60       	ori	r24, 0x07	; 7
     402:	8c 93       	st	X, r24
		break;
    }
}
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <Timer2_Stop>:


void Timer2_Stop(void){
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62

	TIMER2_TCCR2_REG |=Timer2_Stopped;
     418:	e5 e4       	ldi	r30, 0x45	; 69
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	a5 e4       	ldi	r26, 0x45	; 69
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	8c 91       	ld	r24, X
     422:	80 83       	st	Z, r24
}
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <Timer2_EnableInterrupt>:


void Timer2_EnableInterrupt(void){
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     432:	af e5       	ldi	r26, 0x5F	; 95
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	ef e5       	ldi	r30, 0x5F	; 95
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	80 68       	ori	r24, 0x80	; 128
     43e:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     440:	a9 e5       	ldi	r26, 0x59	; 89
     442:	b0 e0       	ldi	r27, 0x00	; 0
     444:	e9 e5       	ldi	r30, 0x59	; 89
     446:	f0 e0       	ldi	r31, 0x00	; 0
     448:	80 81       	ld	r24, Z
     44a:	80 64       	ori	r24, 0x40	; 64
     44c:	8c 93       	st	X, r24
}
     44e:	cf 91       	pop	r28
     450:	df 91       	pop	r29
     452:	08 95       	ret

00000454 <Timer2_DisableInterrupt>:


void Timer2_DisableInterrupt(void){
     454:	df 93       	push	r29
     456:	cf 93       	push	r28
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     45c:	a9 e5       	ldi	r26, 0x59	; 89
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	e9 e5       	ldi	r30, 0x59	; 89
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	8f 7b       	andi	r24, 0xBF	; 191
     468:	8c 93       	st	X, r24
}
     46a:	cf 91       	pop	r28
     46c:	df 91       	pop	r29
     46e:	08 95       	ret

00000470 <Timer1_Init>:
 *      Author: Queen
 */

#include "Timer1.h"

void Timer1_Init(void){
     470:	df 93       	push	r29
     472:	cf 93       	push	r28
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62

	 //interval Mode
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM10);
     478:	af e4       	ldi	r26, 0x4F	; 79
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	ef e4       	ldi	r30, 0x4F	; 79
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM11);
     486:	af e4       	ldi	r26, 0x4F	; 79
     488:	b0 e0       	ldi	r27, 0x00	; 0
     48a:	ef e4       	ldi	r30, 0x4F	; 79
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	80 81       	ld	r24, Z
     490:	8d 7f       	andi	r24, 0xFD	; 253
     492:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM12);
     494:	ae e4       	ldi	r26, 0x4E	; 78
     496:	b0 e0       	ldi	r27, 0x00	; 0
     498:	ee e4       	ldi	r30, 0x4E	; 78
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	87 7f       	andi	r24, 0xF7	; 247
     4a0:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM13);
     4a2:	ae e4       	ldi	r26, 0x4E	; 78
     4a4:	b0 e0       	ldi	r27, 0x00	; 0
     4a6:	ee e4       	ldi	r30, 0x4E	; 78
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 7e       	andi	r24, 0xEF	; 239
     4ae:	8c 93       	st	X, r24
}
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <Timer1_Start>:


void Timer1_Start(TIMER1_PreScaler_ID prescaler){
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	00 d0       	rcall	.+0      	; 0x4bc <Timer1_Start+0x6>
     4bc:	0f 92       	push	r0
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	89 83       	std	Y+1, r24	; 0x01

	//Reset
	TIMER1_TCNT1H_REG |=0x00;
     4c4:	ad e4       	ldi	r26, 0x4D	; 77
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	ed e4       	ldi	r30, 0x4D	; 77
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	80 81       	ld	r24, Z
     4ce:	8c 93       	st	X, r24
	TIMER1_TCNT1L_REG |=0x00;
     4d0:	ac e4       	ldi	r26, 0x4C	; 76
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	ec e4       	ldi	r30, 0x4C	; 76
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	8c 93       	st	X, r24

	switch(prescaler){
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	28 2f       	mov	r18, r24
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	3b 83       	std	Y+3, r19	; 0x03
     4e4:	2a 83       	std	Y+2, r18	; 0x02
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	9b 81       	ldd	r25, Y+3	; 0x03
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <Timer1_Start+0x3c>
     4f0:	40 c0       	rjmp	.+128    	; 0x572 <Timer1_Start+0xbc>
     4f2:	2a 81       	ldd	r18, Y+2	; 0x02
     4f4:	3b 81       	ldd	r19, Y+3	; 0x03
     4f6:	24 30       	cpi	r18, 0x04	; 4
     4f8:	31 05       	cpc	r19, r1
     4fa:	7c f4       	brge	.+30     	; 0x51a <Timer1_Start+0x64>
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	9b 81       	ldd	r25, Y+3	; 0x03
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	91 05       	cpc	r25, r1
     504:	31 f1       	breq	.+76     	; 0x552 <Timer1_Start+0x9c>
     506:	2a 81       	ldd	r18, Y+2	; 0x02
     508:	3b 81       	ldd	r19, Y+3	; 0x03
     50a:	22 30       	cpi	r18, 0x02	; 2
     50c:	31 05       	cpc	r19, r1
     50e:	4c f5       	brge	.+82     	; 0x562 <Timer1_Start+0xac>
     510:	8a 81       	ldd	r24, Y+2	; 0x02
     512:	9b 81       	ldd	r25, Y+3	; 0x03
     514:	00 97       	sbiw	r24, 0x00	; 0
     516:	b1 f0       	breq	.+44     	; 0x544 <Timer1_Start+0x8e>
     518:	53 c0       	rjmp	.+166    	; 0x5c0 <Timer1_Start+0x10a>
     51a:	2a 81       	ldd	r18, Y+2	; 0x02
     51c:	3b 81       	ldd	r19, Y+3	; 0x03
     51e:	25 30       	cpi	r18, 0x05	; 5
     520:	31 05       	cpc	r19, r1
     522:	b9 f1       	breq	.+110    	; 0x592 <Timer1_Start+0xdc>
     524:	8a 81       	ldd	r24, Y+2	; 0x02
     526:	9b 81       	ldd	r25, Y+3	; 0x03
     528:	85 30       	cpi	r24, 0x05	; 5
     52a:	91 05       	cpc	r25, r1
     52c:	54 f1       	brlt	.+84     	; 0x582 <Timer1_Start+0xcc>
     52e:	2a 81       	ldd	r18, Y+2	; 0x02
     530:	3b 81       	ldd	r19, Y+3	; 0x03
     532:	26 30       	cpi	r18, 0x06	; 6
     534:	31 05       	cpc	r19, r1
     536:	a9 f1       	breq	.+106    	; 0x5a2 <Timer1_Start+0xec>
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	9b 81       	ldd	r25, Y+3	; 0x03
     53c:	87 30       	cpi	r24, 0x07	; 7
     53e:	91 05       	cpc	r25, r1
     540:	c1 f1       	breq	.+112    	; 0x5b2 <Timer1_Start+0xfc>
     542:	3e c0       	rjmp	.+124    	; 0x5c0 <Timer1_Start+0x10a>

	case TIMER1_Stop_:

		TIMER1_TCCR1B_REG |= Timer1_Stopped;
     544:	ee e4       	ldi	r30, 0x4E	; 78
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	ae e4       	ldi	r26, 0x4E	; 78
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	8c 91       	ld	r24, X
     54e:	80 83       	st	Z, r24
     550:	37 c0       	rjmp	.+110    	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_None_:

		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
     552:	ae e4       	ldi	r26, 0x4E	; 78
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	ee e4       	ldi	r30, 0x4E	; 78
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	81 60       	ori	r24, 0x01	; 1
     55e:	8c 93       	st	X, r24
     560:	2f c0       	rjmp	.+94     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_8_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
     562:	ae e4       	ldi	r26, 0x4E	; 78
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	ee e4       	ldi	r30, 0x4E	; 78
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	8c 93       	st	X, r24
     570:	27 c0       	rjmp	.+78     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_64_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
     572:	ae e4       	ldi	r26, 0x4E	; 78
     574:	b0 e0       	ldi	r27, 0x00	; 0
     576:	ee e4       	ldi	r30, 0x4E	; 78
     578:	f0 e0       	ldi	r31, 0x00	; 0
     57a:	80 81       	ld	r24, Z
     57c:	83 60       	ori	r24, 0x03	; 3
     57e:	8c 93       	st	X, r24
     580:	1f c0       	rjmp	.+62     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_256_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
     582:	ae e4       	ldi	r26, 0x4E	; 78
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	ee e4       	ldi	r30, 0x4E	; 78
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	84 60       	ori	r24, 0x04	; 4
     58e:	8c 93       	st	X, r24
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_1024_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_1024;
     592:	ae e4       	ldi	r26, 0x4E	; 78
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	ee e4       	ldi	r30, 0x4E	; 78
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	85 60       	ori	r24, 0x05	; 5
     59e:	8c 93       	st	X, r24
     5a0:	0f c0       	rjmp	.+30     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_Ext_Falling_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
     5a2:	ae e4       	ldi	r26, 0x4E	; 78
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	ee e4       	ldi	r30, 0x4E	; 78
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	86 60       	ori	r24, 0x06	; 6
     5ae:	8c 93       	st	X, r24
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <Timer1_Start+0x10a>
		break;

	case TIMER1_Ext_Rising_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Rising_Edge;
     5b2:	ae e4       	ldi	r26, 0x4E	; 78
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	ee e4       	ldi	r30, 0x4E	; 78
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	87 60       	ori	r24, 0x07	; 7
     5be:	8c 93       	st	X, r24
		break;
    }
}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	cf 91       	pop	r28
     5c8:	df 91       	pop	r29
     5ca:	08 95       	ret

000005cc <Timer1_Stop>:


void Timer1_Stop(void){
     5cc:	df 93       	push	r29
     5ce:	cf 93       	push	r28
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62

	TIMER1_TCCR1B_REG |=Timer1_Stopped;
     5d4:	ee e4       	ldi	r30, 0x4E	; 78
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	ae e4       	ldi	r26, 0x4E	; 78
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	8c 91       	ld	r24, X
     5de:	80 83       	st	Z, r24
}
     5e0:	cf 91       	pop	r28
     5e2:	df 91       	pop	r29
     5e4:	08 95       	ret

000005e6 <Timer1_EnableInterrupt>:


void Timer1_EnableInterrupt(void){
     5e6:	df 93       	push	r29
     5e8:	cf 93       	push	r28
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     5ee:	af e5       	ldi	r26, 0x5F	; 95
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	ef e5       	ldi	r30, 0x5F	; 95
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	80 68       	ori	r24, 0x80	; 128
     5fa:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     5fc:	a9 e5       	ldi	r26, 0x59	; 89
     5fe:	b0 e0       	ldi	r27, 0x00	; 0
     600:	e9 e5       	ldi	r30, 0x59	; 89
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	80 81       	ld	r24, Z
     606:	84 60       	ori	r24, 0x04	; 4
     608:	8c 93       	st	X, r24
}
     60a:	cf 91       	pop	r28
     60c:	df 91       	pop	r29
     60e:	08 95       	ret

00000610 <Timer1_DisableInterrupt>:


void Timer1_DisableInterrupt(void){
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	cd b7       	in	r28, 0x3d	; 61
     616:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     618:	a9 e5       	ldi	r26, 0x59	; 89
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	e9 e5       	ldi	r30, 0x59	; 89
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	80 81       	ld	r24, Z
     622:	8b 7f       	andi	r24, 0xFB	; 251
     624:	8c 93       	st	X, r24
}
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <Timer0_Init>:
 *      Author: Queen
 */
#include "Timer0.h"


void Timer0_Init(void){
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62

	//Interval Mode
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM00);
     634:	a3 e5       	ldi	r26, 0x53	; 83
     636:	b0 e0       	ldi	r27, 0x00	; 0
     638:	e3 e5       	ldi	r30, 0x53	; 83
     63a:	f0 e0       	ldi	r31, 0x00	; 0
     63c:	80 81       	ld	r24, Z
     63e:	8f 7b       	andi	r24, 0xBF	; 191
     640:	8c 93       	st	X, r24
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM01);
     642:	a3 e5       	ldi	r26, 0x53	; 83
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	e3 e5       	ldi	r30, 0x53	; 83
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	87 7f       	andi	r24, 0xF7	; 247
     64e:	8c 93       	st	X, r24

}
     650:	cf 91       	pop	r28
     652:	df 91       	pop	r29
     654:	08 95       	ret

00000656 <Timer0_Start>:


void Timer0_Start(TIMER0_PreScaler_ID prescaler){
     656:	df 93       	push	r29
     658:	cf 93       	push	r28
     65a:	00 d0       	rcall	.+0      	; 0x65c <Timer0_Start+0x6>
     65c:	0f 92       	push	r0
     65e:	cd b7       	in	r28, 0x3d	; 61
     660:	de b7       	in	r29, 0x3e	; 62
     662:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_TCNT0_REG |=0x00;  //Reset
     664:	a2 e5       	ldi	r26, 0x52	; 82
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e2 e5       	ldi	r30, 0x52	; 82
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	8c 93       	st	X, r24

	switch(prescaler){
     670:	89 81       	ldd	r24, Y+1	; 0x01
     672:	28 2f       	mov	r18, r24
     674:	30 e0       	ldi	r19, 0x00	; 0
     676:	3b 83       	std	Y+3, r19	; 0x03
     678:	2a 83       	std	Y+2, r18	; 0x02
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	9b 81       	ldd	r25, Y+3	; 0x03
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	91 05       	cpc	r25, r1
     682:	09 f4       	brne	.+2      	; 0x686 <Timer0_Start+0x30>
     684:	40 c0       	rjmp	.+128    	; 0x706 <Timer0_Start+0xb0>
     686:	2a 81       	ldd	r18, Y+2	; 0x02
     688:	3b 81       	ldd	r19, Y+3	; 0x03
     68a:	24 30       	cpi	r18, 0x04	; 4
     68c:	31 05       	cpc	r19, r1
     68e:	7c f4       	brge	.+30     	; 0x6ae <Timer0_Start+0x58>
     690:	8a 81       	ldd	r24, Y+2	; 0x02
     692:	9b 81       	ldd	r25, Y+3	; 0x03
     694:	81 30       	cpi	r24, 0x01	; 1
     696:	91 05       	cpc	r25, r1
     698:	31 f1       	breq	.+76     	; 0x6e6 <Timer0_Start+0x90>
     69a:	2a 81       	ldd	r18, Y+2	; 0x02
     69c:	3b 81       	ldd	r19, Y+3	; 0x03
     69e:	22 30       	cpi	r18, 0x02	; 2
     6a0:	31 05       	cpc	r19, r1
     6a2:	4c f5       	brge	.+82     	; 0x6f6 <Timer0_Start+0xa0>
     6a4:	8a 81       	ldd	r24, Y+2	; 0x02
     6a6:	9b 81       	ldd	r25, Y+3	; 0x03
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	b1 f0       	breq	.+44     	; 0x6d8 <Timer0_Start+0x82>
     6ac:	53 c0       	rjmp	.+166    	; 0x754 <Timer0_Start+0xfe>
     6ae:	2a 81       	ldd	r18, Y+2	; 0x02
     6b0:	3b 81       	ldd	r19, Y+3	; 0x03
     6b2:	25 30       	cpi	r18, 0x05	; 5
     6b4:	31 05       	cpc	r19, r1
     6b6:	b9 f1       	breq	.+110    	; 0x726 <Timer0_Start+0xd0>
     6b8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ba:	9b 81       	ldd	r25, Y+3	; 0x03
     6bc:	85 30       	cpi	r24, 0x05	; 5
     6be:	91 05       	cpc	r25, r1
     6c0:	54 f1       	brlt	.+84     	; 0x716 <Timer0_Start+0xc0>
     6c2:	2a 81       	ldd	r18, Y+2	; 0x02
     6c4:	3b 81       	ldd	r19, Y+3	; 0x03
     6c6:	26 30       	cpi	r18, 0x06	; 6
     6c8:	31 05       	cpc	r19, r1
     6ca:	a9 f1       	breq	.+106    	; 0x736 <Timer0_Start+0xe0>
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	9b 81       	ldd	r25, Y+3	; 0x03
     6d0:	87 30       	cpi	r24, 0x07	; 7
     6d2:	91 05       	cpc	r25, r1
     6d4:	c1 f1       	breq	.+112    	; 0x746 <Timer0_Start+0xf0>
     6d6:	3e c0       	rjmp	.+124    	; 0x754 <Timer0_Start+0xfe>

	case TIMER0_Stop_:

		TIMER0_TCCR0_REG |= Timer0_Stopped;
     6d8:	e3 e5       	ldi	r30, 0x53	; 83
     6da:	f0 e0       	ldi	r31, 0x00	; 0
     6dc:	a3 e5       	ldi	r26, 0x53	; 83
     6de:	b0 e0       	ldi	r27, 0x00	; 0
     6e0:	8c 91       	ld	r24, X
     6e2:	80 83       	st	Z, r24
     6e4:	37 c0       	rjmp	.+110    	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_None_:

		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
     6e6:	a3 e5       	ldi	r26, 0x53	; 83
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	e3 e5       	ldi	r30, 0x53	; 83
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	81 60       	ori	r24, 0x01	; 1
     6f2:	8c 93       	st	X, r24
     6f4:	2f c0       	rjmp	.+94     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_8_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
     6f6:	a3 e5       	ldi	r26, 0x53	; 83
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e3 e5       	ldi	r30, 0x53	; 83
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	82 60       	ori	r24, 0x02	; 2
     702:	8c 93       	st	X, r24
     704:	27 c0       	rjmp	.+78     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_64_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
     706:	a3 e5       	ldi	r26, 0x53	; 83
     708:	b0 e0       	ldi	r27, 0x00	; 0
     70a:	e3 e5       	ldi	r30, 0x53	; 83
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	83 60       	ori	r24, 0x03	; 3
     712:	8c 93       	st	X, r24
     714:	1f c0       	rjmp	.+62     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_256_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
     716:	a3 e5       	ldi	r26, 0x53	; 83
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	e3 e5       	ldi	r30, 0x53	; 83
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	84 60       	ori	r24, 0x04	; 4
     722:	8c 93       	st	X, r24
     724:	17 c0       	rjmp	.+46     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_1024_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_1024;
     726:	a3 e5       	ldi	r26, 0x53	; 83
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e3 e5       	ldi	r30, 0x53	; 83
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	85 60       	ori	r24, 0x05	; 5
     732:	8c 93       	st	X, r24
     734:	0f c0       	rjmp	.+30     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Falling_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
     736:	a3 e5       	ldi	r26, 0x53	; 83
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e3 e5       	ldi	r30, 0x53	; 83
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	86 60       	ori	r24, 0x06	; 6
     742:	8c 93       	st	X, r24
     744:	07 c0       	rjmp	.+14     	; 0x754 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Rising_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Rising_Edge;
     746:	a3 e5       	ldi	r26, 0x53	; 83
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	e3 e5       	ldi	r30, 0x53	; 83
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	87 60       	ori	r24, 0x07	; 7
     752:	8c 93       	st	X, r24
		break;
    }
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	cf 91       	pop	r28
     75c:	df 91       	pop	r29
     75e:	08 95       	ret

00000760 <Timer0_Stop>:


void Timer0_Stop(void){
     760:	df 93       	push	r29
     762:	cf 93       	push	r28
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0_REG |=Timer0_Stopped;
     768:	e3 e5       	ldi	r30, 0x53	; 83
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	a3 e5       	ldi	r26, 0x53	; 83
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	8c 91       	ld	r24, X
     772:	80 83       	st	Z, r24
}
     774:	cf 91       	pop	r28
     776:	df 91       	pop	r29
     778:	08 95       	ret

0000077a <Timer0_EnableInterrupt>:


void Timer0_EnableInterrupt(void){
     77a:	df 93       	push	r29
     77c:	cf 93       	push	r28
     77e:	cd b7       	in	r28, 0x3d	; 61
     780:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     782:	af e5       	ldi	r26, 0x5F	; 95
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	ef e5       	ldi	r30, 0x5F	; 95
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	80 68       	ori	r24, 0x80	; 128
     78e:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     790:	a9 e5       	ldi	r26, 0x59	; 89
     792:	b0 e0       	ldi	r27, 0x00	; 0
     794:	e9 e5       	ldi	r30, 0x59	; 89
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	80 81       	ld	r24, Z
     79a:	81 60       	ori	r24, 0x01	; 1
     79c:	8c 93       	st	X, r24
}
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <Timer0_DisableInterrupt>:


void Timer0_DisableInterrupt(void){
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	cd b7       	in	r28, 0x3d	; 61
     7aa:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7ac:	a9 e5       	ldi	r26, 0x59	; 89
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	e9 e5       	ldi	r30, 0x59	; 89
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	8e 7f       	andi	r24, 0xFE	; 254
     7b8:	8c 93       	st	X, r24
}
     7ba:	cf 91       	pop	r28
     7bc:	df 91       	pop	r29
     7be:	08 95       	ret

000007c0 <Enable_Gl_Int>:
 */

#include "../Inc/Glbl_Int.h"
#include "Std_Operations.h"

void Enable_Gl_Int(){
     7c0:	df 93       	push	r29
     7c2:	cf 93       	push	r28
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Enable;
    SET_BIT(Glbl_STATUS_REG,7);
     7c8:	af e5       	ldi	r26, 0x5F	; 95
     7ca:	b0 e0       	ldi	r27, 0x00	; 0
     7cc:	ef e5       	ldi	r30, 0x5F	; 95
     7ce:	f0 e0       	ldi	r31, 0x00	; 0
     7d0:	80 81       	ld	r24, Z
     7d2:	80 68       	ori	r24, 0x80	; 128
     7d4:	8c 93       	st	X, r24
}
     7d6:	cf 91       	pop	r28
     7d8:	df 91       	pop	r29
     7da:	08 95       	ret

000007dc <Disable_Gl_Int>:
void Disable_Gl_Int(){
     7dc:	df 93       	push	r29
     7de:	cf 93       	push	r28
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Disable;
	CLR_BIT(Glbl_STATUS_REG,7);
     7e4:	af e5       	ldi	r26, 0x5F	; 95
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	ef e5       	ldi	r30, 0x5F	; 95
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8f 77       	andi	r24, 0x7F	; 127
     7f0:	8c 93       	st	X, r24
}
     7f2:	cf 91       	pop	r28
     7f4:	df 91       	pop	r29
     7f6:	08 95       	ret

000007f8 <DIO_SET_PIN>:
#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     7f8:	df 93       	push	r29
     7fa:	cf 93       	push	r28
     7fc:	00 d0       	rcall	.+0      	; 0x7fe <DIO_SET_PIN+0x6>
     7fe:	00 d0       	rcall	.+0      	; 0x800 <DIO_SET_PIN+0x8>
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     808:	89 81       	ldd	r24, Y+1	; 0x01
     80a:	28 2f       	mov	r18, r24
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	3c 83       	std	Y+4, r19	; 0x04
     810:	2b 83       	std	Y+3, r18	; 0x03
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	9c 81       	ldd	r25, Y+4	; 0x04
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	91 05       	cpc	r25, r1
     81a:	49 f1       	breq	.+82     	; 0x86e <__stack+0xf>
     81c:	2b 81       	ldd	r18, Y+3	; 0x03
     81e:	3c 81       	ldd	r19, Y+4	; 0x04
     820:	22 30       	cpi	r18, 0x02	; 2
     822:	31 05       	cpc	r19, r1
     824:	2c f4       	brge	.+10     	; 0x830 <DIO_SET_PIN+0x38>
     826:	8b 81       	ldd	r24, Y+3	; 0x03
     828:	9c 81       	ldd	r25, Y+4	; 0x04
     82a:	00 97       	sbiw	r24, 0x00	; 0
     82c:	61 f0       	breq	.+24     	; 0x846 <DIO_SET_PIN+0x4e>
     82e:	5a c0       	rjmp	.+180    	; 0x8e4 <__stack+0x85>
     830:	2b 81       	ldd	r18, Y+3	; 0x03
     832:	3c 81       	ldd	r19, Y+4	; 0x04
     834:	22 30       	cpi	r18, 0x02	; 2
     836:	31 05       	cpc	r19, r1
     838:	71 f1       	breq	.+92     	; 0x896 <__stack+0x37>
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	83 30       	cpi	r24, 0x03	; 3
     840:	91 05       	cpc	r25, r1
     842:	e9 f1       	breq	.+122    	; 0x8be <__stack+0x5f>
     844:	4f c0       	rjmp	.+158    	; 0x8e4 <__stack+0x85>
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
     846:	ab e3       	ldi	r26, 0x3B	; 59
     848:	b0 e0       	ldi	r27, 0x00	; 0
     84a:	eb e3       	ldi	r30, 0x3B	; 59
     84c:	f0 e0       	ldi	r31, 0x00	; 0
     84e:	80 81       	ld	r24, Z
     850:	48 2f       	mov	r20, r24
     852:	8a 81       	ldd	r24, Y+2	; 0x02
     854:	28 2f       	mov	r18, r24
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	02 2e       	mov	r0, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <__stack+0x5>
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	0a 94       	dec	r0
     866:	e2 f7       	brpl	.-8      	; 0x860 <__stack+0x1>
     868:	84 2b       	or	r24, r20
     86a:	8c 93       	st	X, r24
     86c:	3b c0       	rjmp	.+118    	; 0x8e4 <__stack+0x85>
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
     86e:	a8 e3       	ldi	r26, 0x38	; 56
     870:	b0 e0       	ldi	r27, 0x00	; 0
     872:	e8 e3       	ldi	r30, 0x38	; 56
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	80 81       	ld	r24, Z
     878:	48 2f       	mov	r20, r24
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	28 2f       	mov	r18, r24
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	02 2e       	mov	r0, r18
     886:	02 c0       	rjmp	.+4      	; 0x88c <__stack+0x2d>
     888:	88 0f       	add	r24, r24
     88a:	99 1f       	adc	r25, r25
     88c:	0a 94       	dec	r0
     88e:	e2 f7       	brpl	.-8      	; 0x888 <__stack+0x29>
     890:	84 2b       	or	r24, r20
     892:	8c 93       	st	X, r24
     894:	27 c0       	rjmp	.+78     	; 0x8e4 <__stack+0x85>
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
     896:	a5 e3       	ldi	r26, 0x35	; 53
     898:	b0 e0       	ldi	r27, 0x00	; 0
     89a:	e5 e3       	ldi	r30, 0x35	; 53
     89c:	f0 e0       	ldi	r31, 0x00	; 0
     89e:	80 81       	ld	r24, Z
     8a0:	48 2f       	mov	r20, r24
     8a2:	8a 81       	ldd	r24, Y+2	; 0x02
     8a4:	28 2f       	mov	r18, r24
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	02 2e       	mov	r0, r18
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	0a 94       	dec	r0
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	84 2b       	or	r24, r20
     8ba:	8c 93       	st	X, r24
     8bc:	13 c0       	rjmp	.+38     	; 0x8e4 <__stack+0x85>
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
     8be:	a2 e3       	ldi	r26, 0x32	; 50
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e2 e3       	ldi	r30, 0x32	; 50
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	48 2f       	mov	r20, r24
     8ca:	8a 81       	ldd	r24, Y+2	; 0x02
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 2e       	mov	r0, r18
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	84 2b       	or	r24, r20
     8e2:	8c 93       	st	X, r24
		break;
	}
}
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	cf 91       	pop	r28
     8ee:	df 91       	pop	r29
     8f0:	08 95       	ret

000008f2 <DIO_CLEAR_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     8f2:	df 93       	push	r29
     8f4:	cf 93       	push	r28
     8f6:	00 d0       	rcall	.+0      	; 0x8f8 <DIO_CLEAR_PIN+0x6>
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <DIO_CLEAR_PIN+0x8>
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	89 83       	std	Y+1, r24	; 0x01
     900:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	28 2f       	mov	r18, r24
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	3c 83       	std	Y+4, r19	; 0x04
     90a:	2b 83       	std	Y+3, r18	; 0x03
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	91 05       	cpc	r25, r1
     914:	59 f1       	breq	.+86     	; 0x96c <DIO_CLEAR_PIN+0x7a>
     916:	2b 81       	ldd	r18, Y+3	; 0x03
     918:	3c 81       	ldd	r19, Y+4	; 0x04
     91a:	22 30       	cpi	r18, 0x02	; 2
     91c:	31 05       	cpc	r19, r1
     91e:	2c f4       	brge	.+10     	; 0x92a <DIO_CLEAR_PIN+0x38>
     920:	8b 81       	ldd	r24, Y+3	; 0x03
     922:	9c 81       	ldd	r25, Y+4	; 0x04
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	69 f0       	breq	.+26     	; 0x942 <DIO_CLEAR_PIN+0x50>
     928:	5f c0       	rjmp	.+190    	; 0x9e8 <DIO_CLEAR_PIN+0xf6>
     92a:	2b 81       	ldd	r18, Y+3	; 0x03
     92c:	3c 81       	ldd	r19, Y+4	; 0x04
     92e:	22 30       	cpi	r18, 0x02	; 2
     930:	31 05       	cpc	r19, r1
     932:	89 f1       	breq	.+98     	; 0x996 <DIO_CLEAR_PIN+0xa4>
     934:	8b 81       	ldd	r24, Y+3	; 0x03
     936:	9c 81       	ldd	r25, Y+4	; 0x04
     938:	83 30       	cpi	r24, 0x03	; 3
     93a:	91 05       	cpc	r25, r1
     93c:	09 f4       	brne	.+2      	; 0x940 <DIO_CLEAR_PIN+0x4e>
     93e:	40 c0       	rjmp	.+128    	; 0x9c0 <DIO_CLEAR_PIN+0xce>
     940:	53 c0       	rjmp	.+166    	; 0x9e8 <DIO_CLEAR_PIN+0xf6>
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
     942:	ab e3       	ldi	r26, 0x3B	; 59
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	eb e3       	ldi	r30, 0x3B	; 59
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	80 81       	ld	r24, Z
     94c:	48 2f       	mov	r20, r24
     94e:	8a 81       	ldd	r24, Y+2	; 0x02
     950:	28 2f       	mov	r18, r24
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 2e       	mov	r0, r18
     95a:	02 c0       	rjmp	.+4      	; 0x960 <DIO_CLEAR_PIN+0x6e>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	0a 94       	dec	r0
     962:	e2 f7       	brpl	.-8      	; 0x95c <DIO_CLEAR_PIN+0x6a>
     964:	80 95       	com	r24
     966:	84 23       	and	r24, r20
     968:	8c 93       	st	X, r24
     96a:	3e c0       	rjmp	.+124    	; 0x9e8 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
     96c:	a8 e3       	ldi	r26, 0x38	; 56
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	e8 e3       	ldi	r30, 0x38	; 56
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	48 2f       	mov	r20, r24
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	02 2e       	mov	r0, r18
     984:	02 c0       	rjmp	.+4      	; 0x98a <DIO_CLEAR_PIN+0x98>
     986:	88 0f       	add	r24, r24
     988:	99 1f       	adc	r25, r25
     98a:	0a 94       	dec	r0
     98c:	e2 f7       	brpl	.-8      	; 0x986 <DIO_CLEAR_PIN+0x94>
     98e:	80 95       	com	r24
     990:	84 23       	and	r24, r20
     992:	8c 93       	st	X, r24
     994:	29 c0       	rjmp	.+82     	; 0x9e8 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
     996:	a5 e3       	ldi	r26, 0x35	; 53
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e5 e3       	ldi	r30, 0x35	; 53
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	48 2f       	mov	r20, r24
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 2e       	mov	r0, r18
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <DIO_CLEAR_PIN+0xc2>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	0a 94       	dec	r0
     9b6:	e2 f7       	brpl	.-8      	; 0x9b0 <DIO_CLEAR_PIN+0xbe>
     9b8:	80 95       	com	r24
     9ba:	84 23       	and	r24, r20
     9bc:	8c 93       	st	X, r24
     9be:	14 c0       	rjmp	.+40     	; 0x9e8 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
     9c0:	a2 e3       	ldi	r26, 0x32	; 50
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	e2 e3       	ldi	r30, 0x32	; 50
     9c6:	f0 e0       	ldi	r31, 0x00	; 0
     9c8:	80 81       	ld	r24, Z
     9ca:	48 2f       	mov	r20, r24
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	02 2e       	mov	r0, r18
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <DIO_CLEAR_PIN+0xec>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	0a 94       	dec	r0
     9e0:	e2 f7       	brpl	.-8      	; 0x9da <DIO_CLEAR_PIN+0xe8>
     9e2:	80 95       	com	r24
     9e4:	84 23       	and	r24, r20
     9e6:	8c 93       	st	X, r24
		break;
	}
}
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <DIO_TOGGLE_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <DIO_TOGGLE_PIN+0x6>
     9fc:	00 d0       	rcall	.+0      	; 0x9fe <DIO_TOGGLE_PIN+0x8>
     9fe:	cd b7       	in	r28, 0x3d	; 61
     a00:	de b7       	in	r29, 0x3e	; 62
     a02:	89 83       	std	Y+1, r24	; 0x01
     a04:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	3c 83       	std	Y+4, r19	; 0x04
     a0e:	2b 83       	std	Y+3, r18	; 0x03
     a10:	8b 81       	ldd	r24, Y+3	; 0x03
     a12:	9c 81       	ldd	r25, Y+4	; 0x04
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	91 05       	cpc	r25, r1
     a18:	49 f1       	breq	.+82     	; 0xa6c <DIO_TOGGLE_PIN+0x76>
     a1a:	2b 81       	ldd	r18, Y+3	; 0x03
     a1c:	3c 81       	ldd	r19, Y+4	; 0x04
     a1e:	22 30       	cpi	r18, 0x02	; 2
     a20:	31 05       	cpc	r19, r1
     a22:	2c f4       	brge	.+10     	; 0xa2e <DIO_TOGGLE_PIN+0x38>
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	00 97       	sbiw	r24, 0x00	; 0
     a2a:	61 f0       	breq	.+24     	; 0xa44 <DIO_TOGGLE_PIN+0x4e>
     a2c:	5a c0       	rjmp	.+180    	; 0xae2 <DIO_TOGGLE_PIN+0xec>
     a2e:	2b 81       	ldd	r18, Y+3	; 0x03
     a30:	3c 81       	ldd	r19, Y+4	; 0x04
     a32:	22 30       	cpi	r18, 0x02	; 2
     a34:	31 05       	cpc	r19, r1
     a36:	71 f1       	breq	.+92     	; 0xa94 <DIO_TOGGLE_PIN+0x9e>
     a38:	8b 81       	ldd	r24, Y+3	; 0x03
     a3a:	9c 81       	ldd	r25, Y+4	; 0x04
     a3c:	83 30       	cpi	r24, 0x03	; 3
     a3e:	91 05       	cpc	r25, r1
     a40:	e9 f1       	breq	.+122    	; 0xabc <DIO_TOGGLE_PIN+0xc6>
     a42:	4f c0       	rjmp	.+158    	; 0xae2 <DIO_TOGGLE_PIN+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
     a44:	ab e3       	ldi	r26, 0x3B	; 59
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	eb e3       	ldi	r30, 0x3B	; 59
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	48 2f       	mov	r20, r24
     a50:	8a 81       	ldd	r24, Y+2	; 0x02
     a52:	28 2f       	mov	r18, r24
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	02 2e       	mov	r0, r18
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <DIO_TOGGLE_PIN+0x6c>
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	0a 94       	dec	r0
     a64:	e2 f7       	brpl	.-8      	; 0xa5e <DIO_TOGGLE_PIN+0x68>
     a66:	84 27       	eor	r24, r20
     a68:	8c 93       	st	X, r24
     a6a:	3b c0       	rjmp	.+118    	; 0xae2 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
     a6c:	a8 e3       	ldi	r26, 0x38	; 56
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e8 e3       	ldi	r30, 0x38	; 56
     a72:	f0 e0       	ldi	r31, 0x00	; 0
     a74:	80 81       	ld	r24, Z
     a76:	48 2f       	mov	r20, r24
     a78:	8a 81       	ldd	r24, Y+2	; 0x02
     a7a:	28 2f       	mov	r18, r24
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 2e       	mov	r0, r18
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_TOGGLE_PIN+0x94>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <DIO_TOGGLE_PIN+0x90>
     a8e:	84 27       	eor	r24, r20
     a90:	8c 93       	st	X, r24
     a92:	27 c0       	rjmp	.+78     	; 0xae2 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
     a94:	a5 e3       	ldi	r26, 0x35	; 53
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	e5 e3       	ldi	r30, 0x35	; 53
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	48 2f       	mov	r20, r24
     aa0:	8a 81       	ldd	r24, Y+2	; 0x02
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 2e       	mov	r0, r18
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_TOGGLE_PIN+0xbc>
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	0a 94       	dec	r0
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_TOGGLE_PIN+0xb8>
     ab6:	84 27       	eor	r24, r20
     ab8:	8c 93       	st	X, r24
     aba:	13 c0       	rjmp	.+38     	; 0xae2 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
     abc:	a2 e3       	ldi	r26, 0x32	; 50
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e2 e3       	ldi	r30, 0x32	; 50
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	80 81       	ld	r24, Z
     ac6:	48 2f       	mov	r20, r24
     ac8:	8a 81       	ldd	r24, Y+2	; 0x02
     aca:	28 2f       	mov	r18, r24
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	02 2e       	mov	r0, r18
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_TOGGLE_PIN+0xe4>
     ad6:	88 0f       	add	r24, r24
     ad8:	99 1f       	adc	r25, r25
     ada:	0a 94       	dec	r0
     adc:	e2 f7       	brpl	.-8      	; 0xad6 <DIO_TOGGLE_PIN+0xe0>
     ade:	84 27       	eor	r24, r20
     ae0:	8c 93       	st	X, r24
		break;
	}
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	cf 91       	pop	r28
     aec:	df 91       	pop	r29
     aee:	08 95       	ret

00000af0 <DIO_ENABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     af0:	df 93       	push	r29
     af2:	cf 93       	push	r28
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <DIO_ENABLE_PULLUP+0x6>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <DIO_ENABLE_PULLUP+0x8>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	89 83       	std	Y+1, r24	; 0x01
     afe:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	28 2f       	mov	r18, r24
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	3c 83       	std	Y+4, r19	; 0x04
     b08:	2b 83       	std	Y+3, r18	; 0x03
     b0a:	4b 81       	ldd	r20, Y+3	; 0x03
     b0c:	5c 81       	ldd	r21, Y+4	; 0x04
     b0e:	41 30       	cpi	r20, 0x01	; 1
     b10:	51 05       	cpc	r21, r1
     b12:	09 f4       	brne	.+2      	; 0xb16 <DIO_ENABLE_PULLUP+0x26>
     b14:	40 c0       	rjmp	.+128    	; 0xb96 <DIO_ENABLE_PULLUP+0xa6>
     b16:	8b 81       	ldd	r24, Y+3	; 0x03
     b18:	9c 81       	ldd	r25, Y+4	; 0x04
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	91 05       	cpc	r25, r1
     b1e:	34 f4       	brge	.+12     	; 0xb2c <DIO_ENABLE_PULLUP+0x3c>
     b20:	2b 81       	ldd	r18, Y+3	; 0x03
     b22:	3c 81       	ldd	r19, Y+4	; 0x04
     b24:	21 15       	cp	r18, r1
     b26:	31 05       	cpc	r19, r1
     b28:	71 f0       	breq	.+28     	; 0xb46 <DIO_ENABLE_PULLUP+0x56>
     b2a:	aa c0       	rjmp	.+340    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
     b2c:	4b 81       	ldd	r20, Y+3	; 0x03
     b2e:	5c 81       	ldd	r21, Y+4	; 0x04
     b30:	42 30       	cpi	r20, 0x02	; 2
     b32:	51 05       	cpc	r21, r1
     b34:	09 f4       	brne	.+2      	; 0xb38 <DIO_ENABLE_PULLUP+0x48>
     b36:	57 c0       	rjmp	.+174    	; 0xbe6 <DIO_ENABLE_PULLUP+0xf6>
     b38:	8b 81       	ldd	r24, Y+3	; 0x03
     b3a:	9c 81       	ldd	r25, Y+4	; 0x04
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	91 05       	cpc	r25, r1
     b40:	09 f4       	brne	.+2      	; 0xb44 <DIO_ENABLE_PULLUP+0x54>
     b42:	78 c0       	rjmp	.+240    	; 0xc34 <DIO_ENABLE_PULLUP+0x144>
     b44:	9d c0       	rjmp	.+314    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     b46:	ea e3       	ldi	r30, 0x3A	; 58
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	80 81       	ld	r24, Z
     b4c:	28 2f       	mov	r18, r24
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	88 2f       	mov	r24, r24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a9 01       	movw	r20, r18
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_ENABLE_PULLUP+0x6e>
     b5a:	55 95       	asr	r21
     b5c:	47 95       	ror	r20
     b5e:	8a 95       	dec	r24
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_ENABLE_PULLUP+0x6a>
     b62:	ca 01       	movw	r24, r20
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	90 70       	andi	r25, 0x00	; 0
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	09 f0       	breq	.+2      	; 0xb6e <DIO_ENABLE_PULLUP+0x7e>
     b6c:	89 c0       	rjmp	.+274    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTA_REG,pin);
     b6e:	ab e3       	ldi	r26, 0x3B	; 59
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	48 2f       	mov	r20, r24
     b7a:	8a 81       	ldd	r24, Y+2	; 0x02
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	02 2e       	mov	r0, r18
     b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_ENABLE_PULLUP+0x9c>
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	0a 94       	dec	r0
     b8e:	e2 f7       	brpl	.-8      	; 0xb88 <DIO_ENABLE_PULLUP+0x98>
     b90:	84 2b       	or	r24, r20
     b92:	8c 93       	st	X, r24
     b94:	75 c0       	rjmp	.+234    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     b96:	e7 e3       	ldi	r30, 0x37	; 55
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	28 2f       	mov	r18, r24
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	8a 81       	ldd	r24, Y+2	; 0x02
     ba2:	88 2f       	mov	r24, r24
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	a9 01       	movw	r20, r18
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <DIO_ENABLE_PULLUP+0xbe>
     baa:	55 95       	asr	r21
     bac:	47 95       	ror	r20
     bae:	8a 95       	dec	r24
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <DIO_ENABLE_PULLUP+0xba>
     bb2:	ca 01       	movw	r24, r20
     bb4:	81 70       	andi	r24, 0x01	; 1
     bb6:	90 70       	andi	r25, 0x00	; 0
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	09 f0       	breq	.+2      	; 0xbbe <DIO_ENABLE_PULLUP+0xce>
     bbc:	61 c0       	rjmp	.+194    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTB_REG,pin);
     bbe:	a8 e3       	ldi	r26, 0x38	; 56
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 e3       	ldi	r30, 0x38	; 56
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	48 2f       	mov	r20, r24
     bca:	8a 81       	ldd	r24, Y+2	; 0x02
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	02 2e       	mov	r0, r18
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_ENABLE_PULLUP+0xec>
     bd8:	88 0f       	add	r24, r24
     bda:	99 1f       	adc	r25, r25
     bdc:	0a 94       	dec	r0
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_ENABLE_PULLUP+0xe8>
     be0:	84 2b       	or	r24, r20
     be2:	8c 93       	st	X, r24
     be4:	4d c0       	rjmp	.+154    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     be6:	e4 e3       	ldi	r30, 0x34	; 52
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	88 2f       	mov	r24, r24
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <DIO_ENABLE_PULLUP+0x10e>
     bfa:	55 95       	asr	r21
     bfc:	47 95       	ror	r20
     bfe:	8a 95       	dec	r24
     c00:	e2 f7       	brpl	.-8      	; 0xbfa <DIO_ENABLE_PULLUP+0x10a>
     c02:	ca 01       	movw	r24, r20
     c04:	81 70       	andi	r24, 0x01	; 1
     c06:	90 70       	andi	r25, 0x00	; 0
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f5       	brne	.+116    	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTC_REG,pin);
     c0c:	a5 e3       	ldi	r26, 0x35	; 53
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e5 e3       	ldi	r30, 0x35	; 53
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <DIO_ENABLE_PULLUP+0x13a>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <DIO_ENABLE_PULLUP+0x136>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	26 c0       	rjmp	.+76     	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     c34:	e1 e3       	ldi	r30, 0x31	; 49
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	28 2f       	mov	r18, r24
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <DIO_ENABLE_PULLUP+0x15c>
     c48:	55 95       	asr	r21
     c4a:	47 95       	ror	r20
     c4c:	8a 95       	dec	r24
     c4e:	e2 f7       	brpl	.-8      	; 0xc48 <DIO_ENABLE_PULLUP+0x158>
     c50:	ca 01       	movw	r24, r20
     c52:	81 70       	andi	r24, 0x01	; 1
     c54:	90 70       	andi	r25, 0x00	; 0
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	99 f4       	brne	.+38     	; 0xc80 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTD_REG,pin);
     c5a:	a2 e3       	ldi	r26, 0x32	; 50
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	e2 e3       	ldi	r30, 0x32	; 50
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	8a 81       	ldd	r24, Y+2	; 0x02
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	02 2e       	mov	r0, r18
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <DIO_ENABLE_PULLUP+0x188>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	0a 94       	dec	r0
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <DIO_ENABLE_PULLUP+0x184>
     c7c:	84 2b       	or	r24, r20
     c7e:	8c 93       	st	X, r24
		break;
	}
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	cf 91       	pop	r28
     c8a:	df 91       	pop	r29
     c8c:	08 95       	ret

00000c8e <DIO_DISABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_DISABLE_PULLUP+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_DISABLE_PULLUP+0x8>
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
     c9c:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     c9e:	89 81       	ldd	r24, Y+1	; 0x01
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	3c 83       	std	Y+4, r19	; 0x04
     ca6:	2b 83       	std	Y+3, r18	; 0x03
     ca8:	4b 81       	ldd	r20, Y+3	; 0x03
     caa:	5c 81       	ldd	r21, Y+4	; 0x04
     cac:	41 30       	cpi	r20, 0x01	; 1
     cae:	51 05       	cpc	r21, r1
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <DIO_DISABLE_PULLUP+0x26>
     cb2:	41 c0       	rjmp	.+130    	; 0xd36 <DIO_DISABLE_PULLUP+0xa8>
     cb4:	8b 81       	ldd	r24, Y+3	; 0x03
     cb6:	9c 81       	ldd	r25, Y+4	; 0x04
     cb8:	82 30       	cpi	r24, 0x02	; 2
     cba:	91 05       	cpc	r25, r1
     cbc:	34 f4       	brge	.+12     	; 0xcca <DIO_DISABLE_PULLUP+0x3c>
     cbe:	2b 81       	ldd	r18, Y+3	; 0x03
     cc0:	3c 81       	ldd	r19, Y+4	; 0x04
     cc2:	21 15       	cp	r18, r1
     cc4:	31 05       	cpc	r19, r1
     cc6:	71 f0       	breq	.+28     	; 0xce4 <DIO_DISABLE_PULLUP+0x56>
     cc8:	ae c0       	rjmp	.+348    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
     cca:	4b 81       	ldd	r20, Y+3	; 0x03
     ccc:	5c 81       	ldd	r21, Y+4	; 0x04
     cce:	42 30       	cpi	r20, 0x02	; 2
     cd0:	51 05       	cpc	r21, r1
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <DIO_DISABLE_PULLUP+0x48>
     cd4:	59 c0       	rjmp	.+178    	; 0xd88 <DIO_DISABLE_PULLUP+0xfa>
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	9c 81       	ldd	r25, Y+4	; 0x04
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <DIO_DISABLE_PULLUP+0x54>
     ce0:	7b c0       	rjmp	.+246    	; 0xdd8 <DIO_DISABLE_PULLUP+0x14a>
     ce2:	a1 c0       	rjmp	.+322    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     ce4:	ea e3       	ldi	r30, 0x3A	; 58
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	28 2f       	mov	r18, r24
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	a9 01       	movw	r20, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_DISABLE_PULLUP+0x6e>
     cf8:	55 95       	asr	r21
     cfa:	47 95       	ror	r20
     cfc:	8a 95       	dec	r24
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_DISABLE_PULLUP+0x6a>
     d00:	ca 01       	movw	r24, r20
     d02:	81 70       	andi	r24, 0x01	; 1
     d04:	90 70       	andi	r25, 0x00	; 0
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	09 f0       	breq	.+2      	; 0xd0c <DIO_DISABLE_PULLUP+0x7e>
     d0a:	8d c0       	rjmp	.+282    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTA_REG,pin);
     d0c:	ab e3       	ldi	r26, 0x3B	; 59
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	eb e3       	ldi	r30, 0x3B	; 59
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_DISABLE_PULLUP+0x9c>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_DISABLE_PULLUP+0x98>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	78 c0       	rjmp	.+240    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     d36:	e7 e3       	ldi	r30, 0x37	; 55
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a9 01       	movw	r20, r18
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <DIO_DISABLE_PULLUP+0xc0>
     d4a:	55 95       	asr	r21
     d4c:	47 95       	ror	r20
     d4e:	8a 95       	dec	r24
     d50:	e2 f7       	brpl	.-8      	; 0xd4a <DIO_DISABLE_PULLUP+0xbc>
     d52:	ca 01       	movw	r24, r20
     d54:	81 70       	andi	r24, 0x01	; 1
     d56:	90 70       	andi	r25, 0x00	; 0
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	09 f0       	breq	.+2      	; 0xd5e <DIO_DISABLE_PULLUP+0xd0>
     d5c:	64 c0       	rjmp	.+200    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTB_REG,pin);
     d5e:	a8 e3       	ldi	r26, 0x38	; 56
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e8 e3       	ldi	r30, 0x38	; 56
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_DISABLE_PULLUP+0xee>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_DISABLE_PULLUP+0xea>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
     d86:	4f c0       	rjmp	.+158    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     d88:	e4 e3       	ldi	r30, 0x34	; 52
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	88 2f       	mov	r24, r24
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_DISABLE_PULLUP+0x112>
     d9c:	55 95       	asr	r21
     d9e:	47 95       	ror	r20
     da0:	8a 95       	dec	r24
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_DISABLE_PULLUP+0x10e>
     da4:	ca 01       	movw	r24, r20
     da6:	81 70       	andi	r24, 0x01	; 1
     da8:	90 70       	andi	r25, 0x00	; 0
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	e1 f5       	brne	.+120    	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTC_REG,pin);
     dae:	a5 e3       	ldi	r26, 0x35	; 53
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e5 e3       	ldi	r30, 0x35	; 53
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_DISABLE_PULLUP+0x13e>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_DISABLE_PULLUP+0x13a>
     dd0:	80 95       	com	r24
     dd2:	84 23       	and	r24, r20
     dd4:	8c 93       	st	X, r24
     dd6:	27 c0       	rjmp	.+78     	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     dd8:	e1 e3       	ldi	r30, 0x31	; 49
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	28 2f       	mov	r18, r24
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	88 2f       	mov	r24, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a9 01       	movw	r20, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_DISABLE_PULLUP+0x162>
     dec:	55 95       	asr	r21
     dee:	47 95       	ror	r20
     df0:	8a 95       	dec	r24
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_DISABLE_PULLUP+0x15e>
     df4:	ca 01       	movw	r24, r20
     df6:	81 70       	andi	r24, 0x01	; 1
     df8:	90 70       	andi	r25, 0x00	; 0
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	a1 f4       	brne	.+40     	; 0xe26 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTD_REG,pin);
     dfe:	a2 e3       	ldi	r26, 0x32	; 50
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e2 e3       	ldi	r30, 0x32	; 50
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_DISABLE_PULLUP+0x18e>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_DISABLE_PULLUP+0x18a>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
		break;
	}
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <DIO_READ_LEVEL>:
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <DIO_READ_LEVEL+0x6>
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <DIO_READ_LEVEL+0x8>
     e3c:	0f 92       	push	r0
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
     e42:	89 83       	std	Y+1, r24	; 0x01
     e44:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3d 83       	std	Y+5, r19	; 0x05
     e4e:	2c 83       	std	Y+4, r18	; 0x04
     e50:	4c 81       	ldd	r20, Y+4	; 0x04
     e52:	5d 81       	ldd	r21, Y+5	; 0x05
     e54:	41 30       	cpi	r20, 0x01	; 1
     e56:	51 05       	cpc	r21, r1
     e58:	49 f1       	breq	.+82     	; 0xeac <DIO_READ_LEVEL+0x78>
     e5a:	8c 81       	ldd	r24, Y+4	; 0x04
     e5c:	9d 81       	ldd	r25, Y+5	; 0x05
     e5e:	82 30       	cpi	r24, 0x02	; 2
     e60:	91 05       	cpc	r25, r1
     e62:	34 f4       	brge	.+12     	; 0xe70 <DIO_READ_LEVEL+0x3c>
     e64:	2c 81       	ldd	r18, Y+4	; 0x04
     e66:	3d 81       	ldd	r19, Y+5	; 0x05
     e68:	21 15       	cp	r18, r1
     e6a:	31 05       	cpc	r19, r1
     e6c:	61 f0       	breq	.+24     	; 0xe86 <DIO_READ_LEVEL+0x52>
     e6e:	57 c0       	rjmp	.+174    	; 0xf1e <DIO_READ_LEVEL+0xea>
     e70:	4c 81       	ldd	r20, Y+4	; 0x04
     e72:	5d 81       	ldd	r21, Y+5	; 0x05
     e74:	42 30       	cpi	r20, 0x02	; 2
     e76:	51 05       	cpc	r21, r1
     e78:	61 f1       	breq	.+88     	; 0xed2 <DIO_READ_LEVEL+0x9e>
     e7a:	8c 81       	ldd	r24, Y+4	; 0x04
     e7c:	9d 81       	ldd	r25, Y+5	; 0x05
     e7e:	83 30       	cpi	r24, 0x03	; 3
     e80:	91 05       	cpc	r25, r1
     e82:	d1 f1       	breq	.+116    	; 0xef8 <DIO_READ_LEVEL+0xc4>
     e84:	4c c0       	rjmp	.+152    	; 0xf1e <DIO_READ_LEVEL+0xea>
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
     e86:	e9 e3       	ldi	r30, 0x39	; 57
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	88 2f       	mov	r24, r24
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a9 01       	movw	r20, r18
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <DIO_READ_LEVEL+0x6a>
     e9a:	55 95       	asr	r21
     e9c:	47 95       	ror	r20
     e9e:	8a 95       	dec	r24
     ea0:	e2 f7       	brpl	.-8      	; 0xe9a <DIO_READ_LEVEL+0x66>
     ea2:	ca 01       	movw	r24, r20
     ea4:	58 2f       	mov	r21, r24
     ea6:	51 70       	andi	r21, 0x01	; 1
     ea8:	5b 83       	std	Y+3, r21	; 0x03
     eaa:	3a c0       	rjmp	.+116    	; 0xf20 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
     eac:	e6 e3       	ldi	r30, 0x36	; 54
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a9 01       	movw	r20, r18
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <DIO_READ_LEVEL+0x90>
     ec0:	55 95       	asr	r21
     ec2:	47 95       	ror	r20
     ec4:	8a 95       	dec	r24
     ec6:	e2 f7       	brpl	.-8      	; 0xec0 <DIO_READ_LEVEL+0x8c>
     ec8:	ca 01       	movw	r24, r20
     eca:	58 2f       	mov	r21, r24
     ecc:	51 70       	andi	r21, 0x01	; 1
     ece:	5b 83       	std	Y+3, r21	; 0x03
     ed0:	27 c0       	rjmp	.+78     	; 0xf20 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
     ed2:	e3 e3       	ldi	r30, 0x33	; 51
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a9 01       	movw	r20, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_READ_LEVEL+0xb6>
     ee6:	55 95       	asr	r21
     ee8:	47 95       	ror	r20
     eea:	8a 95       	dec	r24
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_READ_LEVEL+0xb2>
     eee:	ca 01       	movw	r24, r20
     ef0:	58 2f       	mov	r21, r24
     ef2:	51 70       	andi	r21, 0x01	; 1
     ef4:	5b 83       	std	Y+3, r21	; 0x03
     ef6:	14 c0       	rjmp	.+40     	; 0xf20 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
     ef8:	e0 e3       	ldi	r30, 0x30	; 48
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	8a 81       	ldd	r24, Y+2	; 0x02
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	a9 01       	movw	r20, r18
     f0a:	02 c0       	rjmp	.+4      	; 0xf10 <DIO_READ_LEVEL+0xdc>
     f0c:	55 95       	asr	r21
     f0e:	47 95       	ror	r20
     f10:	8a 95       	dec	r24
     f12:	e2 f7       	brpl	.-8      	; 0xf0c <DIO_READ_LEVEL+0xd8>
     f14:	ca 01       	movw	r24, r20
     f16:	58 2f       	mov	r21, r24
     f18:	51 70       	andi	r21, 0x01	; 1
     f1a:	5b 83       	std	Y+3, r21	; 0x03
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <DIO_READ_LEVEL+0xec>
		break;
	}
	return 0;
     f1e:	1b 82       	std	Y+3, r1	; 0x03
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <DIO_WRITE_STATUS>:
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <DIO_WRITE_STATUS+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <DIO_WRITE_STATUS+0x8>
     f3a:	0f 92       	push	r0
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	6a 83       	std	Y+2, r22	; 0x02
     f44:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	3d 83       	std	Y+5, r19	; 0x05
     f4e:	2c 83       	std	Y+4, r18	; 0x04
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	9d 81       	ldd	r25, Y+5	; 0x05
     f54:	81 30       	cpi	r24, 0x01	; 1
     f56:	91 05       	cpc	r25, r1
     f58:	09 f4       	brne	.+2      	; 0xf5c <DIO_WRITE_STATUS+0x2a>
     f5a:	43 c0       	rjmp	.+134    	; 0xfe2 <DIO_WRITE_STATUS+0xb0>
     f5c:	2c 81       	ldd	r18, Y+4	; 0x04
     f5e:	3d 81       	ldd	r19, Y+5	; 0x05
     f60:	22 30       	cpi	r18, 0x02	; 2
     f62:	31 05       	cpc	r19, r1
     f64:	2c f4       	brge	.+10     	; 0xf70 <DIO_WRITE_STATUS+0x3e>
     f66:	8c 81       	ldd	r24, Y+4	; 0x04
     f68:	9d 81       	ldd	r25, Y+5	; 0x05
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	71 f0       	breq	.+28     	; 0xf8a <DIO_WRITE_STATUS+0x58>
     f6e:	bc c0       	rjmp	.+376    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
     f70:	2c 81       	ldd	r18, Y+4	; 0x04
     f72:	3d 81       	ldd	r19, Y+5	; 0x05
     f74:	22 30       	cpi	r18, 0x02	; 2
     f76:	31 05       	cpc	r19, r1
     f78:	09 f4       	brne	.+2      	; 0xf7c <DIO_WRITE_STATUS+0x4a>
     f7a:	5f c0       	rjmp	.+190    	; 0x103a <DIO_WRITE_STATUS+0x108>
     f7c:	8c 81       	ldd	r24, Y+4	; 0x04
     f7e:	9d 81       	ldd	r25, Y+5	; 0x05
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	91 05       	cpc	r25, r1
     f84:	09 f4       	brne	.+2      	; 0xf88 <DIO_WRITE_STATUS+0x56>
     f86:	85 c0       	rjmp	.+266    	; 0x1092 <DIO_WRITE_STATUS+0x160>
     f88:	af c0       	rjmp	.+350    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
	case DIO_PORTA:
		if (direction==OTUPUT)
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	a1 f4       	brne	.+40     	; 0xfb8 <DIO_WRITE_STATUS+0x86>
			SET_BIT(DDRA_REG,pin);
     f90:	aa e3       	ldi	r26, 0x3A	; 58
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	ea e3       	ldi	r30, 0x3A	; 58
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_WRITE_STATUS+0x7c>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_WRITE_STATUS+0x78>
     fb2:	84 2b       	or	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	98 c0       	rjmp	.+304    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRA_REG,pin);
     fb8:	aa e3       	ldi	r26, 0x3A	; 58
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_WRITE_STATUS+0xa4>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_WRITE_STATUS+0xa0>
     fda:	80 95       	com	r24
     fdc:	84 23       	and	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	83 c0       	rjmp	.+262    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTB:
		if (direction==OTUPUT)
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	81 30       	cpi	r24, 0x01	; 1
     fe6:	a1 f4       	brne	.+40     	; 0x1010 <DIO_WRITE_STATUS+0xde>
			SET_BIT(DDRB_REG,pin);
     fe8:	a7 e3       	ldi	r26, 0x37	; 55
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e7 e3       	ldi	r30, 0x37	; 55
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_WRITE_STATUS+0xd4>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_WRITE_STATUS+0xd0>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	6c c0       	rjmp	.+216    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRB_REG,pin);
    1010:	a7 e3       	ldi	r26, 0x37	; 55
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e7 e3       	ldi	r30, 0x37	; 55
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_WRITE_STATUS+0xfc>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_WRITE_STATUS+0xf8>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	57 c0       	rjmp	.+174    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTC:
		if (direction==OTUPUT)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	81 30       	cpi	r24, 0x01	; 1
    103e:	a1 f4       	brne	.+40     	; 0x1068 <DIO_WRITE_STATUS+0x136>
			SET_BIT(DDRC_REG,pin);
    1040:	a4 e3       	ldi	r26, 0x34	; 52
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e4 e3       	ldi	r30, 0x34	; 52
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_WRITE_STATUS+0x12c>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_WRITE_STATUS+0x128>
    1062:	84 2b       	or	r24, r20
    1064:	8c 93       	st	X, r24
    1066:	40 c0       	rjmp	.+128    	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRC_REG,pin);
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <DIO_WRITE_STATUS+0x154>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <DIO_WRITE_STATUS+0x150>
    108a:	80 95       	com	r24
    108c:	84 23       	and	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	2b c0       	rjmp	.+86     	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTD:
		if (direction==OTUPUT)
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	81 30       	cpi	r24, 0x01	; 1
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <DIO_WRITE_STATUS+0x18e>
			SET_BIT(DDRD_REG,pin);
    1098:	a1 e3       	ldi	r26, 0x31	; 49
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e1 e3       	ldi	r30, 0x31	; 49
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_WRITE_STATUS+0x184>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_WRITE_STATUS+0x180>
    10ba:	84 2b       	or	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRD_REG,pin);
    10c0:	a1 e3       	ldi	r26, 0x31	; 49
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_WRITE_STATUS+0x1ac>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_WRITE_STATUS+0x1a8>
    10e2:	80 95       	com	r24
    10e4:	84 23       	and	r24, r20
    10e6:	8c 93       	st	X, r24
		break;
	}
}
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <LED_Init>:
#include "LED.h"

void LED_Init(void){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OTUPUT);
    1100:	82 e0       	ldi	r24, 0x02	; 2
    1102:	67 e0       	ldi	r22, 0x07	; 7
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
}
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <LED_ON>:

void LED_ON(void){
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
    1118:	82 e0       	ldi	r24, 0x02	; 2
    111a:	67 e0       	ldi	r22, 0x07	; 7
    111c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_SET_PIN>
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <LED_OFF>:

void LED_OFF(void){
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
    112e:	82 e0       	ldi	r24, 0x02	; 2
    1130:	67 e0       	ldi	r22, 0x07	; 7
    1132:	0e 94 79 04 	call	0x8f2	; 0x8f2 <DIO_CLEAR_PIN>
}
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <LED_TOGGLE>:

void LED_TOGGLE(void){
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
    1144:	82 e0       	ldi	r24, 0x02	; 2
    1146:	67 e0       	ldi	r22, 0x07	; 7
    1148:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <DIO_TOGGLE_PIN>
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <Heater_Init>:
#include "Heater.h"

void Heater_Init(){
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OTUPUT);
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	64 e0       	ldi	r22, 0x04	; 4
    115e:	41 e0       	ldi	r20, 0x01	; 1
    1160:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <Heater_ON>:

void Heater_ON(){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Heater_Port, Heater_Pin);
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	64 e0       	ldi	r22, 0x04	; 4
    1176:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_SET_PIN>
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <Heater_OFF>:
void Heater_OFF(){
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	64 e0       	ldi	r22, 0x04	; 4
    118c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <DIO_CLEAR_PIN>
	LED_OFF();
    1190:	0e 94 93 08 	call	0x1126	; 0x1126 <LED_OFF>
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <Cooler_Init>:
#include "Cooler.h"

void Cooler_Init(){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OTUPUT);
    11a2:	82 e0       	ldi	r24, 0x02	; 2
    11a4:	64 e0       	ldi	r22, 0x04	; 4
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <Cooler_ON>:
void Cooler_ON(){
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	64 e0       	ldi	r22, 0x04	; 4
    11be:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <DIO_SET_PIN>
	LED_ON();
    11c2:	0e 94 88 08 	call	0x1110	; 0x1110 <LED_ON>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <Cooler_OFF>:
void Cooler_OFF(){
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	64 e0       	ldi	r22, 0x04	; 4
    11d8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <DIO_CLEAR_PIN>
	LED_OFF();
    11dc:	0e 94 93 08 	call	0x1126	; 0x1126 <LED_OFF>
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Button_Init>:
#include "Button.h"

void Button_Init(Button_ID Button){
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <Button_Init+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	3b 83       	std	Y+3, r19	; 0x03
    11fc:	2a 83       	std	Y+2, r18	; 0x02
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	9b 81       	ldd	r25, Y+3	; 0x03
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	91 05       	cpc	r25, r1
    1206:	79 f0       	breq	.+30     	; 0x1226 <Button_Init+0x40>
    1208:	2a 81       	ldd	r18, Y+2	; 0x02
    120a:	3b 81       	ldd	r19, Y+3	; 0x03
    120c:	22 30       	cpi	r18, 0x02	; 2
    120e:	31 05       	cpc	r19, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <Button_Init+0x4c>
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	89 f4       	brne	.+34     	; 0x123c <Button_Init+0x56>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
    1224:	0b c0       	rjmp	.+22     	; 0x123c <Button_Init+0x56>
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	64 e0       	ldi	r22, 0x04	; 4
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
    1230:	05 c0       	rjmp	.+10     	; 0x123c <Button_Init+0x56>
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	62 e0       	ldi	r22, 0x02	; 2
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	0e 94 99 07 	call	0xf32	; 0xf32 <DIO_WRITE_STATUS>
				break;
		}
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <Button_READ>:
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <Button_READ+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <Button_READ+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	8a 83       	std	Y+2, r24	; 0x02
	Buttom_Status result;
	switch(Button){
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	3c 83       	std	Y+4, r19	; 0x04
    125e:	2b 83       	std	Y+3, r18	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	79 f0       	breq	.+30     	; 0x1288 <Button_READ+0x40>
    126a:	2b 81       	ldd	r18, Y+3	; 0x03
    126c:	3c 81       	ldd	r19, Y+4	; 0x04
    126e:	22 30       	cpi	r18, 0x02	; 2
    1270:	31 05       	cpc	r19, r1
    1272:	81 f0       	breq	.+32     	; 0x1294 <Button_READ+0x4c>
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	89 f4       	brne	.+34     	; 0x129e <Button_READ+0x56>
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_READ_LEVEL>
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	0b c0       	rjmp	.+22     	; 0x129e <Button_READ+0x56>
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	64 e0       	ldi	r22, 0x04	; 4
    128c:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_READ_LEVEL>
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	05 c0       	rjmp	.+10     	; 0x129e <Button_READ+0x56>
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
    1294:	83 e0       	ldi	r24, 0x03	; 3
    1296:	62 e0       	ldi	r22, 0x02	; 2
    1298:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_READ_LEVEL>
    129c:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return result;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	cf 91       	pop	r28
    12aa:	df 91       	pop	r29
    12ac:	08 95       	ret

000012ae <Button_Pullup_Enable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
    12ae:	df 93       	push	r29
    12b0:	cf 93       	push	r28
    12b2:	00 d0       	rcall	.+0      	; 0x12b4 <Button_Pullup_Enable+0x6>
    12b4:	0f 92       	push	r0
    12b6:	cd b7       	in	r28, 0x3d	; 61
    12b8:	de b7       	in	r29, 0x3e	; 62
    12ba:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3b 83       	std	Y+3, r19	; 0x03
    12c4:	2a 83       	std	Y+2, r18	; 0x02
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	71 f0       	breq	.+28     	; 0x12ec <Button_Pullup_Enable+0x3e>
    12d0:	2a 81       	ldd	r18, Y+2	; 0x02
    12d2:	3b 81       	ldd	r19, Y+3	; 0x03
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	71 f0       	breq	.+28     	; 0x12f6 <Button_Pullup_Enable+0x48>
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	71 f4       	brne	.+28     	; 0x12fe <Button_Pullup_Enable+0x50>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	60 e0       	ldi	r22, 0x00	; 0
    12e6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_ENABLE_PULLUP>
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	64 e0       	ldi	r22, 0x04	; 4
    12f0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_ENABLE_PULLUP>
    12f4:	04 c0       	rjmp	.+8      	; 0x12fe <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
    12f6:	83 e0       	ldi	r24, 0x03	; 3
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	0e 94 78 05 	call	0xaf0	; 0xaf0 <DIO_ENABLE_PULLUP>
				break;
		}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <Button_Pullup_Disable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	00 d0       	rcall	.+0      	; 0x1310 <Button_Pullup_Disable+0x6>
    1310:	0f 92       	push	r0
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3b 83       	std	Y+3, r19	; 0x03
    1320:	2a 83       	std	Y+2, r18	; 0x02
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	9b 81       	ldd	r25, Y+3	; 0x03
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	91 05       	cpc	r25, r1
    132a:	71 f0       	breq	.+28     	; 0x1348 <Button_Pullup_Disable+0x3e>
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	22 30       	cpi	r18, 0x02	; 2
    1332:	31 05       	cpc	r19, r1
    1334:	71 f0       	breq	.+28     	; 0x1352 <Button_Pullup_Disable+0x48>
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	9b 81       	ldd	r25, Y+3	; 0x03
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	71 f4       	brne	.+28     	; 0x135a <Button_Pullup_Disable+0x50>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_DISABLE_PULLUP>
    1346:	09 c0       	rjmp	.+18     	; 0x135a <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	64 e0       	ldi	r22, 0x04	; 4
    134c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_DISABLE_PULLUP>
    1350:	04 c0       	rjmp	.+8      	; 0x135a <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
    1352:	83 e0       	ldi	r24, 0x03	; 3
    1354:	62 e0       	ldi	r22, 0x02	; 2
    1356:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_DISABLE_PULLUP>
				break;
		}
}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <main>:
#include "Main_Types.h"
#include "Services.h"
//#include "util/delay.h"


int main (){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <main+0x6>
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Timer0_Init();
    1370:	0e 94 16 03 	call	0x62c	; 0x62c <Timer0_Init>
	Timer1_Init();
    1374:	0e 94 38 02 	call	0x470	; 0x470 <Timer1_Init>
	Timer2_Init();
    1378:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Timer2_Init>
	Heater_Init();
    137c:	0e 94 a9 08 	call	0x1152	; 0x1152 <Heater_Init>
	Cooler_Init();
    1380:	0e 94 cd 08 	call	0x119a	; 0x119a <Cooler_Init>
	//	TempSen_Init();
	//	SSD_Init();
	Button_Init(BUTTON0);
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Button_Init>
	Button_Init(BUTTON1);
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Button_Init>
	Button_Init(BUTTON2);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <Button_Init>
	LED_Init();
    1396:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
    139a:	19 82       	std	Y+1, r1	; 0x01
	ButtonEnable = TRUE;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 6e 00 	sts	0x006E, r24
	Mode = Temp_Control;
    13a2:	10 92 6d 00 	sts	0x006D, r1
	Curr_Temp = 0;
    13a6:	10 92 6a 00 	sts	0x006A, r1
	Restore_Temp();
    13aa:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Restore_Temp>
	Update_Temp_En = TRUE;
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	80 93 6b 00 	sts	0x006B, r24
	Blink_Status = FALSE;
    13b4:	10 92 69 00 	sts	0x0069, r1
	Timer2_Start(TIMER2_1024_);
    13b8:	87 e0       	ldi	r24, 0x07	; 7
    13ba:	0e 94 83 01 	call	0x306	; 0x306 <Timer2_Start>
	Timer2_EnableInterrupt();
    13be:	0e 94 15 02 	call	0x42a	; 0x42a <Timer2_EnableInterrupt>



		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	0e 94 24 09 	call	0x1248	; 0x1248 <Button_READ>
    13c8:	88 23       	and	r24, r24
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <main+0x82>
			if(ButtonEnable == TRUE){
    13cc:	80 91 6e 00 	lds	r24, 0x006E
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	41 f4       	brne	.+16     	; 0x13e4 <main+0x7e>
				SystemStatus = !SystemStatus;
    13d4:	1a 82       	std	Y+2, r1	; 0x02
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	88 23       	and	r24, r24
    13da:	11 f4       	brne	.+4      	; 0x13e0 <main+0x7a>
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
			}
			Debounce_Handler();
    13e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Debounce_Handler>
		}

		if(SystemStatus==OFF){
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	88 23       	and	r24, r24
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <main+0x92>
			Heater_OFF();
    13ee:	0e 94 c0 08 	call	0x1180	; 0x1180 <Heater_OFF>
			Cooler_OFF();
    13f2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Cooler_OFF>
    13f6:	e5 cf       	rjmp	.-54     	; 0x13c2 <main+0x5c>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
    13f8:	80 91 6b 00 	lds	r24, 0x006B
    13fc:	81 30       	cpi	r24, 0x01	; 1
    13fe:	11 f4       	brne	.+4      	; 0x1404 <main+0x9e>
			Update_Temp();
    1400:	0e 94 88 00 	call	0x110	; 0x110 <Update_Temp>
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	0e 94 24 09 	call	0x1248	; 0x1248 <Button_READ>
    140a:	88 23       	and	r24, r24
    140c:	29 f4       	brne	.+10     	; 0x1418 <main+0xb2>
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	0e 94 24 09 	call	0x1248	; 0x1248 <Button_READ>
    1414:	88 23       	and	r24, r24
    1416:	e9 f0       	breq	.+58     	; 0x1452 <main+0xec>
			if(ButtonEnable == TRUE){
    1418:	80 91 6e 00 	lds	r24, 0x006E
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	b9 f4       	brne	.+46     	; 0x144e <main+0xe8>

				Mode_Handler();
    1420:	0e 94 1b 01 	call	0x236	; 0x236 <Mode_Handler>
				Mode = Temp_Set;
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	80 93 6d 00 	sts	0x006D, r24

				if(Button_READ(BUTTON0)){
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	0e 94 24 09 	call	0x1248	; 0x1248 <Button_READ>
    1430:	88 23       	and	r24, r24
    1432:	31 f0       	breq	.+12     	; 0x1440 <main+0xda>
					Des_Temp +=5;
    1434:	80 91 6c 00 	lds	r24, 0x006C
    1438:	8b 5f       	subi	r24, 0xFB	; 251
    143a:	80 93 6c 00 	sts	0x006C, r24
    143e:	05 c0       	rjmp	.+10     	; 0x144a <main+0xe4>
				}else{
					Des_Temp -=5;
    1440:	80 91 6c 00 	lds	r24, 0x006C
    1444:	85 50       	subi	r24, 0x05	; 5
    1446:	80 93 6c 00 	sts	0x006C, r24
				}
				Store_Temp();
    144a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Store_Temp>

			}
			Debounce_Handler();
    144e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
    1452:	80 91 6d 00 	lds	r24, 0x006D
    1456:	88 23       	and	r24, r24
    1458:	69 f0       	breq	.+26     	; 0x1474 <main+0x10e>
			//SSD_Display(Des_Temp);
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
    145a:	80 91 6d 00 	lds	r24, 0x006D
    145e:	81 30       	cpi	r24, 0x01	; 1
    1460:	39 f4       	brne	.+14     	; 0x1470 <main+0x10a>
    1462:	80 91 69 00 	lds	r24, 0x0069
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	19 f4       	brne	.+6      	; 0x1470 <main+0x10a>
			//SSD_Display(Curr_Temp);
			LED_ON();
    146a:	0e 94 88 08 	call	0x1110	; 0x1110 <LED_ON>
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <main+0x10e>
		}else{
			LED_OFF();
    1470:	0e 94 93 08 	call	0x1126	; 0x1126 <LED_OFF>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
    1474:	80 91 6a 00 	lds	r24, 0x006A
    1478:	88 2f       	mov	r24, r24
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9c 01       	movw	r18, r24
    147e:	2b 5f       	subi	r18, 0xFB	; 251
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	80 91 6c 00 	lds	r24, 0x006C
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	64 f4       	brge	.+24     	; 0x14a8 <main+0x142>
			Heater_ON();
    1490:	0e 94 b5 08 	call	0x116a	; 0x116a <Heater_ON>
			if(Blink_Status==TRUE){
    1494:	80 91 69 00 	lds	r24, 0x0069
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	19 f4       	brne	.+6      	; 0x14a2 <main+0x13c>
				LED_ON();
    149c:	0e 94 88 08 	call	0x1110	; 0x1110 <LED_ON>
    14a0:	90 cf       	rjmp	.-224    	; 0x13c2 <main+0x5c>
			}else{
				LED_OFF();
    14a2:	0e 94 93 08 	call	0x1126	; 0x1126 <LED_OFF>
    14a6:	8d cf       	rjmp	.-230    	; 0x13c2 <main+0x5c>
			}
		}else if((Curr_Temp-5)>Des_Temp){
    14a8:	80 91 6a 00 	lds	r24, 0x006A
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 01       	movw	r18, r24
    14b2:	25 50       	subi	r18, 0x05	; 5
    14b4:	30 40       	sbci	r19, 0x00	; 0
    14b6:	80 91 6c 00 	lds	r24, 0x006C
    14ba:	88 2f       	mov	r24, r24
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	82 17       	cp	r24, r18
    14c0:	93 07       	cpc	r25, r19
    14c2:	1c f4       	brge	.+6      	; 0x14ca <main+0x164>
			Cooler_ON();
    14c4:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Cooler_ON>
    14c8:	7c cf       	rjmp	.-264    	; 0x13c2 <main+0x5c>
		}else{
			Cooler_OFF();
    14ca:	0e 94 e6 08 	call	0x11cc	; 0x11cc <Cooler_OFF>
			Heater_OFF();
    14ce:	0e 94 c0 08 	call	0x1180	; 0x1180 <Heater_OFF>
    14d2:	77 cf       	rjmp	.-274    	; 0x13c2 <main+0x5c>

000014d4 <__udivmodqi4>:
    14d4:	99 1b       	sub	r25, r25
    14d6:	79 e0       	ldi	r23, 0x09	; 9
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__udivmodqi4_ep>

000014da <__udivmodqi4_loop>:
    14da:	99 1f       	adc	r25, r25
    14dc:	96 17       	cp	r25, r22
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <__udivmodqi4_ep>
    14e0:	96 1b       	sub	r25, r22

000014e2 <__udivmodqi4_ep>:
    14e2:	88 1f       	adc	r24, r24
    14e4:	7a 95       	dec	r23
    14e6:	c9 f7       	brne	.-14     	; 0x14da <__udivmodqi4_loop>
    14e8:	80 95       	com	r24
    14ea:	08 95       	ret

000014ec <_exit>:
    14ec:	f8 94       	cli

000014ee <__stop_program>:
    14ee:	ff cf       	rjmp	.-2      	; 0x14ee <__stop_program>
