
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001732  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001732  000017c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  000017c8  2**0
                  ALLOC
  3 .stab         00002e50  00000000  00000000  000017c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b91  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 40 01 	jmp	0x280	; 0x280 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e3       	ldi	r30, 0x32	; 50
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 0a 	call	0x157a	; 0x157a <main>
      8a:	0c 94 97 0b 	jmp	0x172e	; 0x172e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	df 93       	push	r29
      a0:	cf 93       	push	r28
      a2:	cd b7       	in	r28, 0x3d	; 61
      a4:	de b7       	in	r29, 0x3e	; 62
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 6c 00 	sts	0x006C, r24
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	8f 91       	pop	r24
      b2:	0f 90       	pop	r0
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	0f 90       	pop	r0
      b8:	1f 90       	pop	r1
      ba:	18 95       	reti

000000bc <Calc_Average>:

ISR (TIMER2_OVF_vect){
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <Calc_Average+0x6>
      c2:	0f 92       	push	r0
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
	u8 result = 0;
      c8:	1b 82       	std	Y+3, r1	; 0x03
	for(int i=0;i<5;i++){
      ca:	1a 82       	std	Y+2, r1	; 0x02
      cc:	19 82       	std	Y+1, r1	; 0x01
      ce:	0e c0       	rjmp	.+28     	; 0xec <Calc_Average+0x30>
		result+=Temp_arr[i];
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	9a 81       	ldd	r25, Y+2	; 0x02
      d4:	fc 01       	movw	r30, r24
      d6:	ed 59       	subi	r30, 0x9D	; 157
      d8:	ff 4f       	sbci	r31, 0xFF	; 255
      da:	90 81       	ld	r25, Z
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	89 0f       	add	r24, r25
      e0:	8b 83       	std	Y+3, r24	; 0x03
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
	u8 result = 0;
	for(int i=0;i<5;i++){
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	9a 81       	ldd	r25, Y+2	; 0x02
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	9a 83       	std	Y+2, r25	; 0x02
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	85 30       	cpi	r24, 0x05	; 5
      f2:	91 05       	cpc	r25, r1
      f4:	6c f3       	brlt	.-38     	; 0xd0 <Calc_Average+0x14>
		result+=Temp_arr[i];
	}
	result /=5;
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	95 e0       	ldi	r25, 0x05	; 5
      fa:	69 2f       	mov	r22, r25
      fc:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__udivmodqi4>
     100:	8b 83       	std	Y+3, r24	; 0x03
	return result;
     102:	8b 81       	ldd	r24, Y+3	; 0x03
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <Update_Temp>:

void Update_Temp(void){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	00 d0       	rcall	.+0      	; 0x116 <Update_Temp+0x6>
     116:	00 d0       	rcall	.+0      	; 0x118 <Update_Temp+0x8>
     118:	0f 92       	push	r0
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     11e:	80 91 62 00 	lds	r24, 0x0062
     122:	8d 30       	cpi	r24, 0x0D	; 13
     124:	09 f0       	breq	.+2      	; 0x128 <Update_Temp+0x18>
     126:	3f c0       	rjmp	.+126    	; 0x1a6 <Update_Temp+0x96>
		Timer2_Stop();
     128:	0e 94 26 02 	call	0x44c	; 0x44c <Timer2_Stop>
		Blink_Status = !Blink_Status;
     12c:	80 91 6a 00 	lds	r24, 0x006A
     130:	1d 82       	std	Y+5, r1	; 0x05
     132:	88 23       	and	r24, r24
     134:	11 f4       	brne	.+4      	; 0x13a <Update_Temp+0x2a>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	8d 81       	ldd	r24, Y+5	; 0x05
     13c:	80 93 6a 00 	sts	0x006A, r24
		u8 Temp = 0/*TempSen_Read()*/;
     140:	1c 82       	std	Y+4, r1	; 0x04
		u8 Var1 = Temp_arr[0];
     142:	80 91 63 00 	lds	r24, 0x0063
     146:	8b 83       	std	Y+3, r24	; 0x03
		for(int i=0;i<4;i++){
     148:	1a 82       	std	Y+2, r1	; 0x02
     14a:	19 82       	std	Y+1, r1	; 0x01
     14c:	20 c0       	rjmp	.+64     	; 0x18e <Update_Temp+0x7e>
			if(i==0){
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	41 f4       	brne	.+16     	; 0x166 <Update_Temp+0x56>
				Temp_arr[i] = Temp;
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	fc 01       	movw	r30, r24
     15c:	ed 59       	subi	r30, 0x9D	; 157
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	8c 81       	ldd	r24, Y+4	; 0x04
     162:	80 83       	st	Z, r24
     164:	0f c0       	rjmp	.+30     	; 0x184 <Update_Temp+0x74>
			}
			else{
				Temp_arr[i] = Var1;
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	fc 01       	movw	r30, r24
     16c:	ed 59       	subi	r30, 0x9D	; 157
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	80 83       	st	Z, r24
				Var1 = Temp_arr[i+1];
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	fc 01       	movw	r30, r24
     17c:	ed 59       	subi	r30, 0x9D	; 157
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 81       	ld	r24, Z
     182:	8b 83       	std	Y+3, r24	; 0x03
	if(Counter==13){
		Timer2_Stop();
		Blink_Status = !Blink_Status;
		u8 Temp = 0/*TempSen_Read()*/;
		u8 Var1 = Temp_arr[0];
		for(int i=0;i<4;i++){
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	84 30       	cpi	r24, 0x04	; 4
     194:	91 05       	cpc	r25, r1
     196:	dc f2       	brlt	.-74     	; 0x14e <Update_Temp+0x3e>
			else{
				Temp_arr[i] = Var1;
				Var1 = Temp_arr[i+1];
			}
		}
		Curr_Temp=Calc_Average();
     198:	0e 94 5e 00 	call	0xbc	; 0xbc <Calc_Average>
     19c:	80 93 6b 00 	sts	0x006B, r24
		Counter=0;
     1a0:	10 92 62 00 	sts	0x0062, r1
     1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <Update_Temp+0xa6>
	}
	else{
		Counter++;
     1a6:	80 91 62 00 	lds	r24, 0x0062
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 62 00 	sts	0x0062, r24
		Timer2_Start(TIMER2_1024_);
     1b0:	87 e0       	ldi	r24, 0x07	; 7
     1b2:	0e 94 a1 01 	call	0x342	; 0x342 <Timer2_Start>
	}
	Update_Temp_En =FALSE;
     1b6:	10 92 6c 00 	sts	0x006C, r1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	cf 91       	pop	r28
     1c6:	df 91       	pop	r29
     1c8:	08 95       	ret

000001ca <Store_Temp>:
#include "Store_Temp.h"


void Store_Temp(void){
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
//	EEPROM_Write((u16)1,Des_Temp);
}
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <Restore_Temp>:
#include "Restore_Temp.h"

static u8 CHK = 0b01010101;


void Restore_Temp(void){
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Restore_Temp+0x6>
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	u8 Reading=0;
     1e4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Add=0;
     1e6:	1a 82       	std	Y+2, r1	; 0x02
     1e8:	19 82       	std	Y+1, r1	; 0x01

	//Reading = EEPROM_Read(Add);
	if (Reading == CHK){
     1ea:	90 91 60 00 	lds	r25, 0x0060
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	89 17       	cp	r24, r25
     1f2:	19 f4       	brne	.+6      	; 0x1fa <Restore_Temp+0x22>
		Des_Temp = 0/*EEPROM_Read(Add+1)*/;
     1f4:	10 92 6d 00 	sts	0x006D, r1
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <Restore_Temp+0x28>
	}
	else{
		//EEPROM_Write(Add,CHK);
		//EEPROM_Write(Add+1,(u8)default_Temp);
		Des_Temp = default_Temp;
     1fa:	8c e3       	ldi	r24, 0x3C	; 60
     1fc:	80 93 6d 00 	sts	0x006D, r24
	}
}
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <__vector_9>:
#include "Mode_Handler.h"



ISR(TIMER1_OVF_vect){
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	2f 93       	push	r18
     218:	3f 93       	push	r19
     21a:	4f 93       	push	r20
     21c:	5f 93       	push	r21
     21e:	6f 93       	push	r22
     220:	7f 93       	push	r23
     222:	8f 93       	push	r24
     224:	9f 93       	push	r25
     226:	af 93       	push	r26
     228:	bf 93       	push	r27
     22a:	ef 93       	push	r30
     22c:	ff 93       	push	r31
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	Mode = Temp_Control;
     236:	10 92 6e 00 	sts	0x006E, r1
	Timer1_Stop();
     23a:	0e 94 04 03 	call	0x608	; 0x608 <Timer1_Stop>
	Timer1_DisableInterrupt();
     23e:	0e 94 26 03 	call	0x64c	; 0x64c <Timer1_DisableInterrupt>
}
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	ff 91       	pop	r31
     248:	ef 91       	pop	r30
     24a:	bf 91       	pop	r27
     24c:	af 91       	pop	r26
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	7f 91       	pop	r23
     254:	6f 91       	pop	r22
     256:	5f 91       	pop	r21
     258:	4f 91       	pop	r20
     25a:	3f 91       	pop	r19
     25c:	2f 91       	pop	r18
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <Mode_Handler>:

void Mode_Handler(void){
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	Timer1_Start(TIMER1_1024_);
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	0e 94 79 02 	call	0x4f2	; 0x4f2 <Timer1_Start>
	Timer1_EnableInterrupt();
     276:	0e 94 11 03 	call	0x622	; 0x622 <Timer1_EnableInterrupt>
}
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <__vector_11>:
#include "Debounce_Handler.h"

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
     280:	1f 92       	push	r1
     282:	0f 92       	push	r0
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	0f 92       	push	r0
     288:	11 24       	eor	r1, r1
     28a:	2f 93       	push	r18
     28c:	3f 93       	push	r19
     28e:	4f 93       	push	r20
     290:	5f 93       	push	r21
     292:	6f 93       	push	r22
     294:	7f 93       	push	r23
     296:	8f 93       	push	r24
     298:	9f 93       	push	r25
     29a:	af 93       	push	r26
     29c:	bf 93       	push	r27
     29e:	ef 93       	push	r30
     2a0:	ff 93       	push	r31
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     2aa:	80 91 68 00 	lds	r24, 0x0068
     2ae:	8d 30       	cpi	r24, 0x0D	; 13
     2b0:	51 f4       	brne	.+20     	; 0x2c6 <__vector_11+0x46>
		ButtonEnable = TRUE;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	80 93 6f 00 	sts	0x006F, r24
		Timer0_Stop();
     2b8:	0e 94 ce 03 	call	0x79c	; 0x79c <Timer0_Stop>
		Timer0_DisableInterrupt();
     2bc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <Timer0_DisableInterrupt>
		Counter = 0;
     2c0:	10 92 68 00 	sts	0x0068, r1
     2c4:	08 c0       	rjmp	.+16     	; 0x2d6 <__vector_11+0x56>
	}
	else{
		Counter++;
     2c6:	80 91 68 00 	lds	r24, 0x0068
     2ca:	8f 5f       	subi	r24, 0xFF	; 255
     2cc:	80 93 68 00 	sts	0x0068, r24
		Timer0_Start(TIMER0_1024_);
     2d0:	85 e0       	ldi	r24, 0x05	; 5
     2d2:	0e 94 49 03 	call	0x692	; 0x692 <Timer0_Start>
	}

}
     2d6:	cf 91       	pop	r28
     2d8:	df 91       	pop	r29
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <Debounce_Handler>:

void Debounce_Handler(void){
     2fc:	df 93       	push	r29
     2fe:	cf 93       	push	r28
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = FALSE;
     304:	10 92 6f 00 	sts	0x006F, r1
	Timer0_Start(TIMER0_1024_);
     308:	85 e0       	ldi	r24, 0x05	; 5
     30a:	0e 94 49 03 	call	0x692	; 0x692 <Timer0_Start>
	Timer0_EnableInterrupt();
     30e:	0e 94 db 03 	call	0x7b6	; 0x7b6 <Timer0_EnableInterrupt>
}
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <Timer2_Init>:


#include "Timer2.h"


void Timer2_Init(void){
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62

	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM20);
     320:	a5 e4       	ldi	r26, 0x45	; 69
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	e5 e4       	ldi	r30, 0x45	; 69
     326:	f0 e0       	ldi	r31, 0x00	; 0
     328:	80 81       	ld	r24, Z
     32a:	8f 7b       	andi	r24, 0xBF	; 191
     32c:	8c 93       	st	X, r24
	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM21);
     32e:	a5 e4       	ldi	r26, 0x45	; 69
     330:	b0 e0       	ldi	r27, 0x00	; 0
     332:	e5 e4       	ldi	r30, 0x45	; 69
     334:	f0 e0       	ldi	r31, 0x00	; 0
     336:	80 81       	ld	r24, Z
     338:	87 7f       	andi	r24, 0xF7	; 247
     33a:	8c 93       	st	X, r24
}
     33c:	cf 91       	pop	r28
     33e:	df 91       	pop	r29
     340:	08 95       	ret

00000342 <Timer2_Start>:


void Timer2_Start(TIMER2_PreScaler_ID prescaler){
     342:	df 93       	push	r29
     344:	cf 93       	push	r28
     346:	00 d0       	rcall	.+0      	; 0x348 <Timer2_Start+0x6>
     348:	0f 92       	push	r0
     34a:	cd b7       	in	r28, 0x3d	; 61
     34c:	de b7       	in	r29, 0x3e	; 62
     34e:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_TCNT2_REG |=0x00;  //Reset
     350:	a4 e4       	ldi	r26, 0x44	; 68
     352:	b0 e0       	ldi	r27, 0x00	; 0
     354:	e4 e4       	ldi	r30, 0x44	; 68
     356:	f0 e0       	ldi	r31, 0x00	; 0
     358:	80 81       	ld	r24, Z
     35a:	8c 93       	st	X, r24

	switch(prescaler){
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	28 2f       	mov	r18, r24
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	3b 83       	std	Y+3, r19	; 0x03
     364:	2a 83       	std	Y+2, r18	; 0x02
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	9b 81       	ldd	r25, Y+3	; 0x03
     36a:	83 30       	cpi	r24, 0x03	; 3
     36c:	91 05       	cpc	r25, r1
     36e:	09 f4       	brne	.+2      	; 0x372 <Timer2_Start+0x30>
     370:	40 c0       	rjmp	.+128    	; 0x3f2 <Timer2_Start+0xb0>
     372:	2a 81       	ldd	r18, Y+2	; 0x02
     374:	3b 81       	ldd	r19, Y+3	; 0x03
     376:	24 30       	cpi	r18, 0x04	; 4
     378:	31 05       	cpc	r19, r1
     37a:	7c f4       	brge	.+30     	; 0x39a <Timer2_Start+0x58>
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	91 05       	cpc	r25, r1
     384:	31 f1       	breq	.+76     	; 0x3d2 <Timer2_Start+0x90>
     386:	2a 81       	ldd	r18, Y+2	; 0x02
     388:	3b 81       	ldd	r19, Y+3	; 0x03
     38a:	22 30       	cpi	r18, 0x02	; 2
     38c:	31 05       	cpc	r19, r1
     38e:	4c f5       	brge	.+82     	; 0x3e2 <Timer2_Start+0xa0>
     390:	8a 81       	ldd	r24, Y+2	; 0x02
     392:	9b 81       	ldd	r25, Y+3	; 0x03
     394:	00 97       	sbiw	r24, 0x00	; 0
     396:	b1 f0       	breq	.+44     	; 0x3c4 <Timer2_Start+0x82>
     398:	53 c0       	rjmp	.+166    	; 0x440 <Timer2_Start+0xfe>
     39a:	2a 81       	ldd	r18, Y+2	; 0x02
     39c:	3b 81       	ldd	r19, Y+3	; 0x03
     39e:	25 30       	cpi	r18, 0x05	; 5
     3a0:	31 05       	cpc	r19, r1
     3a2:	b9 f1       	breq	.+110    	; 0x412 <Timer2_Start+0xd0>
     3a4:	8a 81       	ldd	r24, Y+2	; 0x02
     3a6:	9b 81       	ldd	r25, Y+3	; 0x03
     3a8:	85 30       	cpi	r24, 0x05	; 5
     3aa:	91 05       	cpc	r25, r1
     3ac:	54 f1       	brlt	.+84     	; 0x402 <Timer2_Start+0xc0>
     3ae:	2a 81       	ldd	r18, Y+2	; 0x02
     3b0:	3b 81       	ldd	r19, Y+3	; 0x03
     3b2:	26 30       	cpi	r18, 0x06	; 6
     3b4:	31 05       	cpc	r19, r1
     3b6:	a9 f1       	breq	.+106    	; 0x422 <Timer2_Start+0xe0>
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	87 30       	cpi	r24, 0x07	; 7
     3be:	91 05       	cpc	r25, r1
     3c0:	c1 f1       	breq	.+112    	; 0x432 <Timer2_Start+0xf0>
     3c2:	3e c0       	rjmp	.+124    	; 0x440 <Timer2_Start+0xfe>

	case TIMER2_Stop_:

		TIMER2_TCCR2_REG |= Timer2_Stopped;
     3c4:	e5 e4       	ldi	r30, 0x45	; 69
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	a5 e4       	ldi	r26, 0x45	; 69
     3ca:	b0 e0       	ldi	r27, 0x00	; 0
     3cc:	8c 91       	ld	r24, X
     3ce:	80 83       	st	Z, r24
     3d0:	37 c0       	rjmp	.+110    	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_None_:

		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
     3d2:	a5 e4       	ldi	r26, 0x45	; 69
     3d4:	b0 e0       	ldi	r27, 0x00	; 0
     3d6:	e5 e4       	ldi	r30, 0x45	; 69
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	81 60       	ori	r24, 0x01	; 1
     3de:	8c 93       	st	X, r24
     3e0:	2f c0       	rjmp	.+94     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_8_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
     3e2:	a5 e4       	ldi	r26, 0x45	; 69
     3e4:	b0 e0       	ldi	r27, 0x00	; 0
     3e6:	e5 e4       	ldi	r30, 0x45	; 69
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	80 81       	ld	r24, Z
     3ec:	82 60       	ori	r24, 0x02	; 2
     3ee:	8c 93       	st	X, r24
     3f0:	27 c0       	rjmp	.+78     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_32_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
     3f2:	a5 e4       	ldi	r26, 0x45	; 69
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	e5 e4       	ldi	r30, 0x45	; 69
     3f8:	f0 e0       	ldi	r31, 0x00	; 0
     3fa:	80 81       	ld	r24, Z
     3fc:	83 60       	ori	r24, 0x03	; 3
     3fe:	8c 93       	st	X, r24
     400:	1f c0       	rjmp	.+62     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_64_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
     402:	a5 e4       	ldi	r26, 0x45	; 69
     404:	b0 e0       	ldi	r27, 0x00	; 0
     406:	e5 e4       	ldi	r30, 0x45	; 69
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	80 81       	ld	r24, Z
     40c:	84 60       	ori	r24, 0x04	; 4
     40e:	8c 93       	st	X, r24
     410:	17 c0       	rjmp	.+46     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_128_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_128;
     412:	a5 e4       	ldi	r26, 0x45	; 69
     414:	b0 e0       	ldi	r27, 0x00	; 0
     416:	e5 e4       	ldi	r30, 0x45	; 69
     418:	f0 e0       	ldi	r31, 0x00	; 0
     41a:	80 81       	ld	r24, Z
     41c:	85 60       	ori	r24, 0x05	; 5
     41e:	8c 93       	st	X, r24
     420:	0f c0       	rjmp	.+30     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_256_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
     422:	a5 e4       	ldi	r26, 0x45	; 69
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e5 e4       	ldi	r30, 0x45	; 69
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	86 60       	ori	r24, 0x06	; 6
     42e:	8c 93       	st	X, r24
     430:	07 c0       	rjmp	.+14     	; 0x440 <Timer2_Start+0xfe>
		break;

	case TIMER2_1024_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_1024;
     432:	a5 e4       	ldi	r26, 0x45	; 69
     434:	b0 e0       	ldi	r27, 0x00	; 0
     436:	e5 e4       	ldi	r30, 0x45	; 69
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	80 81       	ld	r24, Z
     43c:	87 60       	ori	r24, 0x07	; 7
     43e:	8c 93       	st	X, r24
		break;
    }
}
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	0f 90       	pop	r0
     446:	cf 91       	pop	r28
     448:	df 91       	pop	r29
     44a:	08 95       	ret

0000044c <Timer2_Stop>:


void Timer2_Stop(void){
     44c:	df 93       	push	r29
     44e:	cf 93       	push	r28
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62

	TIMER2_TCCR2_REG |=Timer2_Stopped;
     454:	e5 e4       	ldi	r30, 0x45	; 69
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	a5 e4       	ldi	r26, 0x45	; 69
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	8c 91       	ld	r24, X
     45e:	80 83       	st	Z, r24
}
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <Timer2_EnableInterrupt>:


void Timer2_EnableInterrupt(void){
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     46e:	af e5       	ldi	r26, 0x5F	; 95
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	ef e5       	ldi	r30, 0x5F	; 95
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 68       	ori	r24, 0x80	; 128
     47a:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     47c:	a9 e5       	ldi	r26, 0x59	; 89
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e9 e5       	ldi	r30, 0x59	; 89
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	80 81       	ld	r24, Z
     486:	80 64       	ori	r24, 0x40	; 64
     488:	8c 93       	st	X, r24
}
     48a:	cf 91       	pop	r28
     48c:	df 91       	pop	r29
     48e:	08 95       	ret

00000490 <Timer2_DisableInterrupt>:


void Timer2_DisableInterrupt(void){
     490:	df 93       	push	r29
     492:	cf 93       	push	r28
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     498:	a9 e5       	ldi	r26, 0x59	; 89
     49a:	b0 e0       	ldi	r27, 0x00	; 0
     49c:	e9 e5       	ldi	r30, 0x59	; 89
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 81       	ld	r24, Z
     4a2:	8f 7b       	andi	r24, 0xBF	; 191
     4a4:	8c 93       	st	X, r24
}
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <Timer1_Init>:
 *      Author: Marina
 */

#include "Timer1.h"

void Timer1_Init(void){
     4ac:	df 93       	push	r29
     4ae:	cf 93       	push	r28
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62

	 //interval Mode
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM10);
     4b4:	af e4       	ldi	r26, 0x4F	; 79
     4b6:	b0 e0       	ldi	r27, 0x00	; 0
     4b8:	ef e4       	ldi	r30, 0x4F	; 79
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 81       	ld	r24, Z
     4be:	8e 7f       	andi	r24, 0xFE	; 254
     4c0:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM11);
     4c2:	af e4       	ldi	r26, 0x4F	; 79
     4c4:	b0 e0       	ldi	r27, 0x00	; 0
     4c6:	ef e4       	ldi	r30, 0x4F	; 79
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	8d 7f       	andi	r24, 0xFD	; 253
     4ce:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM12);
     4d0:	ae e4       	ldi	r26, 0x4E	; 78
     4d2:	b0 e0       	ldi	r27, 0x00	; 0
     4d4:	ee e4       	ldi	r30, 0x4E	; 78
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	87 7f       	andi	r24, 0xF7	; 247
     4dc:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM13);
     4de:	ae e4       	ldi	r26, 0x4E	; 78
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	ee e4       	ldi	r30, 0x4E	; 78
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	8f 7e       	andi	r24, 0xEF	; 239
     4ea:	8c 93       	st	X, r24
}
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	08 95       	ret

000004f2 <Timer1_Start>:


void Timer1_Start(TIMER1_PreScaler_ID prescaler){
     4f2:	df 93       	push	r29
     4f4:	cf 93       	push	r28
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <Timer1_Start+0x6>
     4f8:	0f 92       	push	r0
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	89 83       	std	Y+1, r24	; 0x01

	//Reset
	TIMER1_TCNT1H_REG |=0x00;
     500:	ad e4       	ldi	r26, 0x4D	; 77
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	ed e4       	ldi	r30, 0x4D	; 77
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	80 81       	ld	r24, Z
     50a:	8c 93       	st	X, r24
	TIMER1_TCNT1L_REG |=0x00;
     50c:	ac e4       	ldi	r26, 0x4C	; 76
     50e:	b0 e0       	ldi	r27, 0x00	; 0
     510:	ec e4       	ldi	r30, 0x4C	; 76
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	8c 93       	st	X, r24

	switch(prescaler){
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	3b 83       	std	Y+3, r19	; 0x03
     520:	2a 83       	std	Y+2, r18	; 0x02
     522:	8a 81       	ldd	r24, Y+2	; 0x02
     524:	9b 81       	ldd	r25, Y+3	; 0x03
     526:	83 30       	cpi	r24, 0x03	; 3
     528:	91 05       	cpc	r25, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <Timer1_Start+0x3c>
     52c:	40 c0       	rjmp	.+128    	; 0x5ae <Timer1_Start+0xbc>
     52e:	2a 81       	ldd	r18, Y+2	; 0x02
     530:	3b 81       	ldd	r19, Y+3	; 0x03
     532:	24 30       	cpi	r18, 0x04	; 4
     534:	31 05       	cpc	r19, r1
     536:	7c f4       	brge	.+30     	; 0x556 <Timer1_Start+0x64>
     538:	8a 81       	ldd	r24, Y+2	; 0x02
     53a:	9b 81       	ldd	r25, Y+3	; 0x03
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	91 05       	cpc	r25, r1
     540:	31 f1       	breq	.+76     	; 0x58e <Timer1_Start+0x9c>
     542:	2a 81       	ldd	r18, Y+2	; 0x02
     544:	3b 81       	ldd	r19, Y+3	; 0x03
     546:	22 30       	cpi	r18, 0x02	; 2
     548:	31 05       	cpc	r19, r1
     54a:	4c f5       	brge	.+82     	; 0x59e <Timer1_Start+0xac>
     54c:	8a 81       	ldd	r24, Y+2	; 0x02
     54e:	9b 81       	ldd	r25, Y+3	; 0x03
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	b1 f0       	breq	.+44     	; 0x580 <Timer1_Start+0x8e>
     554:	53 c0       	rjmp	.+166    	; 0x5fc <Timer1_Start+0x10a>
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	3b 81       	ldd	r19, Y+3	; 0x03
     55a:	25 30       	cpi	r18, 0x05	; 5
     55c:	31 05       	cpc	r19, r1
     55e:	b9 f1       	breq	.+110    	; 0x5ce <Timer1_Start+0xdc>
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	9b 81       	ldd	r25, Y+3	; 0x03
     564:	85 30       	cpi	r24, 0x05	; 5
     566:	91 05       	cpc	r25, r1
     568:	54 f1       	brlt	.+84     	; 0x5be <Timer1_Start+0xcc>
     56a:	2a 81       	ldd	r18, Y+2	; 0x02
     56c:	3b 81       	ldd	r19, Y+3	; 0x03
     56e:	26 30       	cpi	r18, 0x06	; 6
     570:	31 05       	cpc	r19, r1
     572:	a9 f1       	breq	.+106    	; 0x5de <Timer1_Start+0xec>
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	87 30       	cpi	r24, 0x07	; 7
     57a:	91 05       	cpc	r25, r1
     57c:	c1 f1       	breq	.+112    	; 0x5ee <Timer1_Start+0xfc>
     57e:	3e c0       	rjmp	.+124    	; 0x5fc <Timer1_Start+0x10a>

	case TIMER1_Stop_:

		TIMER1_TCCR1B_REG |= Timer1_Stopped;
     580:	ee e4       	ldi	r30, 0x4E	; 78
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	ae e4       	ldi	r26, 0x4E	; 78
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	8c 91       	ld	r24, X
     58a:	80 83       	st	Z, r24
     58c:	37 c0       	rjmp	.+110    	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_None_:

		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
     58e:	ae e4       	ldi	r26, 0x4E	; 78
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ee e4       	ldi	r30, 0x4E	; 78
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	81 60       	ori	r24, 0x01	; 1
     59a:	8c 93       	st	X, r24
     59c:	2f c0       	rjmp	.+94     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_8_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
     59e:	ae e4       	ldi	r26, 0x4E	; 78
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	ee e4       	ldi	r30, 0x4E	; 78
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	82 60       	ori	r24, 0x02	; 2
     5aa:	8c 93       	st	X, r24
     5ac:	27 c0       	rjmp	.+78     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_64_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
     5ae:	ae e4       	ldi	r26, 0x4E	; 78
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	ee e4       	ldi	r30, 0x4E	; 78
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	83 60       	ori	r24, 0x03	; 3
     5ba:	8c 93       	st	X, r24
     5bc:	1f c0       	rjmp	.+62     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_256_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
     5be:	ae e4       	ldi	r26, 0x4E	; 78
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	ee e4       	ldi	r30, 0x4E	; 78
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	80 81       	ld	r24, Z
     5c8:	84 60       	ori	r24, 0x04	; 4
     5ca:	8c 93       	st	X, r24
     5cc:	17 c0       	rjmp	.+46     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_1024_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_1024;
     5ce:	ae e4       	ldi	r26, 0x4E	; 78
     5d0:	b0 e0       	ldi	r27, 0x00	; 0
     5d2:	ee e4       	ldi	r30, 0x4E	; 78
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 81       	ld	r24, Z
     5d8:	85 60       	ori	r24, 0x05	; 5
     5da:	8c 93       	st	X, r24
     5dc:	0f c0       	rjmp	.+30     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_Ext_Falling_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
     5de:	ae e4       	ldi	r26, 0x4E	; 78
     5e0:	b0 e0       	ldi	r27, 0x00	; 0
     5e2:	ee e4       	ldi	r30, 0x4E	; 78
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	86 60       	ori	r24, 0x06	; 6
     5ea:	8c 93       	st	X, r24
     5ec:	07 c0       	rjmp	.+14     	; 0x5fc <Timer1_Start+0x10a>
		break;

	case TIMER1_Ext_Rising_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Rising_Edge;
     5ee:	ae e4       	ldi	r26, 0x4E	; 78
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	ee e4       	ldi	r30, 0x4E	; 78
     5f4:	f0 e0       	ldi	r31, 0x00	; 0
     5f6:	80 81       	ld	r24, Z
     5f8:	87 60       	ori	r24, 0x07	; 7
     5fa:	8c 93       	st	X, r24
		break;
    }
}
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	0f 90       	pop	r0
     602:	cf 91       	pop	r28
     604:	df 91       	pop	r29
     606:	08 95       	ret

00000608 <Timer1_Stop>:


void Timer1_Stop(void){
     608:	df 93       	push	r29
     60a:	cf 93       	push	r28
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62

	TIMER1_TCCR1B_REG |=Timer1_Stopped;
     610:	ee e4       	ldi	r30, 0x4E	; 78
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	ae e4       	ldi	r26, 0x4E	; 78
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	8c 91       	ld	r24, X
     61a:	80 83       	st	Z, r24
}
     61c:	cf 91       	pop	r28
     61e:	df 91       	pop	r29
     620:	08 95       	ret

00000622 <Timer1_EnableInterrupt>:


void Timer1_EnableInterrupt(void){
     622:	df 93       	push	r29
     624:	cf 93       	push	r28
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     62a:	af e5       	ldi	r26, 0x5F	; 95
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	ef e5       	ldi	r30, 0x5F	; 95
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	80 68       	ori	r24, 0x80	; 128
     636:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     638:	a9 e5       	ldi	r26, 0x59	; 89
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e9 e5       	ldi	r30, 0x59	; 89
     63e:	f0 e0       	ldi	r31, 0x00	; 0
     640:	80 81       	ld	r24, Z
     642:	84 60       	ori	r24, 0x04	; 4
     644:	8c 93       	st	X, r24
}
     646:	cf 91       	pop	r28
     648:	df 91       	pop	r29
     64a:	08 95       	ret

0000064c <Timer1_DisableInterrupt>:


void Timer1_DisableInterrupt(void){
     64c:	df 93       	push	r29
     64e:	cf 93       	push	r28
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     654:	a9 e5       	ldi	r26, 0x59	; 89
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	e9 e5       	ldi	r30, 0x59	; 89
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	8b 7f       	andi	r24, 0xFB	; 251
     660:	8c 93       	st	X, r24
}
     662:	cf 91       	pop	r28
     664:	df 91       	pop	r29
     666:	08 95       	ret

00000668 <Timer0_Init>:
 *      Author: Marina
 */
#include "Timer0.h"


void Timer0_Init(void){
     668:	df 93       	push	r29
     66a:	cf 93       	push	r28
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62

	//Interval Mode
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM00);
     670:	a3 e5       	ldi	r26, 0x53	; 83
     672:	b0 e0       	ldi	r27, 0x00	; 0
     674:	e3 e5       	ldi	r30, 0x53	; 83
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	8f 7b       	andi	r24, 0xBF	; 191
     67c:	8c 93       	st	X, r24
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM01);
     67e:	a3 e5       	ldi	r26, 0x53	; 83
     680:	b0 e0       	ldi	r27, 0x00	; 0
     682:	e3 e5       	ldi	r30, 0x53	; 83
     684:	f0 e0       	ldi	r31, 0x00	; 0
     686:	80 81       	ld	r24, Z
     688:	87 7f       	andi	r24, 0xF7	; 247
     68a:	8c 93       	st	X, r24

}
     68c:	cf 91       	pop	r28
     68e:	df 91       	pop	r29
     690:	08 95       	ret

00000692 <Timer0_Start>:


void Timer0_Start(TIMER0_PreScaler_ID prescaler){
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	00 d0       	rcall	.+0      	; 0x698 <Timer0_Start+0x6>
     698:	0f 92       	push	r0
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_TCNT0_REG |=0x00;  //Reset
     6a0:	a2 e5       	ldi	r26, 0x52	; 82
     6a2:	b0 e0       	ldi	r27, 0x00	; 0
     6a4:	e2 e5       	ldi	r30, 0x52	; 82
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	8c 93       	st	X, r24

	switch(prescaler){
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	28 2f       	mov	r18, r24
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	3b 83       	std	Y+3, r19	; 0x03
     6b4:	2a 83       	std	Y+2, r18	; 0x02
     6b6:	8a 81       	ldd	r24, Y+2	; 0x02
     6b8:	9b 81       	ldd	r25, Y+3	; 0x03
     6ba:	83 30       	cpi	r24, 0x03	; 3
     6bc:	91 05       	cpc	r25, r1
     6be:	09 f4       	brne	.+2      	; 0x6c2 <Timer0_Start+0x30>
     6c0:	40 c0       	rjmp	.+128    	; 0x742 <Timer0_Start+0xb0>
     6c2:	2a 81       	ldd	r18, Y+2	; 0x02
     6c4:	3b 81       	ldd	r19, Y+3	; 0x03
     6c6:	24 30       	cpi	r18, 0x04	; 4
     6c8:	31 05       	cpc	r19, r1
     6ca:	7c f4       	brge	.+30     	; 0x6ea <Timer0_Start+0x58>
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	9b 81       	ldd	r25, Y+3	; 0x03
     6d0:	81 30       	cpi	r24, 0x01	; 1
     6d2:	91 05       	cpc	r25, r1
     6d4:	31 f1       	breq	.+76     	; 0x722 <Timer0_Start+0x90>
     6d6:	2a 81       	ldd	r18, Y+2	; 0x02
     6d8:	3b 81       	ldd	r19, Y+3	; 0x03
     6da:	22 30       	cpi	r18, 0x02	; 2
     6dc:	31 05       	cpc	r19, r1
     6de:	4c f5       	brge	.+82     	; 0x732 <Timer0_Start+0xa0>
     6e0:	8a 81       	ldd	r24, Y+2	; 0x02
     6e2:	9b 81       	ldd	r25, Y+3	; 0x03
     6e4:	00 97       	sbiw	r24, 0x00	; 0
     6e6:	b1 f0       	breq	.+44     	; 0x714 <Timer0_Start+0x82>
     6e8:	53 c0       	rjmp	.+166    	; 0x790 <Timer0_Start+0xfe>
     6ea:	2a 81       	ldd	r18, Y+2	; 0x02
     6ec:	3b 81       	ldd	r19, Y+3	; 0x03
     6ee:	25 30       	cpi	r18, 0x05	; 5
     6f0:	31 05       	cpc	r19, r1
     6f2:	b9 f1       	breq	.+110    	; 0x762 <Timer0_Start+0xd0>
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	9b 81       	ldd	r25, Y+3	; 0x03
     6f8:	85 30       	cpi	r24, 0x05	; 5
     6fa:	91 05       	cpc	r25, r1
     6fc:	54 f1       	brlt	.+84     	; 0x752 <Timer0_Start+0xc0>
     6fe:	2a 81       	ldd	r18, Y+2	; 0x02
     700:	3b 81       	ldd	r19, Y+3	; 0x03
     702:	26 30       	cpi	r18, 0x06	; 6
     704:	31 05       	cpc	r19, r1
     706:	a9 f1       	breq	.+106    	; 0x772 <Timer0_Start+0xe0>
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	9b 81       	ldd	r25, Y+3	; 0x03
     70c:	87 30       	cpi	r24, 0x07	; 7
     70e:	91 05       	cpc	r25, r1
     710:	c1 f1       	breq	.+112    	; 0x782 <Timer0_Start+0xf0>
     712:	3e c0       	rjmp	.+124    	; 0x790 <Timer0_Start+0xfe>

	case TIMER0_Stop_:

		TIMER0_TCCR0_REG |= Timer0_Stopped;
     714:	e3 e5       	ldi	r30, 0x53	; 83
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	a3 e5       	ldi	r26, 0x53	; 83
     71a:	b0 e0       	ldi	r27, 0x00	; 0
     71c:	8c 91       	ld	r24, X
     71e:	80 83       	st	Z, r24
     720:	37 c0       	rjmp	.+110    	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_None_:

		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
     722:	a3 e5       	ldi	r26, 0x53	; 83
     724:	b0 e0       	ldi	r27, 0x00	; 0
     726:	e3 e5       	ldi	r30, 0x53	; 83
     728:	f0 e0       	ldi	r31, 0x00	; 0
     72a:	80 81       	ld	r24, Z
     72c:	81 60       	ori	r24, 0x01	; 1
     72e:	8c 93       	st	X, r24
     730:	2f c0       	rjmp	.+94     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_8_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
     732:	a3 e5       	ldi	r26, 0x53	; 83
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	e3 e5       	ldi	r30, 0x53	; 83
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	82 60       	ori	r24, 0x02	; 2
     73e:	8c 93       	st	X, r24
     740:	27 c0       	rjmp	.+78     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_64_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
     742:	a3 e5       	ldi	r26, 0x53	; 83
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e3 e5       	ldi	r30, 0x53	; 83
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	83 60       	ori	r24, 0x03	; 3
     74e:	8c 93       	st	X, r24
     750:	1f c0       	rjmp	.+62     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_256_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
     752:	a3 e5       	ldi	r26, 0x53	; 83
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	e3 e5       	ldi	r30, 0x53	; 83
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	84 60       	ori	r24, 0x04	; 4
     75e:	8c 93       	st	X, r24
     760:	17 c0       	rjmp	.+46     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_1024_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_1024;
     762:	a3 e5       	ldi	r26, 0x53	; 83
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	e3 e5       	ldi	r30, 0x53	; 83
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	85 60       	ori	r24, 0x05	; 5
     76e:	8c 93       	st	X, r24
     770:	0f c0       	rjmp	.+30     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Falling_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
     772:	a3 e5       	ldi	r26, 0x53	; 83
     774:	b0 e0       	ldi	r27, 0x00	; 0
     776:	e3 e5       	ldi	r30, 0x53	; 83
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	86 60       	ori	r24, 0x06	; 6
     77e:	8c 93       	st	X, r24
     780:	07 c0       	rjmp	.+14     	; 0x790 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Rising_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Rising_Edge;
     782:	a3 e5       	ldi	r26, 0x53	; 83
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e3 e5       	ldi	r30, 0x53	; 83
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	87 60       	ori	r24, 0x07	; 7
     78e:	8c 93       	st	X, r24
		break;
    }
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	cf 91       	pop	r28
     798:	df 91       	pop	r29
     79a:	08 95       	ret

0000079c <Timer0_Stop>:


void Timer0_Stop(void){
     79c:	df 93       	push	r29
     79e:	cf 93       	push	r28
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0_REG |=Timer0_Stopped;
     7a4:	e3 e5       	ldi	r30, 0x53	; 83
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	a3 e5       	ldi	r26, 0x53	; 83
     7aa:	b0 e0       	ldi	r27, 0x00	; 0
     7ac:	8c 91       	ld	r24, X
     7ae:	80 83       	st	Z, r24
}
     7b0:	cf 91       	pop	r28
     7b2:	df 91       	pop	r29
     7b4:	08 95       	ret

000007b6 <Timer0_EnableInterrupt>:


void Timer0_EnableInterrupt(void){
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	cd b7       	in	r28, 0x3d	; 61
     7bc:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     7be:	af e5       	ldi	r26, 0x5F	; 95
     7c0:	b0 e0       	ldi	r27, 0x00	; 0
     7c2:	ef e5       	ldi	r30, 0x5F	; 95
     7c4:	f0 e0       	ldi	r31, 0x00	; 0
     7c6:	80 81       	ld	r24, Z
     7c8:	80 68       	ori	r24, 0x80	; 128
     7ca:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7cc:	a9 e5       	ldi	r26, 0x59	; 89
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	e9 e5       	ldi	r30, 0x59	; 89
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	81 60       	ori	r24, 0x01	; 1
     7d8:	8c 93       	st	X, r24
}
     7da:	cf 91       	pop	r28
     7dc:	df 91       	pop	r29
     7de:	08 95       	ret

000007e0 <Timer0_DisableInterrupt>:


void Timer0_DisableInterrupt(void){
     7e0:	df 93       	push	r29
     7e2:	cf 93       	push	r28
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7e8:	a9 e5       	ldi	r26, 0x59	; 89
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	e9 e5       	ldi	r30, 0x59	; 89
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	80 81       	ld	r24, Z
     7f2:	8e 7f       	andi	r24, 0xFE	; 254
     7f4:	8c 93       	st	X, r24
}
     7f6:	cf 91       	pop	r28
     7f8:	df 91       	pop	r29
     7fa:	08 95       	ret

000007fc <Enable_Gl_Int>:
 */

#include "../Inc/Glbl_Int.h"
#include "Std_Operations.h"

void Enable_Gl_Int(){
     7fc:	df 93       	push	r29
     7fe:	cf 93       	push	r28
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Enable;
    SET_BIT(Glbl_STATUS_REG,7);
     804:	af e5       	ldi	r26, 0x5F	; 95
     806:	b0 e0       	ldi	r27, 0x00	; 0
     808:	ef e5       	ldi	r30, 0x5F	; 95
     80a:	f0 e0       	ldi	r31, 0x00	; 0
     80c:	80 81       	ld	r24, Z
     80e:	80 68       	ori	r24, 0x80	; 128
     810:	8c 93       	st	X, r24
}
     812:	cf 91       	pop	r28
     814:	df 91       	pop	r29
     816:	08 95       	ret

00000818 <Disable_Gl_Int>:
void Disable_Gl_Int(){
     818:	df 93       	push	r29
     81a:	cf 93       	push	r28
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Disable;
	CLR_BIT(Glbl_STATUS_REG,7);
     820:	af e5       	ldi	r26, 0x5F	; 95
     822:	b0 e0       	ldi	r27, 0x00	; 0
     824:	ef e5       	ldi	r30, 0x5F	; 95
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	80 81       	ld	r24, Z
     82a:	8f 77       	andi	r24, 0x7F	; 127
     82c:	8c 93       	st	X, r24
}
     82e:	cf 91       	pop	r28
     830:	df 91       	pop	r29
     832:	08 95       	ret

00000834 <DIO_SET_PIN>:
#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	00 d0       	rcall	.+0      	; 0x83a <DIO_SET_PIN+0x6>
     83a:	00 d0       	rcall	.+0      	; 0x83c <DIO_SET_PIN+0x8>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	28 2f       	mov	r18, r24
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	3c 83       	std	Y+4, r19	; 0x04
     84c:	2b 83       	std	Y+3, r18	; 0x03
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	9c 81       	ldd	r25, Y+4	; 0x04
     852:	81 30       	cpi	r24, 0x01	; 1
     854:	91 05       	cpc	r25, r1
     856:	49 f1       	breq	.+82     	; 0x8aa <__stack+0x4b>
     858:	2b 81       	ldd	r18, Y+3	; 0x03
     85a:	3c 81       	ldd	r19, Y+4	; 0x04
     85c:	22 30       	cpi	r18, 0x02	; 2
     85e:	31 05       	cpc	r19, r1
     860:	2c f4       	brge	.+10     	; 0x86c <__stack+0xd>
     862:	8b 81       	ldd	r24, Y+3	; 0x03
     864:	9c 81       	ldd	r25, Y+4	; 0x04
     866:	00 97       	sbiw	r24, 0x00	; 0
     868:	61 f0       	breq	.+24     	; 0x882 <__stack+0x23>
     86a:	5a c0       	rjmp	.+180    	; 0x920 <__stack+0xc1>
     86c:	2b 81       	ldd	r18, Y+3	; 0x03
     86e:	3c 81       	ldd	r19, Y+4	; 0x04
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	31 05       	cpc	r19, r1
     874:	71 f1       	breq	.+92     	; 0x8d2 <__stack+0x73>
     876:	8b 81       	ldd	r24, Y+3	; 0x03
     878:	9c 81       	ldd	r25, Y+4	; 0x04
     87a:	83 30       	cpi	r24, 0x03	; 3
     87c:	91 05       	cpc	r25, r1
     87e:	e9 f1       	breq	.+122    	; 0x8fa <__stack+0x9b>
     880:	4f c0       	rjmp	.+158    	; 0x920 <__stack+0xc1>
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
     882:	ab e3       	ldi	r26, 0x3B	; 59
     884:	b0 e0       	ldi	r27, 0x00	; 0
     886:	eb e3       	ldi	r30, 0x3B	; 59
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	48 2f       	mov	r20, r24
     88e:	8a 81       	ldd	r24, Y+2	; 0x02
     890:	28 2f       	mov	r18, r24
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	02 2e       	mov	r0, r18
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	0a 94       	dec	r0
     8a2:	e2 f7       	brpl	.-8      	; 0x89c <__stack+0x3d>
     8a4:	84 2b       	or	r24, r20
     8a6:	8c 93       	st	X, r24
     8a8:	3b c0       	rjmp	.+118    	; 0x920 <__stack+0xc1>
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
     8aa:	a8 e3       	ldi	r26, 0x38	; 56
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	e8 e3       	ldi	r30, 0x38	; 56
     8b0:	f0 e0       	ldi	r31, 0x00	; 0
     8b2:	80 81       	ld	r24, Z
     8b4:	48 2f       	mov	r20, r24
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	02 2e       	mov	r0, r18
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	0a 94       	dec	r0
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	84 2b       	or	r24, r20
     8ce:	8c 93       	st	X, r24
     8d0:	27 c0       	rjmp	.+78     	; 0x920 <__stack+0xc1>
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
     8d2:	a5 e3       	ldi	r26, 0x35	; 53
     8d4:	b0 e0       	ldi	r27, 0x00	; 0
     8d6:	e5 e3       	ldi	r30, 0x35	; 53
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	48 2f       	mov	r20, r24
     8de:	8a 81       	ldd	r24, Y+2	; 0x02
     8e0:	28 2f       	mov	r18, r24
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	02 2e       	mov	r0, r18
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <__stack+0x91>
     8ec:	88 0f       	add	r24, r24
     8ee:	99 1f       	adc	r25, r25
     8f0:	0a 94       	dec	r0
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <__stack+0x8d>
     8f4:	84 2b       	or	r24, r20
     8f6:	8c 93       	st	X, r24
     8f8:	13 c0       	rjmp	.+38     	; 0x920 <__stack+0xc1>
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
     8fa:	a2 e3       	ldi	r26, 0x32	; 50
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e2 e3       	ldi	r30, 0x32	; 50
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	48 2f       	mov	r20, r24
     906:	8a 81       	ldd	r24, Y+2	; 0x02
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 2e       	mov	r0, r18
     912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0xb9>
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	0a 94       	dec	r0
     91a:	e2 f7       	brpl	.-8      	; 0x914 <__stack+0xb5>
     91c:	84 2b       	or	r24, r20
     91e:	8c 93       	st	X, r24
		break;
	}
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	cf 91       	pop	r28
     92a:	df 91       	pop	r29
     92c:	08 95       	ret

0000092e <DIO_CLEAR_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	00 d0       	rcall	.+0      	; 0x934 <DIO_CLEAR_PIN+0x6>
     934:	00 d0       	rcall	.+0      	; 0x936 <DIO_CLEAR_PIN+0x8>
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
     93a:	89 83       	std	Y+1, r24	; 0x01
     93c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	28 2f       	mov	r18, r24
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	3c 83       	std	Y+4, r19	; 0x04
     946:	2b 83       	std	Y+3, r18	; 0x03
     948:	8b 81       	ldd	r24, Y+3	; 0x03
     94a:	9c 81       	ldd	r25, Y+4	; 0x04
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	91 05       	cpc	r25, r1
     950:	59 f1       	breq	.+86     	; 0x9a8 <DIO_CLEAR_PIN+0x7a>
     952:	2b 81       	ldd	r18, Y+3	; 0x03
     954:	3c 81       	ldd	r19, Y+4	; 0x04
     956:	22 30       	cpi	r18, 0x02	; 2
     958:	31 05       	cpc	r19, r1
     95a:	2c f4       	brge	.+10     	; 0x966 <DIO_CLEAR_PIN+0x38>
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	69 f0       	breq	.+26     	; 0x97e <DIO_CLEAR_PIN+0x50>
     964:	5f c0       	rjmp	.+190    	; 0xa24 <DIO_CLEAR_PIN+0xf6>
     966:	2b 81       	ldd	r18, Y+3	; 0x03
     968:	3c 81       	ldd	r19, Y+4	; 0x04
     96a:	22 30       	cpi	r18, 0x02	; 2
     96c:	31 05       	cpc	r19, r1
     96e:	89 f1       	breq	.+98     	; 0x9d2 <DIO_CLEAR_PIN+0xa4>
     970:	8b 81       	ldd	r24, Y+3	; 0x03
     972:	9c 81       	ldd	r25, Y+4	; 0x04
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	91 05       	cpc	r25, r1
     978:	09 f4       	brne	.+2      	; 0x97c <DIO_CLEAR_PIN+0x4e>
     97a:	40 c0       	rjmp	.+128    	; 0x9fc <DIO_CLEAR_PIN+0xce>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <DIO_CLEAR_PIN+0xf6>
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
     97e:	ab e3       	ldi	r26, 0x3B	; 59
     980:	b0 e0       	ldi	r27, 0x00	; 0
     982:	eb e3       	ldi	r30, 0x3B	; 59
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	48 2f       	mov	r20, r24
     98a:	8a 81       	ldd	r24, Y+2	; 0x02
     98c:	28 2f       	mov	r18, r24
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	02 2e       	mov	r0, r18
     996:	02 c0       	rjmp	.+4      	; 0x99c <DIO_CLEAR_PIN+0x6e>
     998:	88 0f       	add	r24, r24
     99a:	99 1f       	adc	r25, r25
     99c:	0a 94       	dec	r0
     99e:	e2 f7       	brpl	.-8      	; 0x998 <DIO_CLEAR_PIN+0x6a>
     9a0:	80 95       	com	r24
     9a2:	84 23       	and	r24, r20
     9a4:	8c 93       	st	X, r24
     9a6:	3e c0       	rjmp	.+124    	; 0xa24 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
     9a8:	a8 e3       	ldi	r26, 0x38	; 56
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	e8 e3       	ldi	r30, 0x38	; 56
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	48 2f       	mov	r20, r24
     9b4:	8a 81       	ldd	r24, Y+2	; 0x02
     9b6:	28 2f       	mov	r18, r24
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	02 2e       	mov	r0, r18
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <DIO_CLEAR_PIN+0x98>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	0a 94       	dec	r0
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <DIO_CLEAR_PIN+0x94>
     9ca:	80 95       	com	r24
     9cc:	84 23       	and	r24, r20
     9ce:	8c 93       	st	X, r24
     9d0:	29 c0       	rjmp	.+82     	; 0xa24 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
     9d2:	a5 e3       	ldi	r26, 0x35	; 53
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e5 e3       	ldi	r30, 0x35	; 53
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	80 81       	ld	r24, Z
     9dc:	48 2f       	mov	r20, r24
     9de:	8a 81       	ldd	r24, Y+2	; 0x02
     9e0:	28 2f       	mov	r18, r24
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	02 2e       	mov	r0, r18
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_CLEAR_PIN+0xc2>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	0a 94       	dec	r0
     9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_CLEAR_PIN+0xbe>
     9f4:	80 95       	com	r24
     9f6:	84 23       	and	r24, r20
     9f8:	8c 93       	st	X, r24
     9fa:	14 c0       	rjmp	.+40     	; 0xa24 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
     9fc:	a2 e3       	ldi	r26, 0x32	; 50
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e2 e3       	ldi	r30, 0x32	; 50
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	48 2f       	mov	r20, r24
     a08:	8a 81       	ldd	r24, Y+2	; 0x02
     a0a:	28 2f       	mov	r18, r24
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	02 2e       	mov	r0, r18
     a14:	02 c0       	rjmp	.+4      	; 0xa1a <DIO_CLEAR_PIN+0xec>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	0a 94       	dec	r0
     a1c:	e2 f7       	brpl	.-8      	; 0xa16 <DIO_CLEAR_PIN+0xe8>
     a1e:	80 95       	com	r24
     a20:	84 23       	and	r24, r20
     a22:	8c 93       	st	X, r24
		break;
	}
}
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	cf 91       	pop	r28
     a2e:	df 91       	pop	r29
     a30:	08 95       	ret

00000a32 <DIO_TOGGLE_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	00 d0       	rcall	.+0      	; 0xa38 <DIO_TOGGLE_PIN+0x6>
     a38:	00 d0       	rcall	.+0      	; 0xa3a <DIO_TOGGLE_PIN+0x8>
     a3a:	cd b7       	in	r28, 0x3d	; 61
     a3c:	de b7       	in	r29, 0x3e	; 62
     a3e:	89 83       	std	Y+1, r24	; 0x01
     a40:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	28 2f       	mov	r18, r24
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	3c 83       	std	Y+4, r19	; 0x04
     a4a:	2b 83       	std	Y+3, r18	; 0x03
     a4c:	8b 81       	ldd	r24, Y+3	; 0x03
     a4e:	9c 81       	ldd	r25, Y+4	; 0x04
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	91 05       	cpc	r25, r1
     a54:	49 f1       	breq	.+82     	; 0xaa8 <DIO_TOGGLE_PIN+0x76>
     a56:	2b 81       	ldd	r18, Y+3	; 0x03
     a58:	3c 81       	ldd	r19, Y+4	; 0x04
     a5a:	22 30       	cpi	r18, 0x02	; 2
     a5c:	31 05       	cpc	r19, r1
     a5e:	2c f4       	brge	.+10     	; 0xa6a <DIO_TOGGLE_PIN+0x38>
     a60:	8b 81       	ldd	r24, Y+3	; 0x03
     a62:	9c 81       	ldd	r25, Y+4	; 0x04
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	61 f0       	breq	.+24     	; 0xa80 <DIO_TOGGLE_PIN+0x4e>
     a68:	5a c0       	rjmp	.+180    	; 0xb1e <DIO_TOGGLE_PIN+0xec>
     a6a:	2b 81       	ldd	r18, Y+3	; 0x03
     a6c:	3c 81       	ldd	r19, Y+4	; 0x04
     a6e:	22 30       	cpi	r18, 0x02	; 2
     a70:	31 05       	cpc	r19, r1
     a72:	71 f1       	breq	.+92     	; 0xad0 <DIO_TOGGLE_PIN+0x9e>
     a74:	8b 81       	ldd	r24, Y+3	; 0x03
     a76:	9c 81       	ldd	r25, Y+4	; 0x04
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	91 05       	cpc	r25, r1
     a7c:	e9 f1       	breq	.+122    	; 0xaf8 <DIO_TOGGLE_PIN+0xc6>
     a7e:	4f c0       	rjmp	.+158    	; 0xb1e <DIO_TOGGLE_PIN+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
     a80:	ab e3       	ldi	r26, 0x3B	; 59
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	eb e3       	ldi	r30, 0x3B	; 59
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	48 2f       	mov	r20, r24
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 2e       	mov	r0, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <DIO_TOGGLE_PIN+0x6c>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <DIO_TOGGLE_PIN+0x68>
     aa2:	84 27       	eor	r24, r20
     aa4:	8c 93       	st	X, r24
     aa6:	3b c0       	rjmp	.+118    	; 0xb1e <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
     aa8:	a8 e3       	ldi	r26, 0x38	; 56
     aaa:	b0 e0       	ldi	r27, 0x00	; 0
     aac:	e8 e3       	ldi	r30, 0x38	; 56
     aae:	f0 e0       	ldi	r31, 0x00	; 0
     ab0:	80 81       	ld	r24, Z
     ab2:	48 2f       	mov	r20, r24
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	02 2e       	mov	r0, r18
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_TOGGLE_PIN+0x94>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_TOGGLE_PIN+0x90>
     aca:	84 27       	eor	r24, r20
     acc:	8c 93       	st	X, r24
     ace:	27 c0       	rjmp	.+78     	; 0xb1e <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
     ad0:	a5 e3       	ldi	r26, 0x35	; 53
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	e5 e3       	ldi	r30, 0x35	; 53
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	48 2f       	mov	r20, r24
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	02 2e       	mov	r0, r18
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <DIO_TOGGLE_PIN+0xbc>
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	0a 94       	dec	r0
     af0:	e2 f7       	brpl	.-8      	; 0xaea <DIO_TOGGLE_PIN+0xb8>
     af2:	84 27       	eor	r24, r20
     af4:	8c 93       	st	X, r24
     af6:	13 c0       	rjmp	.+38     	; 0xb1e <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
     af8:	a2 e3       	ldi	r26, 0x32	; 50
     afa:	b0 e0       	ldi	r27, 0x00	; 0
     afc:	e2 e3       	ldi	r30, 0x32	; 50
     afe:	f0 e0       	ldi	r31, 0x00	; 0
     b00:	80 81       	ld	r24, Z
     b02:	48 2f       	mov	r20, r24
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	28 2f       	mov	r18, r24
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 2e       	mov	r0, r18
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <DIO_TOGGLE_PIN+0xe4>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	0a 94       	dec	r0
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <DIO_TOGGLE_PIN+0xe0>
     b1a:	84 27       	eor	r24, r20
     b1c:	8c 93       	st	X, r24
		break;
	}
}
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	cf 91       	pop	r28
     b28:	df 91       	pop	r29
     b2a:	08 95       	ret

00000b2c <DIO_ENABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     b2c:	df 93       	push	r29
     b2e:	cf 93       	push	r28
     b30:	00 d0       	rcall	.+0      	; 0xb32 <DIO_ENABLE_PULLUP+0x6>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <DIO_ENABLE_PULLUP+0x8>
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	89 83       	std	Y+1, r24	; 0x01
     b3a:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     b3c:	89 81       	ldd	r24, Y+1	; 0x01
     b3e:	28 2f       	mov	r18, r24
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	3c 83       	std	Y+4, r19	; 0x04
     b44:	2b 83       	std	Y+3, r18	; 0x03
     b46:	4b 81       	ldd	r20, Y+3	; 0x03
     b48:	5c 81       	ldd	r21, Y+4	; 0x04
     b4a:	41 30       	cpi	r20, 0x01	; 1
     b4c:	51 05       	cpc	r21, r1
     b4e:	09 f4       	brne	.+2      	; 0xb52 <DIO_ENABLE_PULLUP+0x26>
     b50:	40 c0       	rjmp	.+128    	; 0xbd2 <DIO_ENABLE_PULLUP+0xa6>
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	9c 81       	ldd	r25, Y+4	; 0x04
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	91 05       	cpc	r25, r1
     b5a:	34 f4       	brge	.+12     	; 0xb68 <DIO_ENABLE_PULLUP+0x3c>
     b5c:	2b 81       	ldd	r18, Y+3	; 0x03
     b5e:	3c 81       	ldd	r19, Y+4	; 0x04
     b60:	21 15       	cp	r18, r1
     b62:	31 05       	cpc	r19, r1
     b64:	71 f0       	breq	.+28     	; 0xb82 <DIO_ENABLE_PULLUP+0x56>
     b66:	aa c0       	rjmp	.+340    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
     b68:	4b 81       	ldd	r20, Y+3	; 0x03
     b6a:	5c 81       	ldd	r21, Y+4	; 0x04
     b6c:	42 30       	cpi	r20, 0x02	; 2
     b6e:	51 05       	cpc	r21, r1
     b70:	09 f4       	brne	.+2      	; 0xb74 <DIO_ENABLE_PULLUP+0x48>
     b72:	57 c0       	rjmp	.+174    	; 0xc22 <DIO_ENABLE_PULLUP+0xf6>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <DIO_ENABLE_PULLUP+0x54>
     b7e:	78 c0       	rjmp	.+240    	; 0xc70 <DIO_ENABLE_PULLUP+0x144>
     b80:	9d c0       	rjmp	.+314    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     b82:	ea e3       	ldi	r30, 0x3A	; 58
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	a9 01       	movw	r20, r18
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <DIO_ENABLE_PULLUP+0x6e>
     b96:	55 95       	asr	r21
     b98:	47 95       	ror	r20
     b9a:	8a 95       	dec	r24
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <DIO_ENABLE_PULLUP+0x6a>
     b9e:	ca 01       	movw	r24, r20
     ba0:	81 70       	andi	r24, 0x01	; 1
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	00 97       	sbiw	r24, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <DIO_ENABLE_PULLUP+0x7e>
     ba8:	89 c0       	rjmp	.+274    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTA_REG,pin);
     baa:	ab e3       	ldi	r26, 0x3B	; 59
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	eb e3       	ldi	r30, 0x3B	; 59
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 2e       	mov	r0, r18
     bc2:	02 c0       	rjmp	.+4      	; 0xbc8 <DIO_ENABLE_PULLUP+0x9c>
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	0a 94       	dec	r0
     bca:	e2 f7       	brpl	.-8      	; 0xbc4 <DIO_ENABLE_PULLUP+0x98>
     bcc:	84 2b       	or	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	75 c0       	rjmp	.+234    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     bd2:	e7 e3       	ldi	r30, 0x37	; 55
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	88 2f       	mov	r24, r24
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	a9 01       	movw	r20, r18
     be4:	02 c0       	rjmp	.+4      	; 0xbea <DIO_ENABLE_PULLUP+0xbe>
     be6:	55 95       	asr	r21
     be8:	47 95       	ror	r20
     bea:	8a 95       	dec	r24
     bec:	e2 f7       	brpl	.-8      	; 0xbe6 <DIO_ENABLE_PULLUP+0xba>
     bee:	ca 01       	movw	r24, r20
     bf0:	81 70       	andi	r24, 0x01	; 1
     bf2:	90 70       	andi	r25, 0x00	; 0
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	09 f0       	breq	.+2      	; 0xbfa <DIO_ENABLE_PULLUP+0xce>
     bf8:	61 c0       	rjmp	.+194    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTB_REG,pin);
     bfa:	a8 e3       	ldi	r26, 0x38	; 56
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e8 e3       	ldi	r30, 0x38	; 56
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	48 2f       	mov	r20, r24
     c06:	8a 81       	ldd	r24, Y+2	; 0x02
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	02 2e       	mov	r0, r18
     c12:	02 c0       	rjmp	.+4      	; 0xc18 <DIO_ENABLE_PULLUP+0xec>
     c14:	88 0f       	add	r24, r24
     c16:	99 1f       	adc	r25, r25
     c18:	0a 94       	dec	r0
     c1a:	e2 f7       	brpl	.-8      	; 0xc14 <DIO_ENABLE_PULLUP+0xe8>
     c1c:	84 2b       	or	r24, r20
     c1e:	8c 93       	st	X, r24
     c20:	4d c0       	rjmp	.+154    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     c22:	e4 e3       	ldi	r30, 0x34	; 52
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a9 01       	movw	r20, r18
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <DIO_ENABLE_PULLUP+0x10e>
     c36:	55 95       	asr	r21
     c38:	47 95       	ror	r20
     c3a:	8a 95       	dec	r24
     c3c:	e2 f7       	brpl	.-8      	; 0xc36 <DIO_ENABLE_PULLUP+0x10a>
     c3e:	ca 01       	movw	r24, r20
     c40:	81 70       	andi	r24, 0x01	; 1
     c42:	90 70       	andi	r25, 0x00	; 0
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	d1 f5       	brne	.+116    	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTC_REG,pin);
     c48:	a5 e3       	ldi	r26, 0x35	; 53
     c4a:	b0 e0       	ldi	r27, 0x00	; 0
     c4c:	e5 e3       	ldi	r30, 0x35	; 53
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	48 2f       	mov	r20, r24
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	02 2e       	mov	r0, r18
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <DIO_ENABLE_PULLUP+0x13a>
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	0a 94       	dec	r0
     c68:	e2 f7       	brpl	.-8      	; 0xc62 <DIO_ENABLE_PULLUP+0x136>
     c6a:	84 2b       	or	r24, r20
     c6c:	8c 93       	st	X, r24
     c6e:	26 c0       	rjmp	.+76     	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     c70:	e1 e3       	ldi	r30, 0x31	; 49
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	80 81       	ld	r24, Z
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	8a 81       	ldd	r24, Y+2	; 0x02
     c7c:	88 2f       	mov	r24, r24
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a9 01       	movw	r20, r18
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <DIO_ENABLE_PULLUP+0x15c>
     c84:	55 95       	asr	r21
     c86:	47 95       	ror	r20
     c88:	8a 95       	dec	r24
     c8a:	e2 f7       	brpl	.-8      	; 0xc84 <DIO_ENABLE_PULLUP+0x158>
     c8c:	ca 01       	movw	r24, r20
     c8e:	81 70       	andi	r24, 0x01	; 1
     c90:	90 70       	andi	r25, 0x00	; 0
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	99 f4       	brne	.+38     	; 0xcbc <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTD_REG,pin);
     c96:	a2 e3       	ldi	r26, 0x32	; 50
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e2 e3       	ldi	r30, 0x32	; 50
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_ENABLE_PULLUP+0x188>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_ENABLE_PULLUP+0x184>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
		break;
	}
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <DIO_DISABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <DIO_DISABLE_PULLUP+0x6>
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <DIO_DISABLE_PULLUP+0x8>
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	89 83       	std	Y+1, r24	; 0x01
     cd8:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	3c 83       	std	Y+4, r19	; 0x04
     ce2:	2b 83       	std	Y+3, r18	; 0x03
     ce4:	4b 81       	ldd	r20, Y+3	; 0x03
     ce6:	5c 81       	ldd	r21, Y+4	; 0x04
     ce8:	41 30       	cpi	r20, 0x01	; 1
     cea:	51 05       	cpc	r21, r1
     cec:	09 f4       	brne	.+2      	; 0xcf0 <DIO_DISABLE_PULLUP+0x26>
     cee:	41 c0       	rjmp	.+130    	; 0xd72 <DIO_DISABLE_PULLUP+0xa8>
     cf0:	8b 81       	ldd	r24, Y+3	; 0x03
     cf2:	9c 81       	ldd	r25, Y+4	; 0x04
     cf4:	82 30       	cpi	r24, 0x02	; 2
     cf6:	91 05       	cpc	r25, r1
     cf8:	34 f4       	brge	.+12     	; 0xd06 <DIO_DISABLE_PULLUP+0x3c>
     cfa:	2b 81       	ldd	r18, Y+3	; 0x03
     cfc:	3c 81       	ldd	r19, Y+4	; 0x04
     cfe:	21 15       	cp	r18, r1
     d00:	31 05       	cpc	r19, r1
     d02:	71 f0       	breq	.+28     	; 0xd20 <DIO_DISABLE_PULLUP+0x56>
     d04:	ae c0       	rjmp	.+348    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
     d06:	4b 81       	ldd	r20, Y+3	; 0x03
     d08:	5c 81       	ldd	r21, Y+4	; 0x04
     d0a:	42 30       	cpi	r20, 0x02	; 2
     d0c:	51 05       	cpc	r21, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <DIO_DISABLE_PULLUP+0x48>
     d10:	59 c0       	rjmp	.+178    	; 0xdc4 <DIO_DISABLE_PULLUP+0xfa>
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	83 30       	cpi	r24, 0x03	; 3
     d18:	91 05       	cpc	r25, r1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <DIO_DISABLE_PULLUP+0x54>
     d1c:	7b c0       	rjmp	.+246    	; 0xe14 <DIO_DISABLE_PULLUP+0x14a>
     d1e:	a1 c0       	rjmp	.+322    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     d20:	ea e3       	ldi	r30, 0x3A	; 58
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	88 2f       	mov	r24, r24
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	a9 01       	movw	r20, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_DISABLE_PULLUP+0x6e>
     d34:	55 95       	asr	r21
     d36:	47 95       	ror	r20
     d38:	8a 95       	dec	r24
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_DISABLE_PULLUP+0x6a>
     d3c:	ca 01       	movw	r24, r20
     d3e:	81 70       	andi	r24, 0x01	; 1
     d40:	90 70       	andi	r25, 0x00	; 0
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	09 f0       	breq	.+2      	; 0xd48 <DIO_DISABLE_PULLUP+0x7e>
     d46:	8d c0       	rjmp	.+282    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTA_REG,pin);
     d48:	ab e3       	ldi	r26, 0x3B	; 59
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	eb e3       	ldi	r30, 0x3B	; 59
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	02 2e       	mov	r0, r18
     d60:	02 c0       	rjmp	.+4      	; 0xd66 <DIO_DISABLE_PULLUP+0x9c>
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	0a 94       	dec	r0
     d68:	e2 f7       	brpl	.-8      	; 0xd62 <DIO_DISABLE_PULLUP+0x98>
     d6a:	80 95       	com	r24
     d6c:	84 23       	and	r24, r20
     d6e:	8c 93       	st	X, r24
     d70:	78 c0       	rjmp	.+240    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     d72:	e7 e3       	ldi	r30, 0x37	; 55
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	8a 81       	ldd	r24, Y+2	; 0x02
     d7e:	88 2f       	mov	r24, r24
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a9 01       	movw	r20, r18
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <DIO_DISABLE_PULLUP+0xc0>
     d86:	55 95       	asr	r21
     d88:	47 95       	ror	r20
     d8a:	8a 95       	dec	r24
     d8c:	e2 f7       	brpl	.-8      	; 0xd86 <DIO_DISABLE_PULLUP+0xbc>
     d8e:	ca 01       	movw	r24, r20
     d90:	81 70       	andi	r24, 0x01	; 1
     d92:	90 70       	andi	r25, 0x00	; 0
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	09 f0       	breq	.+2      	; 0xd9a <DIO_DISABLE_PULLUP+0xd0>
     d98:	64 c0       	rjmp	.+200    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTB_REG,pin);
     d9a:	a8 e3       	ldi	r26, 0x38	; 56
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e8 e3       	ldi	r30, 0x38	; 56
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_DISABLE_PULLUP+0xee>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_DISABLE_PULLUP+0xea>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	4f c0       	rjmp	.+158    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     dc4:	e4 e3       	ldi	r30, 0x34	; 52
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	80 81       	ld	r24, Z
     dca:	28 2f       	mov	r18, r24
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	88 2f       	mov	r24, r24
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	a9 01       	movw	r20, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_DISABLE_PULLUP+0x112>
     dd8:	55 95       	asr	r21
     dda:	47 95       	ror	r20
     ddc:	8a 95       	dec	r24
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_DISABLE_PULLUP+0x10e>
     de0:	ca 01       	movw	r24, r20
     de2:	81 70       	andi	r24, 0x01	; 1
     de4:	90 70       	andi	r25, 0x00	; 0
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	e1 f5       	brne	.+120    	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTC_REG,pin);
     dea:	a5 e3       	ldi	r26, 0x35	; 53
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e5 e3       	ldi	r30, 0x35	; 53
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_DISABLE_PULLUP+0x13e>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_DISABLE_PULLUP+0x13a>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	27 c0       	rjmp	.+78     	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     e14:	e1 e3       	ldi	r30, 0x31	; 49
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	88 2f       	mov	r24, r24
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a9 01       	movw	r20, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_DISABLE_PULLUP+0x162>
     e28:	55 95       	asr	r21
     e2a:	47 95       	ror	r20
     e2c:	8a 95       	dec	r24
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_DISABLE_PULLUP+0x15e>
     e30:	ca 01       	movw	r24, r20
     e32:	81 70       	andi	r24, 0x01	; 1
     e34:	90 70       	andi	r25, 0x00	; 0
     e36:	00 97       	sbiw	r24, 0x00	; 0
     e38:	a1 f4       	brne	.+40     	; 0xe62 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTD_REG,pin);
     e3a:	a2 e3       	ldi	r26, 0x32	; 50
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e2 e3       	ldi	r30, 0x32	; 50
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <DIO_DISABLE_PULLUP+0x18e>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <DIO_DISABLE_PULLUP+0x18a>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
		break;
	}
}
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	cf 91       	pop	r28
     e6c:	df 91       	pop	r29
     e6e:	08 95       	ret

00000e70 <DIO_READ_LEVEL>:
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input
     e70:	df 93       	push	r29
     e72:	cf 93       	push	r28
     e74:	00 d0       	rcall	.+0      	; 0xe76 <DIO_READ_LEVEL+0x6>
     e76:	00 d0       	rcall	.+0      	; 0xe78 <DIO_READ_LEVEL+0x8>
     e78:	0f 92       	push	r0
     e7a:	cd b7       	in	r28, 0x3d	; 61
     e7c:	de b7       	in	r29, 0x3e	; 62
     e7e:	89 83       	std	Y+1, r24	; 0x01
     e80:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	28 2f       	mov	r18, r24
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	3d 83       	std	Y+5, r19	; 0x05
     e8a:	2c 83       	std	Y+4, r18	; 0x04
     e8c:	4c 81       	ldd	r20, Y+4	; 0x04
     e8e:	5d 81       	ldd	r21, Y+5	; 0x05
     e90:	41 30       	cpi	r20, 0x01	; 1
     e92:	51 05       	cpc	r21, r1
     e94:	49 f1       	breq	.+82     	; 0xee8 <DIO_READ_LEVEL+0x78>
     e96:	8c 81       	ldd	r24, Y+4	; 0x04
     e98:	9d 81       	ldd	r25, Y+5	; 0x05
     e9a:	82 30       	cpi	r24, 0x02	; 2
     e9c:	91 05       	cpc	r25, r1
     e9e:	34 f4       	brge	.+12     	; 0xeac <DIO_READ_LEVEL+0x3c>
     ea0:	2c 81       	ldd	r18, Y+4	; 0x04
     ea2:	3d 81       	ldd	r19, Y+5	; 0x05
     ea4:	21 15       	cp	r18, r1
     ea6:	31 05       	cpc	r19, r1
     ea8:	61 f0       	breq	.+24     	; 0xec2 <DIO_READ_LEVEL+0x52>
     eaa:	57 c0       	rjmp	.+174    	; 0xf5a <DIO_READ_LEVEL+0xea>
     eac:	4c 81       	ldd	r20, Y+4	; 0x04
     eae:	5d 81       	ldd	r21, Y+5	; 0x05
     eb0:	42 30       	cpi	r20, 0x02	; 2
     eb2:	51 05       	cpc	r21, r1
     eb4:	61 f1       	breq	.+88     	; 0xf0e <DIO_READ_LEVEL+0x9e>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	83 30       	cpi	r24, 0x03	; 3
     ebc:	91 05       	cpc	r25, r1
     ebe:	d1 f1       	breq	.+116    	; 0xf34 <DIO_READ_LEVEL+0xc4>
     ec0:	4c c0       	rjmp	.+152    	; 0xf5a <DIO_READ_LEVEL+0xea>
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
     ec2:	e9 e3       	ldi	r30, 0x39	; 57
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a9 01       	movw	r20, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_READ_LEVEL+0x6a>
     ed6:	55 95       	asr	r21
     ed8:	47 95       	ror	r20
     eda:	8a 95       	dec	r24
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <DIO_READ_LEVEL+0x66>
     ede:	ca 01       	movw	r24, r20
     ee0:	58 2f       	mov	r21, r24
     ee2:	51 70       	andi	r21, 0x01	; 1
     ee4:	5b 83       	std	Y+3, r21	; 0x03
     ee6:	3a c0       	rjmp	.+116    	; 0xf5c <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
     ee8:	e6 e3       	ldi	r30, 0x36	; 54
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a9 01       	movw	r20, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_READ_LEVEL+0x90>
     efc:	55 95       	asr	r21
     efe:	47 95       	ror	r20
     f00:	8a 95       	dec	r24
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_READ_LEVEL+0x8c>
     f04:	ca 01       	movw	r24, r20
     f06:	58 2f       	mov	r21, r24
     f08:	51 70       	andi	r21, 0x01	; 1
     f0a:	5b 83       	std	Y+3, r21	; 0x03
     f0c:	27 c0       	rjmp	.+78     	; 0xf5c <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
     f0e:	e3 e3       	ldi	r30, 0x33	; 51
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a9 01       	movw	r20, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_READ_LEVEL+0xb6>
     f22:	55 95       	asr	r21
     f24:	47 95       	ror	r20
     f26:	8a 95       	dec	r24
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_READ_LEVEL+0xb2>
     f2a:	ca 01       	movw	r24, r20
     f2c:	58 2f       	mov	r21, r24
     f2e:	51 70       	andi	r21, 0x01	; 1
     f30:	5b 83       	std	Y+3, r21	; 0x03
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
     f34:	e0 e3       	ldi	r30, 0x30	; 48
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a9 01       	movw	r20, r18
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <DIO_READ_LEVEL+0xdc>
     f48:	55 95       	asr	r21
     f4a:	47 95       	ror	r20
     f4c:	8a 95       	dec	r24
     f4e:	e2 f7       	brpl	.-8      	; 0xf48 <DIO_READ_LEVEL+0xd8>
     f50:	ca 01       	movw	r24, r20
     f52:	58 2f       	mov	r21, r24
     f54:	51 70       	andi	r21, 0x01	; 1
     f56:	5b 83       	std	Y+3, r21	; 0x03
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <DIO_READ_LEVEL+0xec>
		break;
	}
	return 0;
     f5a:	1b 82       	std	Y+3, r1	; 0x03
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <DIO_WRITE_STATUS>:
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <DIO_WRITE_STATUS+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <DIO_WRITE_STATUS+0x8>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	6a 83       	std	Y+2, r22	; 0x02
     f80:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	3d 83       	std	Y+5, r19	; 0x05
     f8a:	2c 83       	std	Y+4, r18	; 0x04
     f8c:	8c 81       	ldd	r24, Y+4	; 0x04
     f8e:	9d 81       	ldd	r25, Y+5	; 0x05
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	91 05       	cpc	r25, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_WRITE_STATUS+0x2a>
     f96:	43 c0       	rjmp	.+134    	; 0x101e <DIO_WRITE_STATUS+0xb0>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	2c f4       	brge	.+10     	; 0xfac <DIO_WRITE_STATUS+0x3e>
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	71 f0       	breq	.+28     	; 0xfc6 <DIO_WRITE_STATUS+0x58>
     faa:	bc c0       	rjmp	.+376    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
     fac:	2c 81       	ldd	r18, Y+4	; 0x04
     fae:	3d 81       	ldd	r19, Y+5	; 0x05
     fb0:	22 30       	cpi	r18, 0x02	; 2
     fb2:	31 05       	cpc	r19, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_WRITE_STATUS+0x4a>
     fb6:	5f c0       	rjmp	.+190    	; 0x1076 <DIO_WRITE_STATUS+0x108>
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	9d 81       	ldd	r25, Y+5	; 0x05
     fbc:	83 30       	cpi	r24, 0x03	; 3
     fbe:	91 05       	cpc	r25, r1
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <DIO_WRITE_STATUS+0x56>
     fc2:	85 c0       	rjmp	.+266    	; 0x10ce <DIO_WRITE_STATUS+0x160>
     fc4:	af c0       	rjmp	.+350    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
	case DIO_PORTA:
		if (direction==OUTPUT)
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	a1 f4       	brne	.+40     	; 0xff4 <DIO_WRITE_STATUS+0x86>
			SET_BIT(DDRA_REG,pin);
     fcc:	aa e3       	ldi	r26, 0x3A	; 58
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ea e3       	ldi	r30, 0x3A	; 58
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_WRITE_STATUS+0x7c>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_WRITE_STATUS+0x78>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	98 c0       	rjmp	.+304    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRA_REG,pin);
     ff4:	aa e3       	ldi	r26, 0x3A	; 58
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	ea e3       	ldi	r30, 0x3A	; 58
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_WRITE_STATUS+0xa4>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_WRITE_STATUS+0xa0>
    1016:	80 95       	com	r24
    1018:	84 23       	and	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	83 c0       	rjmp	.+262    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTB:
		if (direction==OUTPUT)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	a1 f4       	brne	.+40     	; 0x104c <DIO_WRITE_STATUS+0xde>
			SET_BIT(DDRB_REG,pin);
    1024:	a7 e3       	ldi	r26, 0x37	; 55
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e7 e3       	ldi	r30, 0x37	; 55
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_WRITE_STATUS+0xd4>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_WRITE_STATUS+0xd0>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	6c c0       	rjmp	.+216    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRB_REG,pin);
    104c:	a7 e3       	ldi	r26, 0x37	; 55
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e7 e3       	ldi	r30, 0x37	; 55
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_WRITE_STATUS+0xfc>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_WRITE_STATUS+0xf8>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	57 c0       	rjmp	.+174    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTC:
		if (direction==OUTPUT)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <DIO_WRITE_STATUS+0x136>
			SET_BIT(DDRC_REG,pin);
    107c:	a4 e3       	ldi	r26, 0x34	; 52
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e4 e3       	ldi	r30, 0x34	; 52
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_WRITE_STATUS+0x12c>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_WRITE_STATUS+0x128>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	40 c0       	rjmp	.+128    	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRC_REG,pin);
    10a4:	a4 e3       	ldi	r26, 0x34	; 52
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e4 e3       	ldi	r30, 0x34	; 52
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_WRITE_STATUS+0x154>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_WRITE_STATUS+0x150>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	2b c0       	rjmp	.+86     	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTD:
		if (direction==OUTPUT)
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <DIO_WRITE_STATUS+0x18e>
			SET_BIT(DDRD_REG,pin);
    10d4:	a1 e3       	ldi	r26, 0x31	; 49
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e1 e3       	ldi	r30, 0x31	; 49
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_WRITE_STATUS+0x184>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_WRITE_STATUS+0x180>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	14 c0       	rjmp	.+40     	; 0x1124 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRD_REG,pin);
    10fc:	a1 e3       	ldi	r26, 0x31	; 49
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e1 e3       	ldi	r30, 0x31	; 49
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_WRITE_STATUS+0x1ac>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_WRITE_STATUS+0x1a8>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
		break;
	}
}
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <Dio_WriteGroup>:
//--------------------------------------------------------------------------------------------------
void Dio_WriteGroup(Port_ID port,u8 mask,u8 data)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	00 d0       	rcall	.+0      	; 0x113a <Dio_WriteGroup+0x6>
    113a:	00 d0       	rcall	.+0      	; 0x113c <Dio_WriteGroup+0x8>
    113c:	0f 92       	push	r0
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	89 83       	std	Y+1, r24	; 0x01
    1144:	6a 83       	std	Y+2, r22	; 0x02
    1146:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	3d 83       	std	Y+5, r19	; 0x05
    1150:	2c 83       	std	Y+4, r18	; 0x04
    1152:	8c 81       	ldd	r24, Y+4	; 0x04
    1154:	9d 81       	ldd	r25, Y+5	; 0x05
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	91 05       	cpc	r25, r1
    115a:	29 f1       	breq	.+74     	; 0x11a6 <Dio_WriteGroup+0x72>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <Dio_WriteGroup+0x3c>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	61 f0       	breq	.+24     	; 0x1186 <Dio_WriteGroup+0x52>
    116e:	4a c0       	rjmp	.+148    	; 0x1204 <Dio_WriteGroup+0xd0>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	31 f1       	breq	.+76     	; 0x11c6 <Dio_WriteGroup+0x92>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	89 f1       	breq	.+98     	; 0x11e6 <Dio_WriteGroup+0xb2>
    1184:	3f c0       	rjmp	.+126    	; 0x1204 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		PORTA_REG = (PORTA_REG&~mask)|(data & mask);
    1186:	ab e3       	ldi	r26, 0x3B	; 59
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	eb e3       	ldi	r30, 0x3B	; 59
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	98 2f       	mov	r25, r24
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 95       	com	r24
    1196:	29 2f       	mov	r18, r25
    1198:	28 23       	and	r18, r24
    119a:	9b 81       	ldd	r25, Y+3	; 0x03
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	89 23       	and	r24, r25
    11a0:	82 2b       	or	r24, r18
    11a2:	8c 93       	st	X, r24
    11a4:	2f c0       	rjmp	.+94     	; 0x1204 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		PORTB_REG = (PORTB_REG&~mask)|(data & mask);
    11a6:	a8 e3       	ldi	r26, 0x38	; 56
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e8 e3       	ldi	r30, 0x38	; 56
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	98 2f       	mov	r25, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 95       	com	r24
    11b6:	29 2f       	mov	r18, r25
    11b8:	28 23       	and	r18, r24
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	89 23       	and	r24, r25
    11c0:	82 2b       	or	r24, r18
    11c2:	8c 93       	st	X, r24
    11c4:	1f c0       	rjmp	.+62     	; 0x1204 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		PORTC_REG = (PORTC_REG&~mask)|(data & mask);
    11c6:	a5 e3       	ldi	r26, 0x35	; 53
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e3       	ldi	r30, 0x35	; 53
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	98 2f       	mov	r25, r24
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	80 95       	com	r24
    11d6:	29 2f       	mov	r18, r25
    11d8:	28 23       	and	r18, r24
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	89 23       	and	r24, r25
    11e0:	82 2b       	or	r24, r18
    11e2:	8c 93       	st	X, r24
    11e4:	0f c0       	rjmp	.+30     	; 0x1204 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		PORTD_REG = (PORTD_REG&~mask)|(data & mask);
    11e6:	a2 e3       	ldi	r26, 0x32	; 50
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e2 e3       	ldi	r30, 0x32	; 50
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	98 2f       	mov	r25, r24
    11f2:	8a 81       	ldd	r24, Y+2	; 0x02
    11f4:	80 95       	com	r24
    11f6:	29 2f       	mov	r18, r25
    11f8:	28 23       	and	r18, r24
    11fa:	9b 81       	ldd	r25, Y+3	; 0x03
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	89 23       	and	r24, r25
    1200:	82 2b       	or	r24, r18
    1202:	8c 93       	st	X, r24
		break;
	}
}
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	08 95       	ret

00001214 <SSD_Init>:
#include "SSD.h"

static u8 Counter =0;

void SSD_Init(void)
{
    1214:	df 93       	push	r29
    1216:	cf 93       	push	r28
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN4,OUTPUT);
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	64 e0       	ldi	r22, 0x04	; 4
    1220:	41 e0       	ldi	r20, 0x01	; 1
    1222:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN5,OUTPUT);
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	65 e0       	ldi	r22, 0x05	; 5
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN6,OUTPUT);
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	66 e0       	ldi	r22, 0x06	; 6
    1234:	41 e0       	ldi	r20, 0x01	; 1
    1236:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN7,OUTPUT);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	67 e0       	ldi	r22, 0x07	; 7
    123e:	41 e0       	ldi	r20, 0x01	; 1
    1240:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>

	/*	Configure Control Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN1,OUTPUT);
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	41 e0       	ldi	r20, 0x01	; 1
    124a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN2,OUTPUT);
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	62 e0       	ldi	r22, 0x02	; 2
    1252:	41 e0       	ldi	r20, 0x01	; 1
    1254:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
}
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <SSD_DisplayNumber>:
//--------------------------------------------------------------------------------------------------
void SSD_DisplayNumber(u8 num)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	00 d0       	rcall	.+0      	; 0x1264 <SSD_DisplayNumber+0x6>
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_FirstDigit = (num/10)<<4;
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9a e0       	ldi	r25, 0x0A	; 10
    1270:	69 2f       	mov	r22, r25
    1272:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__udivmodqi4>
    1276:	82 95       	swap	r24
    1278:	80 7f       	andi	r24, 0xF0	; 240
    127a:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_Second_Digit = (num%10)<<4;
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9a e0       	ldi	r25, 0x0A	; 10
    1280:	69 2f       	mov	r22, r25
    1282:	0e 94 8b 0b 	call	0x1716	; 0x1716 <__udivmodqi4>
    1286:	89 2f       	mov	r24, r25
    1288:	82 95       	swap	r24
    128a:	80 7f       	andi	r24, 0xF0	; 240
    128c:	89 83       	std	Y+1, r24	; 0x01

	if(Counter < (((2^8)-1)/2)){
    128e:	80 91 69 00 	lds	r24, 0x0069
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	70 f4       	brcc	.+28     	; 0x12b2 <SSD_DisplayNumber+0x54>
		/*	Enable SSD1	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN2);
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	62 e0       	ldi	r22, 0x02	; 2
    129a:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_SET_PIN>
		/*	Disable SSD2	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	60 ef       	ldi	r22, 0xF0	; 240
    12aa:	4a 81       	ldd	r20, Y+2	; 0x02
    12ac:	0e 94 9a 08 	call	0x1134	; 0x1134 <Dio_WriteGroup>
    12b0:	0d c0       	rjmp	.+26     	; 0x12cc <SSD_DisplayNumber+0x6e>
	}else{
		/*	Disable SSD1	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	62 e0       	ldi	r22, 0x02	; 2
    12b6:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
		/*	Enable SSD2	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN1);
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	61 e0       	ldi	r22, 0x01	; 1
    12be:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_SET_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	60 ef       	ldi	r22, 0xF0	; 240
    12c6:	49 81       	ldd	r20, Y+1	; 0x01
    12c8:	0e 94 9a 08 	call	0x1134	; 0x1134 <Dio_WriteGroup>
	}
	Counter++;
    12cc:	80 91 69 00 	lds	r24, 0x0069
    12d0:	8f 5f       	subi	r24, 0xFF	; 255
    12d2:	80 93 69 00 	sts	0x0069, r24
	if(Counter==((2^8)-1)){
    12d6:	80 91 69 00 	lds	r24, 0x0069
    12da:	89 30       	cpi	r24, 0x09	; 9
    12dc:	11 f4       	brne	.+4      	; 0x12e2 <SSD_DisplayNumber+0x84>
		Counter = 0;
    12de:	10 92 69 00 	sts	0x0069, r1
	}
}
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <SSD_Stop>:
//--------------------------------------------------------------------------------------------------
void SSD_Stop(){
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	/*	Disable SSD1	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	62 e0       	ldi	r22, 0x02	; 2
    12fa:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
	/*	Disable SSD2	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <LED_Init>:
#include "LED.h"

void LED_Init(void){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OUTPUT);
    1314:	82 e0       	ldi	r24, 0x02	; 2
    1316:	67 e0       	ldi	r22, 0x07	; 7
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
}
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <LED_ON>:

void LED_ON(void){
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	67 e0       	ldi	r22, 0x07	; 7
    1330:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_SET_PIN>
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <LED_OFF>:

void LED_OFF(void){
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	67 e0       	ldi	r22, 0x07	; 7
    1346:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <LED_TOGGLE>:

void LED_TOGGLE(void){
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
    1358:	82 e0       	ldi	r24, 0x02	; 2
    135a:	67 e0       	ldi	r22, 0x07	; 7
    135c:	0e 94 19 05 	call	0xa32	; 0xa32 <DIO_TOGGLE_PIN>
}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <Heater_Init>:
#include "Heater.h"

void Heater_Init(){
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OUTPUT);
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	64 e0       	ldi	r22, 0x04	; 4
    1372:	41 e0       	ldi	r20, 0x01	; 1
    1374:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <Heater_ON>:

void Heater_ON(){
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Heater_Port, Heater_Pin);
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	64 e0       	ldi	r22, 0x04	; 4
    138a:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_SET_PIN>
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <Heater_OFF>:
void Heater_OFF(){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	64 e0       	ldi	r22, 0x04	; 4
    13a0:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
	LED_OFF();
    13a4:	0e 94 9d 09 	call	0x133a	; 0x133a <LED_OFF>
}
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <Cooler_Init>:
#include "Cooler.h"

void Cooler_Init(){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OUTPUT);
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	64 e0       	ldi	r22, 0x04	; 4
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
}
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <Cooler_ON>:
void Cooler_ON(){
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	64 e0       	ldi	r22, 0x04	; 4
    13d2:	0e 94 1a 04 	call	0x834	; 0x834 <DIO_SET_PIN>
	LED_ON();
    13d6:	0e 94 92 09 	call	0x1324	; 0x1324 <LED_ON>
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <Cooler_OFF>:
void Cooler_OFF(){
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	64 e0       	ldi	r22, 0x04	; 4
    13ec:	0e 94 97 04 	call	0x92e	; 0x92e <DIO_CLEAR_PIN>
	LED_OFF();
    13f0:	0e 94 9d 09 	call	0x133a	; 0x133a <LED_OFF>
}
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <Button_Init>:
#include "Button.h"

void Button_Init(Button_ID Button){
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <Button_Init+0x6>
    1400:	0f 92       	push	r0
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3b 83       	std	Y+3, r19	; 0x03
    1410:	2a 83       	std	Y+2, r18	; 0x02
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	9b 81       	ldd	r25, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	79 f0       	breq	.+30     	; 0x143a <Button_Init+0x40>
    141c:	2a 81       	ldd	r18, Y+2	; 0x02
    141e:	3b 81       	ldd	r19, Y+3	; 0x03
    1420:	22 30       	cpi	r18, 0x02	; 2
    1422:	31 05       	cpc	r19, r1
    1424:	81 f0       	breq	.+32     	; 0x1446 <Button_Init+0x4c>
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	9b 81       	ldd	r25, Y+3	; 0x03
    142a:	00 97       	sbiw	r24, 0x00	; 0
    142c:	89 f4       	brne	.+34     	; 0x1450 <Button_Init+0x56>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	60 e0       	ldi	r22, 0x00	; 0
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
    1438:	0b c0       	rjmp	.+22     	; 0x1450 <Button_Init+0x56>
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	64 e0       	ldi	r22, 0x04	; 4
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <Button_Init+0x56>
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <DIO_WRITE_STATUS>
				break;
		}
}
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <Button_READ>:
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <Button_READ+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Button_READ+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	8a 83       	std	Y+2, r24	; 0x02
	Buttom_Status result;
	switch(Button){
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 83       	std	Y+4, r19	; 0x04
    1472:	2b 83       	std	Y+3, r18	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	79 f0       	breq	.+30     	; 0x149c <Button_READ+0x40>
    147e:	2b 81       	ldd	r18, Y+3	; 0x03
    1480:	3c 81       	ldd	r19, Y+4	; 0x04
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	81 f0       	breq	.+32     	; 0x14a8 <Button_READ+0x4c>
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	89 f4       	brne	.+34     	; 0x14b2 <Button_READ+0x56>
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_READ_LEVEL>
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <Button_READ+0x56>
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	64 e0       	ldi	r22, 0x04	; 4
    14a0:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_READ_LEVEL>
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	05 c0       	rjmp	.+10     	; 0x14b2 <Button_READ+0x56>
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
    14a8:	83 e0       	ldi	r24, 0x03	; 3
    14aa:	62 e0       	ldi	r22, 0x02	; 2
    14ac:	0e 94 38 07 	call	0xe70	; 0xe70 <DIO_READ_LEVEL>
    14b0:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return result;
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <Button_Pullup_Enable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <Button_Pullup_Enable+0x6>
    14c8:	0f 92       	push	r0
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3b 83       	std	Y+3, r19	; 0x03
    14d8:	2a 83       	std	Y+2, r18	; 0x02
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	9b 81       	ldd	r25, Y+3	; 0x03
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	91 05       	cpc	r25, r1
    14e2:	71 f0       	breq	.+28     	; 0x1500 <Button_Pullup_Enable+0x3e>
    14e4:	2a 81       	ldd	r18, Y+2	; 0x02
    14e6:	3b 81       	ldd	r19, Y+3	; 0x03
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	71 f0       	breq	.+28     	; 0x150a <Button_Pullup_Enable+0x48>
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	71 f4       	brne	.+28     	; 0x1512 <Button_Pullup_Enable+0x50>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	0e 94 96 05 	call	0xb2c	; 0xb2c <DIO_ENABLE_PULLUP>
    14fe:	09 c0       	rjmp	.+18     	; 0x1512 <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	64 e0       	ldi	r22, 0x04	; 4
    1504:	0e 94 96 05 	call	0xb2c	; 0xb2c <DIO_ENABLE_PULLUP>
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	0e 94 96 05 	call	0xb2c	; 0xb2c <DIO_ENABLE_PULLUP>
				break;
		}
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	cf 91       	pop	r28
    151a:	df 91       	pop	r29
    151c:	08 95       	ret

0000151e <Button_Pullup_Disable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
    151e:	df 93       	push	r29
    1520:	cf 93       	push	r28
    1522:	00 d0       	rcall	.+0      	; 0x1524 <Button_Pullup_Disable+0x6>
    1524:	0f 92       	push	r0
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	3b 83       	std	Y+3, r19	; 0x03
    1534:	2a 83       	std	Y+2, r18	; 0x02
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	9b 81       	ldd	r25, Y+3	; 0x03
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	91 05       	cpc	r25, r1
    153e:	71 f0       	breq	.+28     	; 0x155c <Button_Pullup_Disable+0x3e>
    1540:	2a 81       	ldd	r18, Y+2	; 0x02
    1542:	3b 81       	ldd	r19, Y+3	; 0x03
    1544:	22 30       	cpi	r18, 0x02	; 2
    1546:	31 05       	cpc	r19, r1
    1548:	71 f0       	breq	.+28     	; 0x1566 <Button_Pullup_Disable+0x48>
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	71 f4       	brne	.+28     	; 0x156e <Button_Pullup_Disable+0x50>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	0e 94 65 06 	call	0xcca	; 0xcca <DIO_DISABLE_PULLUP>
    155a:	09 c0       	rjmp	.+18     	; 0x156e <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	64 e0       	ldi	r22, 0x04	; 4
    1560:	0e 94 65 06 	call	0xcca	; 0xcca <DIO_DISABLE_PULLUP>
    1564:	04 c0       	rjmp	.+8      	; 0x156e <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	0e 94 65 06 	call	0xcca	; 0xcca <DIO_DISABLE_PULLUP>
				break;
		}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <main>:
#include "Lib.h"
#include "Main_Types.h"
#include "Services.h"


int main (){
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	00 d0       	rcall	.+0      	; 0x1580 <main+0x6>
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Timer0_Init();
    1584:	0e 94 34 03 	call	0x668	; 0x668 <Timer0_Init>
	Timer1_Init();
    1588:	0e 94 56 02 	call	0x4ac	; 0x4ac <Timer1_Init>
	Timer2_Init();
    158c:	0e 94 8c 01 	call	0x318	; 0x318 <Timer2_Init>
	Heater_Init();
    1590:	0e 94 b3 09 	call	0x1366	; 0x1366 <Heater_Init>
	Cooler_Init();
    1594:	0e 94 d7 09 	call	0x13ae	; 0x13ae <Cooler_Init>
	//	TempSen_Init();
	SSD_Init();
    1598:	0e 94 0a 09 	call	0x1214	; 0x1214 <SSD_Init>
	Button_Init(BUTTON0);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Button_Init>
	Button_Init(BUTTON1);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Button_Init>
	Button_Init(BUTTON2);
    15a8:	82 e0       	ldi	r24, 0x02	; 2
    15aa:	0e 94 fd 09 	call	0x13fa	; 0x13fa <Button_Init>
	LED_Init();
    15ae:	0e 94 86 09 	call	0x130c	; 0x130c <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
    15b2:	19 82       	std	Y+1, r1	; 0x01
	ButtonEnable = TRUE;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 6f 00 	sts	0x006F, r24
	Mode = Temp_Control;
    15ba:	10 92 6e 00 	sts	0x006E, r1
	Curr_Temp = 0;
    15be:	10 92 6b 00 	sts	0x006B, r1
	Restore_Temp();
    15c2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Restore_Temp>
	Update_Temp_En = TRUE;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 93 6c 00 	sts	0x006C, r24
	Blink_Status = FALSE;
    15cc:	10 92 6a 00 	sts	0x006A, r1
	Timer2_Start(TIMER2_1024_);
    15d0:	87 e0       	ldi	r24, 0x07	; 7
    15d2:	0e 94 a1 01 	call	0x342	; 0x342 <Timer2_Start>
	Timer2_EnableInterrupt();
    15d6:	0e 94 33 02 	call	0x466	; 0x466 <Timer2_EnableInterrupt>
		SSD_DisplayNumber(54);*/


		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	0e 94 2e 0a 	call	0x145c	; 0x145c <Button_READ>
    15e0:	88 23       	and	r24, r24
    15e2:	71 f0       	breq	.+28     	; 0x1600 <main+0x86>
			if(ButtonEnable == TRUE){
    15e4:	80 91 6f 00 	lds	r24, 0x006F
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	41 f4       	brne	.+16     	; 0x15fc <main+0x82>
				SystemStatus = !SystemStatus;
    15ec:	1a 82       	std	Y+2, r1	; 0x02
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
    15f0:	88 23       	and	r24, r24
    15f2:	11 f4       	brne	.+4      	; 0x15f8 <main+0x7e>
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
			}
			Debounce_Handler();
    15fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Debounce_Handler>
		}

		if(SystemStatus==OFF){
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 23       	and	r24, r24
    1604:	39 f4       	brne	.+14     	; 0x1614 <main+0x9a>
			Heater_OFF();
    1606:	0e 94 ca 09 	call	0x1394	; 0x1394 <Heater_OFF>
			Cooler_OFF();
    160a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Cooler_OFF>
			SSD_Stop();
    160e:	0e 94 77 09 	call	0x12ee	; 0x12ee <SSD_Stop>
    1612:	e3 cf       	rjmp	.-58     	; 0x15da <main+0x60>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
    1614:	80 91 6c 00 	lds	r24, 0x006C
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	11 f4       	brne	.+4      	; 0x1620 <main+0xa6>
			Update_Temp();
    161c:	0e 94 88 00 	call	0x110	; 0x110 <Update_Temp>
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	0e 94 2e 0a 	call	0x145c	; 0x145c <Button_READ>
    1626:	88 23       	and	r24, r24
    1628:	29 f4       	brne	.+10     	; 0x1634 <main+0xba>
    162a:	82 e0       	ldi	r24, 0x02	; 2
    162c:	0e 94 2e 0a 	call	0x145c	; 0x145c <Button_READ>
    1630:	88 23       	and	r24, r24
    1632:	29 f1       	breq	.+74     	; 0x167e <main+0x104>
			if(ButtonEnable == TRUE){
    1634:	80 91 6f 00 	lds	r24, 0x006F
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	f9 f4       	brne	.+62     	; 0x167a <main+0x100>

				Mode_Handler();
    163c:	0e 94 34 01 	call	0x268	; 0x268 <Mode_Handler>
				Mode = Temp_Set;
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	80 93 6e 00 	sts	0x006E, r24

				if(Button_READ(BUTTON0)){
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 2e 0a 	call	0x145c	; 0x145c <Button_READ>
    164c:	88 23       	and	r24, r24
    164e:	51 f0       	breq	.+20     	; 0x1664 <main+0xea>
					if(Des_Temp<Max_Temp){
    1650:	80 91 6d 00 	lds	r24, 0x006D
    1654:	80 35       	cpi	r24, 0x50	; 80
    1656:	78 f4       	brcc	.+30     	; 0x1676 <main+0xfc>
						Des_Temp +=5;
    1658:	80 91 6d 00 	lds	r24, 0x006D
    165c:	8b 5f       	subi	r24, 0xFB	; 251
    165e:	80 93 6d 00 	sts	0x006D, r24
    1662:	09 c0       	rjmp	.+18     	; 0x1676 <main+0xfc>
					}
				}else{
					if(Des_Temp>Min_Temp){
    1664:	80 91 6d 00 	lds	r24, 0x006D
    1668:	8f 31       	cpi	r24, 0x1F	; 31
    166a:	28 f0       	brcs	.+10     	; 0x1676 <main+0xfc>
						Des_Temp -=5;
    166c:	80 91 6d 00 	lds	r24, 0x006D
    1670:	85 50       	subi	r24, 0x05	; 5
    1672:	80 93 6d 00 	sts	0x006D, r24
					}
				}
				Store_Temp();
    1676:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Store_Temp>

			}
			Debounce_Handler();
    167a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
    167e:	80 91 6e 00 	lds	r24, 0x006E
    1682:	88 23       	and	r24, r24
    1684:	29 f4       	brne	.+10     	; 0x1690 <main+0x116>
			SSD_DisplayNumber(Curr_Temp);
    1686:	80 91 6b 00 	lds	r24, 0x006B
    168a:	0e 94 2f 09 	call	0x125e	; 0x125e <SSD_DisplayNumber>
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <main+0x13c>
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
    1690:	80 91 6e 00 	lds	r24, 0x006E
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	59 f4       	brne	.+22     	; 0x16ae <main+0x134>
    1698:	80 91 6a 00 	lds	r24, 0x006A
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	39 f4       	brne	.+14     	; 0x16ae <main+0x134>
			SSD_DisplayNumber(Des_Temp);
    16a0:	80 91 6d 00 	lds	r24, 0x006D
    16a4:	0e 94 2f 09 	call	0x125e	; 0x125e <SSD_DisplayNumber>
			LED_ON();
    16a8:	0e 94 92 09 	call	0x1324	; 0x1324 <LED_ON>
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <main+0x13c>
		}else{
			SSD_Stop();
    16ae:	0e 94 77 09 	call	0x12ee	; 0x12ee <SSD_Stop>
			LED_OFF();
    16b2:	0e 94 9d 09 	call	0x133a	; 0x133a <LED_OFF>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
    16b6:	80 91 6b 00 	lds	r24, 0x006B
    16ba:	88 2f       	mov	r24, r24
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 01       	movw	r18, r24
    16c0:	2b 5f       	subi	r18, 0xFB	; 251
    16c2:	3f 4f       	sbci	r19, 0xFF	; 255
    16c4:	80 91 6d 00 	lds	r24, 0x006D
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	28 17       	cp	r18, r24
    16ce:	39 07       	cpc	r19, r25
    16d0:	64 f4       	brge	.+24     	; 0x16ea <main+0x170>
			Heater_ON();
    16d2:	0e 94 bf 09 	call	0x137e	; 0x137e <Heater_ON>
			if(Blink_Status==TRUE){
    16d6:	80 91 6a 00 	lds	r24, 0x006A
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	19 f4       	brne	.+6      	; 0x16e4 <main+0x16a>
				LED_ON();
    16de:	0e 94 92 09 	call	0x1324	; 0x1324 <LED_ON>
    16e2:	7b cf       	rjmp	.-266    	; 0x15da <main+0x60>
			}else{
				LED_OFF();
    16e4:	0e 94 9d 09 	call	0x133a	; 0x133a <LED_OFF>
    16e8:	78 cf       	rjmp	.-272    	; 0x15da <main+0x60>
			}
		}else if((Curr_Temp-5)>Des_Temp){
    16ea:	80 91 6b 00 	lds	r24, 0x006B
    16ee:	88 2f       	mov	r24, r24
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9c 01       	movw	r18, r24
    16f4:	25 50       	subi	r18, 0x05	; 5
    16f6:	30 40       	sbci	r19, 0x00	; 0
    16f8:	80 91 6d 00 	lds	r24, 0x006D
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	82 17       	cp	r24, r18
    1702:	93 07       	cpc	r25, r19
    1704:	1c f4       	brge	.+6      	; 0x170c <main+0x192>
			Cooler_ON();
    1706:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <Cooler_ON>
    170a:	67 cf       	rjmp	.-306    	; 0x15da <main+0x60>
		}else{
			Cooler_OFF();
    170c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <Cooler_OFF>
			Heater_OFF();
    1710:	0e 94 ca 09 	call	0x1394	; 0x1394 <Heater_OFF>
    1714:	62 cf       	rjmp	.-316    	; 0x15da <main+0x60>

00001716 <__udivmodqi4>:
    1716:	99 1b       	sub	r25, r25
    1718:	79 e0       	ldi	r23, 0x09	; 9
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <__udivmodqi4_ep>

0000171c <__udivmodqi4_loop>:
    171c:	99 1f       	adc	r25, r25
    171e:	96 17       	cp	r25, r22
    1720:	08 f0       	brcs	.+2      	; 0x1724 <__udivmodqi4_ep>
    1722:	96 1b       	sub	r25, r22

00001724 <__udivmodqi4_ep>:
    1724:	88 1f       	adc	r24, r24
    1726:	7a 95       	dec	r23
    1728:	c9 f7       	brne	.-14     	; 0x171c <__udivmodqi4_loop>
    172a:	80 95       	com	r24
    172c:	08 95       	ret

0000172e <_exit>:
    172e:	f8 94       	cli

00001730 <__stop_program>:
    1730:	ff cf       	rjmp	.-2      	; 0x1730 <__stop_program>
