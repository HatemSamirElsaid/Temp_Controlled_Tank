
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000172e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000172e  000017c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  000017c4  2**0
                  ALLOC
  3 .stab         00002e68  00000000  00000000  000017c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b91  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 42 01 	jmp	0x284	; 0x284 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b7 0a 	call	0x156e	; 0x156e <main>
      8a:	0c 94 95 0b 	jmp	0x172a	; 0x172a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_5>:
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	8f 93       	push	r24
      9e:	df 93       	push	r29
      a0:	cf 93       	push	r28
      a2:	cd b7       	in	r28, 0x3d	; 61
      a4:	de b7       	in	r29, 0x3e	; 62
      a6:	81 e0       	ldi	r24, 0x01	; 1
      a8:	80 93 6c 00 	sts	0x006C, r24
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	8f 91       	pop	r24
      b2:	0f 90       	pop	r0
      b4:	0f be       	out	0x3f, r0	; 63
      b6:	0f 90       	pop	r0
      b8:	1f 90       	pop	r1
      ba:	18 95       	reti

000000bc <Calc_Average>:

ISR (TIMER2_OVF_vect){
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	00 d0       	rcall	.+0      	; 0xc2 <Calc_Average+0x6>
      c2:	0f 92       	push	r0
      c4:	cd b7       	in	r28, 0x3d	; 61
      c6:	de b7       	in	r29, 0x3e	; 62
	u8 result = 0;
      c8:	1b 82       	std	Y+3, r1	; 0x03
	for(int i=0;i<5;i++){
      ca:	1a 82       	std	Y+2, r1	; 0x02
      cc:	19 82       	std	Y+1, r1	; 0x01
      ce:	0e c0       	rjmp	.+28     	; 0xec <Calc_Average+0x30>
		result+=Temp_arr[i];
      d0:	89 81       	ldd	r24, Y+1	; 0x01
      d2:	9a 81       	ldd	r25, Y+2	; 0x02
      d4:	fc 01       	movw	r30, r24
      d6:	ed 59       	subi	r30, 0x9D	; 157
      d8:	ff 4f       	sbci	r31, 0xFF	; 255
      da:	90 81       	ld	r25, Z
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	89 0f       	add	r24, r25
      e0:	8b 83       	std	Y+3, r24	; 0x03
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
	u8 result = 0;
	for(int i=0;i<5;i++){
      e2:	89 81       	ldd	r24, Y+1	; 0x01
      e4:	9a 81       	ldd	r25, Y+2	; 0x02
      e6:	01 96       	adiw	r24, 0x01	; 1
      e8:	9a 83       	std	Y+2, r25	; 0x02
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	89 81       	ldd	r24, Y+1	; 0x01
      ee:	9a 81       	ldd	r25, Y+2	; 0x02
      f0:	85 30       	cpi	r24, 0x05	; 5
      f2:	91 05       	cpc	r25, r1
      f4:	6c f3       	brlt	.-38     	; 0xd0 <Calc_Average+0x14>
		result+=Temp_arr[i];
	}
	result /=5;
      f6:	8b 81       	ldd	r24, Y+3	; 0x03
      f8:	95 e0       	ldi	r25, 0x05	; 5
      fa:	69 2f       	mov	r22, r25
      fc:	0e 94 89 0b 	call	0x1712	; 0x1712 <__udivmodqi4>
     100:	8b 83       	std	Y+3, r24	; 0x03
	return result;
     102:	8b 81       	ldd	r24, Y+3	; 0x03
}
     104:	0f 90       	pop	r0
     106:	0f 90       	pop	r0
     108:	0f 90       	pop	r0
     10a:	cf 91       	pop	r28
     10c:	df 91       	pop	r29
     10e:	08 95       	ret

00000110 <Update_Temp>:

void Update_Temp(void){
     110:	df 93       	push	r29
     112:	cf 93       	push	r28
     114:	00 d0       	rcall	.+0      	; 0x116 <Update_Temp+0x6>
     116:	00 d0       	rcall	.+0      	; 0x118 <Update_Temp+0x8>
     118:	0f 92       	push	r0
     11a:	cd b7       	in	r28, 0x3d	; 61
     11c:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     11e:	80 91 62 00 	lds	r24, 0x0062
     122:	8d 30       	cpi	r24, 0x0D	; 13
     124:	09 f0       	breq	.+2      	; 0x128 <Update_Temp+0x18>
     126:	3f c0       	rjmp	.+126    	; 0x1a6 <Update_Temp+0x96>
		Timer2_Stop();
     128:	0e 94 28 02 	call	0x450	; 0x450 <Timer2_Stop>
		Blink_Status = !Blink_Status;
     12c:	80 91 6a 00 	lds	r24, 0x006A
     130:	1d 82       	std	Y+5, r1	; 0x05
     132:	88 23       	and	r24, r24
     134:	11 f4       	brne	.+4      	; 0x13a <Update_Temp+0x2a>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	8d 83       	std	Y+5, r24	; 0x05
     13a:	8d 81       	ldd	r24, Y+5	; 0x05
     13c:	80 93 6a 00 	sts	0x006A, r24
		u8 Temp = 0/*TempSen_Read()*/;
     140:	1c 82       	std	Y+4, r1	; 0x04
		u8 Var1 = Temp_arr[0];
     142:	80 91 63 00 	lds	r24, 0x0063
     146:	8b 83       	std	Y+3, r24	; 0x03
		for(int i=0;i<4;i++){
     148:	1a 82       	std	Y+2, r1	; 0x02
     14a:	19 82       	std	Y+1, r1	; 0x01
     14c:	20 c0       	rjmp	.+64     	; 0x18e <Update_Temp+0x7e>
			if(i==0){
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	00 97       	sbiw	r24, 0x00	; 0
     154:	41 f4       	brne	.+16     	; 0x166 <Update_Temp+0x56>
				Temp_arr[i] = Temp;
     156:	89 81       	ldd	r24, Y+1	; 0x01
     158:	9a 81       	ldd	r25, Y+2	; 0x02
     15a:	fc 01       	movw	r30, r24
     15c:	ed 59       	subi	r30, 0x9D	; 157
     15e:	ff 4f       	sbci	r31, 0xFF	; 255
     160:	8c 81       	ldd	r24, Y+4	; 0x04
     162:	80 83       	st	Z, r24
     164:	0f c0       	rjmp	.+30     	; 0x184 <Update_Temp+0x74>
			}
			else{
				Temp_arr[i] = Var1;
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	9a 81       	ldd	r25, Y+2	; 0x02
     16a:	fc 01       	movw	r30, r24
     16c:	ed 59       	subi	r30, 0x9D	; 157
     16e:	ff 4f       	sbci	r31, 0xFF	; 255
     170:	8b 81       	ldd	r24, Y+3	; 0x03
     172:	80 83       	st	Z, r24
				Var1 = Temp_arr[i+1];
     174:	89 81       	ldd	r24, Y+1	; 0x01
     176:	9a 81       	ldd	r25, Y+2	; 0x02
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	fc 01       	movw	r30, r24
     17c:	ed 59       	subi	r30, 0x9D	; 157
     17e:	ff 4f       	sbci	r31, 0xFF	; 255
     180:	80 81       	ld	r24, Z
     182:	8b 83       	std	Y+3, r24	; 0x03
	if(Counter==13){
		Timer2_Stop();
		Blink_Status = !Blink_Status;
		u8 Temp = 0/*TempSen_Read()*/;
		u8 Var1 = Temp_arr[0];
		for(int i=0;i<4;i++){
     184:	89 81       	ldd	r24, Y+1	; 0x01
     186:	9a 81       	ldd	r25, Y+2	; 0x02
     188:	01 96       	adiw	r24, 0x01	; 1
     18a:	9a 83       	std	Y+2, r25	; 0x02
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	89 81       	ldd	r24, Y+1	; 0x01
     190:	9a 81       	ldd	r25, Y+2	; 0x02
     192:	84 30       	cpi	r24, 0x04	; 4
     194:	91 05       	cpc	r25, r1
     196:	dc f2       	brlt	.-74     	; 0x14e <Update_Temp+0x3e>
			else{
				Temp_arr[i] = Var1;
				Var1 = Temp_arr[i+1];
			}
		}
		Curr_Temp=Calc_Average();
     198:	0e 94 5e 00 	call	0xbc	; 0xbc <Calc_Average>
     19c:	80 93 6b 00 	sts	0x006B, r24
		Counter=0;
     1a0:	10 92 62 00 	sts	0x0062, r1
     1a4:	08 c0       	rjmp	.+16     	; 0x1b6 <Update_Temp+0xa6>
	}
	else{
		Counter++;
     1a6:	80 91 62 00 	lds	r24, 0x0062
     1aa:	8f 5f       	subi	r24, 0xFF	; 255
     1ac:	80 93 62 00 	sts	0x0062, r24
		Timer2_Start(TIMER2_1024_);
     1b0:	87 e0       	ldi	r24, 0x07	; 7
     1b2:	0e 94 a3 01 	call	0x346	; 0x346 <Timer2_Start>
	}
	Update_Temp_En =FALSE;
     1b6:	10 92 6c 00 	sts	0x006C, r1
}
     1ba:	0f 90       	pop	r0
     1bc:	0f 90       	pop	r0
     1be:	0f 90       	pop	r0
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	cf 91       	pop	r28
     1c6:	df 91       	pop	r29
     1c8:	08 95       	ret

000001ca <Store_Temp>:
#include "Store_Temp.h"


void Store_Temp(void){
     1ca:	df 93       	push	r29
     1cc:	cf 93       	push	r28
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
//	EEPROM_Write((u16)1,Des_Temp);
}
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <Restore_Temp>:
#include "Restore_Temp.h"

static u8 CHK = 0b01010101;


void Restore_Temp(void){
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <Restore_Temp+0x6>
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
	u8 Reading=0;
     1e4:	1b 82       	std	Y+3, r1	; 0x03
	u16 Add=0;
     1e6:	1a 82       	std	Y+2, r1	; 0x02
     1e8:	19 82       	std	Y+1, r1	; 0x01

	//Reading = EEPROM_Read(Add);
	if (Reading == CHK){
     1ea:	90 91 60 00 	lds	r25, 0x0060
     1ee:	8b 81       	ldd	r24, Y+3	; 0x03
     1f0:	89 17       	cp	r24, r25
     1f2:	19 f4       	brne	.+6      	; 0x1fa <Restore_Temp+0x22>
		Des_Temp = 0/*EEPROM_Read(Add+1)*/;
     1f4:	10 92 6d 00 	sts	0x006D, r1
     1f8:	03 c0       	rjmp	.+6      	; 0x200 <Restore_Temp+0x28>
	}
	else{
		//EEPROM_Write(Add,CHK);
		//EEPROM_Write(Add+1,(u8)default_Temp);
		Des_Temp = default_Temp;
     1fa:	8c e3       	ldi	r24, 0x3C	; 60
     1fc:	80 93 6d 00 	sts	0x006D, r24
	}
}
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	cf 91       	pop	r28
     208:	df 91       	pop	r29
     20a:	08 95       	ret

0000020c <__vector_9>:
#include "Mode_Handler.h"



ISR(TIMER1_OVF_vect){
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
     216:	2f 93       	push	r18
     218:	3f 93       	push	r19
     21a:	4f 93       	push	r20
     21c:	5f 93       	push	r21
     21e:	6f 93       	push	r22
     220:	7f 93       	push	r23
     222:	8f 93       	push	r24
     224:	9f 93       	push	r25
     226:	af 93       	push	r26
     228:	bf 93       	push	r27
     22a:	ef 93       	push	r30
     22c:	ff 93       	push	r31
     22e:	df 93       	push	r29
     230:	cf 93       	push	r28
     232:	cd b7       	in	r28, 0x3d	; 61
     234:	de b7       	in	r29, 0x3e	; 62
	Mode = Temp_Control;
     236:	10 92 6e 00 	sts	0x006E, r1
	Timer1_Stop();
     23a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Timer1_Stop>
	Timer1_DisableInterrupt();
     23e:	0e 94 20 03 	call	0x640	; 0x640 <Timer1_DisableInterrupt>
}
     242:	cf 91       	pop	r28
     244:	df 91       	pop	r29
     246:	ff 91       	pop	r31
     248:	ef 91       	pop	r30
     24a:	bf 91       	pop	r27
     24c:	af 91       	pop	r26
     24e:	9f 91       	pop	r25
     250:	8f 91       	pop	r24
     252:	7f 91       	pop	r23
     254:	6f 91       	pop	r22
     256:	5f 91       	pop	r21
     258:	4f 91       	pop	r20
     25a:	3f 91       	pop	r19
     25c:	2f 91       	pop	r18
     25e:	0f 90       	pop	r0
     260:	0f be       	out	0x3f, r0	; 63
     262:	0f 90       	pop	r0
     264:	1f 90       	pop	r1
     266:	18 95       	reti

00000268 <Mode_Handler>:

void Mode_Handler(void){
     268:	df 93       	push	r29
     26a:	cf 93       	push	r28
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	Timer1_Stop();
     270:	0e 94 fe 02 	call	0x5fc	; 0x5fc <Timer1_Stop>
	Timer1_EnableInterrupt();
     274:	0e 94 0b 03 	call	0x616	; 0x616 <Timer1_EnableInterrupt>
	Timer1_Start(TIMER1_1024_);
     278:	85 e0       	ldi	r24, 0x05	; 5
     27a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Timer1_Start>
}
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret

00000284 <__vector_11>:
#include "Debounce_Handler.h"

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	2f 93       	push	r18
     290:	3f 93       	push	r19
     292:	4f 93       	push	r20
     294:	5f 93       	push	r21
     296:	6f 93       	push	r22
     298:	7f 93       	push	r23
     29a:	8f 93       	push	r24
     29c:	9f 93       	push	r25
     29e:	af 93       	push	r26
     2a0:	bf 93       	push	r27
     2a2:	ef 93       	push	r30
     2a4:	ff 93       	push	r31
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	cd b7       	in	r28, 0x3d	; 61
     2ac:	de b7       	in	r29, 0x3e	; 62
	if(Counter==13){
     2ae:	80 91 68 00 	lds	r24, 0x0068
     2b2:	8d 30       	cpi	r24, 0x0D	; 13
     2b4:	51 f4       	brne	.+20     	; 0x2ca <__vector_11+0x46>
		ButtonEnable = TRUE;
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	80 93 6f 00 	sts	0x006F, r24
		Timer0_Stop();
     2bc:	0e 94 c8 03 	call	0x790	; 0x790 <Timer0_Stop>
		Timer0_DisableInterrupt();
     2c0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <Timer0_DisableInterrupt>
		Counter = 0;
     2c4:	10 92 68 00 	sts	0x0068, r1
     2c8:	08 c0       	rjmp	.+16     	; 0x2da <__vector_11+0x56>
	}
	else{
		Counter++;
     2ca:	80 91 68 00 	lds	r24, 0x0068
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	80 93 68 00 	sts	0x0068, r24
		Timer0_Start(TIMER0_1024_);
     2d4:	85 e0       	ldi	r24, 0x05	; 5
     2d6:	0e 94 43 03 	call	0x686	; 0x686 <Timer0_Start>
	}

}
     2da:	cf 91       	pop	r28
     2dc:	df 91       	pop	r29
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	0f 90       	pop	r0
     2fc:	1f 90       	pop	r1
     2fe:	18 95       	reti

00000300 <Debounce_Handler>:

void Debounce_Handler(void){
     300:	df 93       	push	r29
     302:	cf 93       	push	r28
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	ButtonEnable = FALSE;
     308:	10 92 6f 00 	sts	0x006F, r1
	Timer0_Start(TIMER0_1024_);
     30c:	85 e0       	ldi	r24, 0x05	; 5
     30e:	0e 94 43 03 	call	0x686	; 0x686 <Timer0_Start>
	Timer0_EnableInterrupt();
     312:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Timer0_EnableInterrupt>
}
     316:	cf 91       	pop	r28
     318:	df 91       	pop	r29
     31a:	08 95       	ret

0000031c <Timer2_Init>:


#include "Timer2.h"


void Timer2_Init(void){
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62

	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM20);
     324:	a5 e4       	ldi	r26, 0x45	; 69
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	e5 e4       	ldi	r30, 0x45	; 69
     32a:	f0 e0       	ldi	r31, 0x00	; 0
     32c:	80 81       	ld	r24, Z
     32e:	8f 7b       	andi	r24, 0xBF	; 191
     330:	8c 93       	st	X, r24
	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM21);
     332:	a5 e4       	ldi	r26, 0x45	; 69
     334:	b0 e0       	ldi	r27, 0x00	; 0
     336:	e5 e4       	ldi	r30, 0x45	; 69
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	87 7f       	andi	r24, 0xF7	; 247
     33e:	8c 93       	st	X, r24
}
     340:	cf 91       	pop	r28
     342:	df 91       	pop	r29
     344:	08 95       	ret

00000346 <Timer2_Start>:


void Timer2_Start(TIMER2_PreScaler_ID prescaler){
     346:	df 93       	push	r29
     348:	cf 93       	push	r28
     34a:	00 d0       	rcall	.+0      	; 0x34c <Timer2_Start+0x6>
     34c:	0f 92       	push	r0
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	89 83       	std	Y+1, r24	; 0x01

	TIMER2_TCNT2_REG |=0x00;  //Reset
     354:	a4 e4       	ldi	r26, 0x44	; 68
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	e4 e4       	ldi	r30, 0x44	; 68
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	80 81       	ld	r24, Z
     35e:	8c 93       	st	X, r24

	switch(prescaler){
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	3b 83       	std	Y+3, r19	; 0x03
     368:	2a 83       	std	Y+2, r18	; 0x02
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	83 30       	cpi	r24, 0x03	; 3
     370:	91 05       	cpc	r25, r1
     372:	09 f4       	brne	.+2      	; 0x376 <Timer2_Start+0x30>
     374:	40 c0       	rjmp	.+128    	; 0x3f6 <Timer2_Start+0xb0>
     376:	2a 81       	ldd	r18, Y+2	; 0x02
     378:	3b 81       	ldd	r19, Y+3	; 0x03
     37a:	24 30       	cpi	r18, 0x04	; 4
     37c:	31 05       	cpc	r19, r1
     37e:	7c f4       	brge	.+30     	; 0x39e <Timer2_Start+0x58>
     380:	8a 81       	ldd	r24, Y+2	; 0x02
     382:	9b 81       	ldd	r25, Y+3	; 0x03
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	91 05       	cpc	r25, r1
     388:	31 f1       	breq	.+76     	; 0x3d6 <Timer2_Start+0x90>
     38a:	2a 81       	ldd	r18, Y+2	; 0x02
     38c:	3b 81       	ldd	r19, Y+3	; 0x03
     38e:	22 30       	cpi	r18, 0x02	; 2
     390:	31 05       	cpc	r19, r1
     392:	4c f5       	brge	.+82     	; 0x3e6 <Timer2_Start+0xa0>
     394:	8a 81       	ldd	r24, Y+2	; 0x02
     396:	9b 81       	ldd	r25, Y+3	; 0x03
     398:	00 97       	sbiw	r24, 0x00	; 0
     39a:	b1 f0       	breq	.+44     	; 0x3c8 <Timer2_Start+0x82>
     39c:	53 c0       	rjmp	.+166    	; 0x444 <Timer2_Start+0xfe>
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	25 30       	cpi	r18, 0x05	; 5
     3a4:	31 05       	cpc	r19, r1
     3a6:	b9 f1       	breq	.+110    	; 0x416 <Timer2_Start+0xd0>
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	91 05       	cpc	r25, r1
     3b0:	54 f1       	brlt	.+84     	; 0x406 <Timer2_Start+0xc0>
     3b2:	2a 81       	ldd	r18, Y+2	; 0x02
     3b4:	3b 81       	ldd	r19, Y+3	; 0x03
     3b6:	26 30       	cpi	r18, 0x06	; 6
     3b8:	31 05       	cpc	r19, r1
     3ba:	a9 f1       	breq	.+106    	; 0x426 <Timer2_Start+0xe0>
     3bc:	8a 81       	ldd	r24, Y+2	; 0x02
     3be:	9b 81       	ldd	r25, Y+3	; 0x03
     3c0:	87 30       	cpi	r24, 0x07	; 7
     3c2:	91 05       	cpc	r25, r1
     3c4:	c1 f1       	breq	.+112    	; 0x436 <Timer2_Start+0xf0>
     3c6:	3e c0       	rjmp	.+124    	; 0x444 <Timer2_Start+0xfe>

	case TIMER2_Stop_:

		TIMER2_TCCR2_REG |= Timer2_Stopped;
     3c8:	e5 e4       	ldi	r30, 0x45	; 69
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	a5 e4       	ldi	r26, 0x45	; 69
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	8c 91       	ld	r24, X
     3d2:	80 83       	st	Z, r24
     3d4:	37 c0       	rjmp	.+110    	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_None_:

		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
     3d6:	a5 e4       	ldi	r26, 0x45	; 69
     3d8:	b0 e0       	ldi	r27, 0x00	; 0
     3da:	e5 e4       	ldi	r30, 0x45	; 69
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	80 81       	ld	r24, Z
     3e0:	81 60       	ori	r24, 0x01	; 1
     3e2:	8c 93       	st	X, r24
     3e4:	2f c0       	rjmp	.+94     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_8_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
     3e6:	a5 e4       	ldi	r26, 0x45	; 69
     3e8:	b0 e0       	ldi	r27, 0x00	; 0
     3ea:	e5 e4       	ldi	r30, 0x45	; 69
     3ec:	f0 e0       	ldi	r31, 0x00	; 0
     3ee:	80 81       	ld	r24, Z
     3f0:	82 60       	ori	r24, 0x02	; 2
     3f2:	8c 93       	st	X, r24
     3f4:	27 c0       	rjmp	.+78     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_32_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
     3f6:	a5 e4       	ldi	r26, 0x45	; 69
     3f8:	b0 e0       	ldi	r27, 0x00	; 0
     3fa:	e5 e4       	ldi	r30, 0x45	; 69
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	83 60       	ori	r24, 0x03	; 3
     402:	8c 93       	st	X, r24
     404:	1f c0       	rjmp	.+62     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_64_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
     406:	a5 e4       	ldi	r26, 0x45	; 69
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e5 e4       	ldi	r30, 0x45	; 69
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	84 60       	ori	r24, 0x04	; 4
     412:	8c 93       	st	X, r24
     414:	17 c0       	rjmp	.+46     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_128_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_128;
     416:	a5 e4       	ldi	r26, 0x45	; 69
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	e5 e4       	ldi	r30, 0x45	; 69
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	85 60       	ori	r24, 0x05	; 5
     422:	8c 93       	st	X, r24
     424:	0f c0       	rjmp	.+30     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_256_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
     426:	a5 e4       	ldi	r26, 0x45	; 69
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	e5 e4       	ldi	r30, 0x45	; 69
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	80 81       	ld	r24, Z
     430:	86 60       	ori	r24, 0x06	; 6
     432:	8c 93       	st	X, r24
     434:	07 c0       	rjmp	.+14     	; 0x444 <Timer2_Start+0xfe>
		break;

	case TIMER2_1024_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_1024;
     436:	a5 e4       	ldi	r26, 0x45	; 69
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	e5 e4       	ldi	r30, 0x45	; 69
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	87 60       	ori	r24, 0x07	; 7
     442:	8c 93       	st	X, r24
		break;
    }
}
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
     448:	0f 90       	pop	r0
     44a:	cf 91       	pop	r28
     44c:	df 91       	pop	r29
     44e:	08 95       	ret

00000450 <Timer2_Stop>:


void Timer2_Stop(void){
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62

	TIMER2_TCCR2_REG |=Timer2_Stopped;
     458:	e5 e4       	ldi	r30, 0x45	; 69
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	a5 e4       	ldi	r26, 0x45	; 69
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	8c 91       	ld	r24, X
     462:	80 83       	st	Z, r24
}
     464:	cf 91       	pop	r28
     466:	df 91       	pop	r29
     468:	08 95       	ret

0000046a <Timer2_EnableInterrupt>:


void Timer2_EnableInterrupt(void){
     46a:	df 93       	push	r29
     46c:	cf 93       	push	r28
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     472:	af e5       	ldi	r26, 0x5F	; 95
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	ef e5       	ldi	r30, 0x5F	; 95
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	80 81       	ld	r24, Z
     47c:	80 68       	ori	r24, 0x80	; 128
     47e:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     480:	a9 e5       	ldi	r26, 0x59	; 89
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	e9 e5       	ldi	r30, 0x59	; 89
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	80 81       	ld	r24, Z
     48a:	80 64       	ori	r24, 0x40	; 64
     48c:	8c 93       	st	X, r24
}
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <Timer2_DisableInterrupt>:


void Timer2_DisableInterrupt(void){
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
     49c:	a9 e5       	ldi	r26, 0x59	; 89
     49e:	b0 e0       	ldi	r27, 0x00	; 0
     4a0:	e9 e5       	ldi	r30, 0x59	; 89
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8f 7b       	andi	r24, 0xBF	; 191
     4a8:	8c 93       	st	X, r24
}
     4aa:	cf 91       	pop	r28
     4ac:	df 91       	pop	r29
     4ae:	08 95       	ret

000004b0 <Timer1_Init>:
 *      Author: Marina
 */

#include "Timer1.h"

void Timer1_Init(void){
     4b0:	df 93       	push	r29
     4b2:	cf 93       	push	r28
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62

	 //interval Mode
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM10);
     4b8:	af e4       	ldi	r26, 0x4F	; 79
     4ba:	b0 e0       	ldi	r27, 0x00	; 0
     4bc:	ef e4       	ldi	r30, 0x4F	; 79
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	8e 7f       	andi	r24, 0xFE	; 254
     4c4:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM11);
     4c6:	af e4       	ldi	r26, 0x4F	; 79
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	ef e4       	ldi	r30, 0x4F	; 79
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	8d 7f       	andi	r24, 0xFD	; 253
     4d2:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM12);
     4d4:	ae e4       	ldi	r26, 0x4E	; 78
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	ee e4       	ldi	r30, 0x4E	; 78
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	87 7f       	andi	r24, 0xF7	; 247
     4e0:	8c 93       	st	X, r24
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM13);
     4e2:	ae e4       	ldi	r26, 0x4E	; 78
     4e4:	b0 e0       	ldi	r27, 0x00	; 0
     4e6:	ee e4       	ldi	r30, 0x4E	; 78
     4e8:	f0 e0       	ldi	r31, 0x00	; 0
     4ea:	80 81       	ld	r24, Z
     4ec:	8f 7e       	andi	r24, 0xEF	; 239
     4ee:	8c 93       	st	X, r24
}
     4f0:	cf 91       	pop	r28
     4f2:	df 91       	pop	r29
     4f4:	08 95       	ret

000004f6 <Timer1_Start>:


void Timer1_Start(TIMER1_PreScaler_ID prescaler){
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	00 d0       	rcall	.+0      	; 0x4fc <Timer1_Start+0x6>
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	89 83       	std	Y+1, r24	; 0x01

	//Reset
	//TIMER1_TCNT1H_REG |=0x00;
	TIMER1_TCNT1L_REG = 0;
     504:	ec e4       	ldi	r30, 0x4C	; 76
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	11 82       	std	Z+1, r1	; 0x01
     50a:	10 82       	st	Z, r1

	switch(prescaler){
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	28 2f       	mov	r18, r24
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	3b 83       	std	Y+3, r19	; 0x03
     514:	2a 83       	std	Y+2, r18	; 0x02
     516:	8a 81       	ldd	r24, Y+2	; 0x02
     518:	9b 81       	ldd	r25, Y+3	; 0x03
     51a:	83 30       	cpi	r24, 0x03	; 3
     51c:	91 05       	cpc	r25, r1
     51e:	09 f4       	brne	.+2      	; 0x522 <Timer1_Start+0x2c>
     520:	40 c0       	rjmp	.+128    	; 0x5a2 <Timer1_Start+0xac>
     522:	2a 81       	ldd	r18, Y+2	; 0x02
     524:	3b 81       	ldd	r19, Y+3	; 0x03
     526:	24 30       	cpi	r18, 0x04	; 4
     528:	31 05       	cpc	r19, r1
     52a:	7c f4       	brge	.+30     	; 0x54a <Timer1_Start+0x54>
     52c:	8a 81       	ldd	r24, Y+2	; 0x02
     52e:	9b 81       	ldd	r25, Y+3	; 0x03
     530:	81 30       	cpi	r24, 0x01	; 1
     532:	91 05       	cpc	r25, r1
     534:	31 f1       	breq	.+76     	; 0x582 <Timer1_Start+0x8c>
     536:	2a 81       	ldd	r18, Y+2	; 0x02
     538:	3b 81       	ldd	r19, Y+3	; 0x03
     53a:	22 30       	cpi	r18, 0x02	; 2
     53c:	31 05       	cpc	r19, r1
     53e:	4c f5       	brge	.+82     	; 0x592 <Timer1_Start+0x9c>
     540:	8a 81       	ldd	r24, Y+2	; 0x02
     542:	9b 81       	ldd	r25, Y+3	; 0x03
     544:	00 97       	sbiw	r24, 0x00	; 0
     546:	b1 f0       	breq	.+44     	; 0x574 <Timer1_Start+0x7e>
     548:	53 c0       	rjmp	.+166    	; 0x5f0 <Timer1_Start+0xfa>
     54a:	2a 81       	ldd	r18, Y+2	; 0x02
     54c:	3b 81       	ldd	r19, Y+3	; 0x03
     54e:	25 30       	cpi	r18, 0x05	; 5
     550:	31 05       	cpc	r19, r1
     552:	b9 f1       	breq	.+110    	; 0x5c2 <Timer1_Start+0xcc>
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	9b 81       	ldd	r25, Y+3	; 0x03
     558:	85 30       	cpi	r24, 0x05	; 5
     55a:	91 05       	cpc	r25, r1
     55c:	54 f1       	brlt	.+84     	; 0x5b2 <Timer1_Start+0xbc>
     55e:	2a 81       	ldd	r18, Y+2	; 0x02
     560:	3b 81       	ldd	r19, Y+3	; 0x03
     562:	26 30       	cpi	r18, 0x06	; 6
     564:	31 05       	cpc	r19, r1
     566:	a9 f1       	breq	.+106    	; 0x5d2 <Timer1_Start+0xdc>
     568:	8a 81       	ldd	r24, Y+2	; 0x02
     56a:	9b 81       	ldd	r25, Y+3	; 0x03
     56c:	87 30       	cpi	r24, 0x07	; 7
     56e:	91 05       	cpc	r25, r1
     570:	c1 f1       	breq	.+112    	; 0x5e2 <Timer1_Start+0xec>
     572:	3e c0       	rjmp	.+124    	; 0x5f0 <Timer1_Start+0xfa>

	case TIMER1_Stop_:

		TIMER1_TCCR1B_REG |= Timer1_Stopped;
     574:	ee e4       	ldi	r30, 0x4E	; 78
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	ae e4       	ldi	r26, 0x4E	; 78
     57a:	b0 e0       	ldi	r27, 0x00	; 0
     57c:	8c 91       	ld	r24, X
     57e:	80 83       	st	Z, r24
     580:	37 c0       	rjmp	.+110    	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_None_:

		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
     582:	ae e4       	ldi	r26, 0x4E	; 78
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	ee e4       	ldi	r30, 0x4E	; 78
     588:	f0 e0       	ldi	r31, 0x00	; 0
     58a:	80 81       	ld	r24, Z
     58c:	81 60       	ori	r24, 0x01	; 1
     58e:	8c 93       	st	X, r24
     590:	2f c0       	rjmp	.+94     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_8_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
     592:	ae e4       	ldi	r26, 0x4E	; 78
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	ee e4       	ldi	r30, 0x4E	; 78
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	80 81       	ld	r24, Z
     59c:	82 60       	ori	r24, 0x02	; 2
     59e:	8c 93       	st	X, r24
     5a0:	27 c0       	rjmp	.+78     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_64_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
     5a2:	ae e4       	ldi	r26, 0x4E	; 78
     5a4:	b0 e0       	ldi	r27, 0x00	; 0
     5a6:	ee e4       	ldi	r30, 0x4E	; 78
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	83 60       	ori	r24, 0x03	; 3
     5ae:	8c 93       	st	X, r24
     5b0:	1f c0       	rjmp	.+62     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_256_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
     5b2:	ae e4       	ldi	r26, 0x4E	; 78
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	ee e4       	ldi	r30, 0x4E	; 78
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	84 60       	ori	r24, 0x04	; 4
     5be:	8c 93       	st	X, r24
     5c0:	17 c0       	rjmp	.+46     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_1024_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_1024;
     5c2:	ae e4       	ldi	r26, 0x4E	; 78
     5c4:	b0 e0       	ldi	r27, 0x00	; 0
     5c6:	ee e4       	ldi	r30, 0x4E	; 78
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	80 81       	ld	r24, Z
     5cc:	85 60       	ori	r24, 0x05	; 5
     5ce:	8c 93       	st	X, r24
     5d0:	0f c0       	rjmp	.+30     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_Ext_Falling_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
     5d2:	ae e4       	ldi	r26, 0x4E	; 78
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	ee e4       	ldi	r30, 0x4E	; 78
     5d8:	f0 e0       	ldi	r31, 0x00	; 0
     5da:	80 81       	ld	r24, Z
     5dc:	86 60       	ori	r24, 0x06	; 6
     5de:	8c 93       	st	X, r24
     5e0:	07 c0       	rjmp	.+14     	; 0x5f0 <Timer1_Start+0xfa>
		break;

	case TIMER1_Ext_Rising_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Rising_Edge;
     5e2:	ae e4       	ldi	r26, 0x4E	; 78
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	ee e4       	ldi	r30, 0x4E	; 78
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	87 60       	ori	r24, 0x07	; 7
     5ee:	8c 93       	st	X, r24
		break;
    }
}
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	cf 91       	pop	r28
     5f8:	df 91       	pop	r29
     5fa:	08 95       	ret

000005fc <Timer1_Stop>:


void Timer1_Stop(void){
     5fc:	df 93       	push	r29
     5fe:	cf 93       	push	r28
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62

	TIMER1_TCCR1B_REG |=Timer1_Stopped;
     604:	ee e4       	ldi	r30, 0x4E	; 78
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	ae e4       	ldi	r26, 0x4E	; 78
     60a:	b0 e0       	ldi	r27, 0x00	; 0
     60c:	8c 91       	ld	r24, X
     60e:	80 83       	st	Z, r24
}
     610:	cf 91       	pop	r28
     612:	df 91       	pop	r29
     614:	08 95       	ret

00000616 <Timer1_EnableInterrupt>:


void Timer1_EnableInterrupt(void){
     616:	df 93       	push	r29
     618:	cf 93       	push	r28
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     61e:	af e5       	ldi	r26, 0x5F	; 95
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	ef e5       	ldi	r30, 0x5F	; 95
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	80 68       	ori	r24, 0x80	; 128
     62a:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     62c:	a9 e5       	ldi	r26, 0x59	; 89
     62e:	b0 e0       	ldi	r27, 0x00	; 0
     630:	e9 e5       	ldi	r30, 0x59	; 89
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	84 60       	ori	r24, 0x04	; 4
     638:	8c 93       	st	X, r24
}
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <Timer1_DisableInterrupt>:


void Timer1_DisableInterrupt(void){
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
     648:	a9 e5       	ldi	r26, 0x59	; 89
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	e9 e5       	ldi	r30, 0x59	; 89
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	8b 7f       	andi	r24, 0xFB	; 251
     654:	8c 93       	st	X, r24
}
     656:	cf 91       	pop	r28
     658:	df 91       	pop	r29
     65a:	08 95       	ret

0000065c <Timer0_Init>:
 *      Author: Marina
 */
#include "Timer0.h"


void Timer0_Init(void){
     65c:	df 93       	push	r29
     65e:	cf 93       	push	r28
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62

	//Interval Mode
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM00);
     664:	a3 e5       	ldi	r26, 0x53	; 83
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e3 e5       	ldi	r30, 0x53	; 83
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	8f 7b       	andi	r24, 0xBF	; 191
     670:	8c 93       	st	X, r24
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM01);
     672:	a3 e5       	ldi	r26, 0x53	; 83
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	e3 e5       	ldi	r30, 0x53	; 83
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	87 7f       	andi	r24, 0xF7	; 247
     67e:	8c 93       	st	X, r24

}
     680:	cf 91       	pop	r28
     682:	df 91       	pop	r29
     684:	08 95       	ret

00000686 <Timer0_Start>:


void Timer0_Start(TIMER0_PreScaler_ID prescaler){
     686:	df 93       	push	r29
     688:	cf 93       	push	r28
     68a:	00 d0       	rcall	.+0      	; 0x68c <Timer0_Start+0x6>
     68c:	0f 92       	push	r0
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	89 83       	std	Y+1, r24	; 0x01

	TIMER0_TCNT0_REG |=0x00;  //Reset
     694:	a2 e5       	ldi	r26, 0x52	; 82
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e2 e5       	ldi	r30, 0x52	; 82
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8c 93       	st	X, r24

	switch(prescaler){
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	3b 83       	std	Y+3, r19	; 0x03
     6a8:	2a 83       	std	Y+2, r18	; 0x02
     6aa:	8a 81       	ldd	r24, Y+2	; 0x02
     6ac:	9b 81       	ldd	r25, Y+3	; 0x03
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	91 05       	cpc	r25, r1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <Timer0_Start+0x30>
     6b4:	40 c0       	rjmp	.+128    	; 0x736 <Timer0_Start+0xb0>
     6b6:	2a 81       	ldd	r18, Y+2	; 0x02
     6b8:	3b 81       	ldd	r19, Y+3	; 0x03
     6ba:	24 30       	cpi	r18, 0x04	; 4
     6bc:	31 05       	cpc	r19, r1
     6be:	7c f4       	brge	.+30     	; 0x6de <Timer0_Start+0x58>
     6c0:	8a 81       	ldd	r24, Y+2	; 0x02
     6c2:	9b 81       	ldd	r25, Y+3	; 0x03
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	91 05       	cpc	r25, r1
     6c8:	31 f1       	breq	.+76     	; 0x716 <Timer0_Start+0x90>
     6ca:	2a 81       	ldd	r18, Y+2	; 0x02
     6cc:	3b 81       	ldd	r19, Y+3	; 0x03
     6ce:	22 30       	cpi	r18, 0x02	; 2
     6d0:	31 05       	cpc	r19, r1
     6d2:	4c f5       	brge	.+82     	; 0x726 <Timer0_Start+0xa0>
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	9b 81       	ldd	r25, Y+3	; 0x03
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	b1 f0       	breq	.+44     	; 0x708 <Timer0_Start+0x82>
     6dc:	53 c0       	rjmp	.+166    	; 0x784 <Timer0_Start+0xfe>
     6de:	2a 81       	ldd	r18, Y+2	; 0x02
     6e0:	3b 81       	ldd	r19, Y+3	; 0x03
     6e2:	25 30       	cpi	r18, 0x05	; 5
     6e4:	31 05       	cpc	r19, r1
     6e6:	b9 f1       	breq	.+110    	; 0x756 <Timer0_Start+0xd0>
     6e8:	8a 81       	ldd	r24, Y+2	; 0x02
     6ea:	9b 81       	ldd	r25, Y+3	; 0x03
     6ec:	85 30       	cpi	r24, 0x05	; 5
     6ee:	91 05       	cpc	r25, r1
     6f0:	54 f1       	brlt	.+84     	; 0x746 <Timer0_Start+0xc0>
     6f2:	2a 81       	ldd	r18, Y+2	; 0x02
     6f4:	3b 81       	ldd	r19, Y+3	; 0x03
     6f6:	26 30       	cpi	r18, 0x06	; 6
     6f8:	31 05       	cpc	r19, r1
     6fa:	a9 f1       	breq	.+106    	; 0x766 <Timer0_Start+0xe0>
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	9b 81       	ldd	r25, Y+3	; 0x03
     700:	87 30       	cpi	r24, 0x07	; 7
     702:	91 05       	cpc	r25, r1
     704:	c1 f1       	breq	.+112    	; 0x776 <Timer0_Start+0xf0>
     706:	3e c0       	rjmp	.+124    	; 0x784 <Timer0_Start+0xfe>

	case TIMER0_Stop_:

		TIMER0_TCCR0_REG |= Timer0_Stopped;
     708:	e3 e5       	ldi	r30, 0x53	; 83
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	a3 e5       	ldi	r26, 0x53	; 83
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	8c 91       	ld	r24, X
     712:	80 83       	st	Z, r24
     714:	37 c0       	rjmp	.+110    	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_None_:

		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
     716:	a3 e5       	ldi	r26, 0x53	; 83
     718:	b0 e0       	ldi	r27, 0x00	; 0
     71a:	e3 e5       	ldi	r30, 0x53	; 83
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	80 81       	ld	r24, Z
     720:	81 60       	ori	r24, 0x01	; 1
     722:	8c 93       	st	X, r24
     724:	2f c0       	rjmp	.+94     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_8_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
     726:	a3 e5       	ldi	r26, 0x53	; 83
     728:	b0 e0       	ldi	r27, 0x00	; 0
     72a:	e3 e5       	ldi	r30, 0x53	; 83
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	80 81       	ld	r24, Z
     730:	82 60       	ori	r24, 0x02	; 2
     732:	8c 93       	st	X, r24
     734:	27 c0       	rjmp	.+78     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_64_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
     736:	a3 e5       	ldi	r26, 0x53	; 83
     738:	b0 e0       	ldi	r27, 0x00	; 0
     73a:	e3 e5       	ldi	r30, 0x53	; 83
     73c:	f0 e0       	ldi	r31, 0x00	; 0
     73e:	80 81       	ld	r24, Z
     740:	83 60       	ori	r24, 0x03	; 3
     742:	8c 93       	st	X, r24
     744:	1f c0       	rjmp	.+62     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_256_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
     746:	a3 e5       	ldi	r26, 0x53	; 83
     748:	b0 e0       	ldi	r27, 0x00	; 0
     74a:	e3 e5       	ldi	r30, 0x53	; 83
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	84 60       	ori	r24, 0x04	; 4
     752:	8c 93       	st	X, r24
     754:	17 c0       	rjmp	.+46     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_1024_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_1024;
     756:	a3 e5       	ldi	r26, 0x53	; 83
     758:	b0 e0       	ldi	r27, 0x00	; 0
     75a:	e3 e5       	ldi	r30, 0x53	; 83
     75c:	f0 e0       	ldi	r31, 0x00	; 0
     75e:	80 81       	ld	r24, Z
     760:	85 60       	ori	r24, 0x05	; 5
     762:	8c 93       	st	X, r24
     764:	0f c0       	rjmp	.+30     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Falling_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
     766:	a3 e5       	ldi	r26, 0x53	; 83
     768:	b0 e0       	ldi	r27, 0x00	; 0
     76a:	e3 e5       	ldi	r30, 0x53	; 83
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	86 60       	ori	r24, 0x06	; 6
     772:	8c 93       	st	X, r24
     774:	07 c0       	rjmp	.+14     	; 0x784 <Timer0_Start+0xfe>
		break;

	case TIMER0_Ext_Rising_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Rising_Edge;
     776:	a3 e5       	ldi	r26, 0x53	; 83
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	e3 e5       	ldi	r30, 0x53	; 83
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	87 60       	ori	r24, 0x07	; 7
     782:	8c 93       	st	X, r24
		break;
    }
}
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <Timer0_Stop>:


void Timer0_Stop(void){
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62

	TIMER0_TCCR0_REG |=Timer0_Stopped;
     798:	e3 e5       	ldi	r30, 0x53	; 83
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	a3 e5       	ldi	r26, 0x53	; 83
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	8c 91       	ld	r24, X
     7a2:	80 83       	st	Z, r24
}
     7a4:	cf 91       	pop	r28
     7a6:	df 91       	pop	r29
     7a8:	08 95       	ret

000007aa <Timer0_EnableInterrupt>:


void Timer0_EnableInterrupt(void){
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
     7b2:	af e5       	ldi	r26, 0x5F	; 95
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef e5       	ldi	r30, 0x5F	; 95
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	80 68       	ori	r24, 0x80	; 128
     7be:	8c 93       	st	X, r24
   SET_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7c0:	a9 e5       	ldi	r26, 0x59	; 89
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e9 e5       	ldi	r30, 0x59	; 89
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	81 60       	ori	r24, 0x01	; 1
     7cc:	8c 93       	st	X, r24
}
     7ce:	cf 91       	pop	r28
     7d0:	df 91       	pop	r29
     7d2:	08 95       	ret

000007d4 <Timer0_DisableInterrupt>:


void Timer0_DisableInterrupt(void){
     7d4:	df 93       	push	r29
     7d6:	cf 93       	push	r28
     7d8:	cd b7       	in	r28, 0x3d	; 61
     7da:	de b7       	in	r29, 0x3e	; 62

   CLR_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
     7dc:	a9 e5       	ldi	r26, 0x59	; 89
     7de:	b0 e0       	ldi	r27, 0x00	; 0
     7e0:	e9 e5       	ldi	r30, 0x59	; 89
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	8e 7f       	andi	r24, 0xFE	; 254
     7e8:	8c 93       	st	X, r24
}
     7ea:	cf 91       	pop	r28
     7ec:	df 91       	pop	r29
     7ee:	08 95       	ret

000007f0 <Enable_Gl_Int>:
 */

#include "../Inc/Glbl_Int.h"
#include "Std_Operations.h"

void Enable_Gl_Int(){
     7f0:	df 93       	push	r29
     7f2:	cf 93       	push	r28
     7f4:	cd b7       	in	r28, 0x3d	; 61
     7f6:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Enable;
    SET_BIT(Glbl_STATUS_REG,7);
     7f8:	af e5       	ldi	r26, 0x5F	; 95
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	ef e5       	ldi	r30, 0x5F	; 95
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	80 81       	ld	r24, Z
     802:	80 68       	ori	r24, 0x80	; 128
     804:	8c 93       	st	X, r24
}
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <Disable_Gl_Int>:
void Disable_Gl_Int(){
     80c:	df 93       	push	r29
     80e:	cf 93       	push	r28
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62

	//Glbl_STATUS_REG = Global_REG_Disable;
	CLR_BIT(Glbl_STATUS_REG,7);
     814:	af e5       	ldi	r26, 0x5F	; 95
     816:	b0 e0       	ldi	r27, 0x00	; 0
     818:	ef e5       	ldi	r30, 0x5F	; 95
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	8f 77       	andi	r24, 0x7F	; 127
     820:	8c 93       	st	X, r24
}
     822:	cf 91       	pop	r28
     824:	df 91       	pop	r29
     826:	08 95       	ret

00000828 <DIO_SET_PIN>:
#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     828:	df 93       	push	r29
     82a:	cf 93       	push	r28
     82c:	00 d0       	rcall	.+0      	; 0x82e <DIO_SET_PIN+0x6>
     82e:	00 d0       	rcall	.+0      	; 0x830 <DIO_SET_PIN+0x8>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	28 2f       	mov	r18, r24
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	3c 83       	std	Y+4, r19	; 0x04
     840:	2b 83       	std	Y+3, r18	; 0x03
     842:	8b 81       	ldd	r24, Y+3	; 0x03
     844:	9c 81       	ldd	r25, Y+4	; 0x04
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	91 05       	cpc	r25, r1
     84a:	49 f1       	breq	.+82     	; 0x89e <__stack+0x3f>
     84c:	2b 81       	ldd	r18, Y+3	; 0x03
     84e:	3c 81       	ldd	r19, Y+4	; 0x04
     850:	22 30       	cpi	r18, 0x02	; 2
     852:	31 05       	cpc	r19, r1
     854:	2c f4       	brge	.+10     	; 0x860 <__stack+0x1>
     856:	8b 81       	ldd	r24, Y+3	; 0x03
     858:	9c 81       	ldd	r25, Y+4	; 0x04
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	61 f0       	breq	.+24     	; 0x876 <__stack+0x17>
     85e:	5a c0       	rjmp	.+180    	; 0x914 <__stack+0xb5>
     860:	2b 81       	ldd	r18, Y+3	; 0x03
     862:	3c 81       	ldd	r19, Y+4	; 0x04
     864:	22 30       	cpi	r18, 0x02	; 2
     866:	31 05       	cpc	r19, r1
     868:	71 f1       	breq	.+92     	; 0x8c6 <__stack+0x67>
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	83 30       	cpi	r24, 0x03	; 3
     870:	91 05       	cpc	r25, r1
     872:	e9 f1       	breq	.+122    	; 0x8ee <__stack+0x8f>
     874:	4f c0       	rjmp	.+158    	; 0x914 <__stack+0xb5>
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
     876:	ab e3       	ldi	r26, 0x3B	; 59
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	eb e3       	ldi	r30, 0x3B	; 59
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	80 81       	ld	r24, Z
     880:	48 2f       	mov	r20, r24
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	02 2e       	mov	r0, r18
     88e:	02 c0       	rjmp	.+4      	; 0x894 <__stack+0x35>
     890:	88 0f       	add	r24, r24
     892:	99 1f       	adc	r25, r25
     894:	0a 94       	dec	r0
     896:	e2 f7       	brpl	.-8      	; 0x890 <__stack+0x31>
     898:	84 2b       	or	r24, r20
     89a:	8c 93       	st	X, r24
     89c:	3b c0       	rjmp	.+118    	; 0x914 <__stack+0xb5>
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
     89e:	a8 e3       	ldi	r26, 0x38	; 56
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	e8 e3       	ldi	r30, 0x38	; 56
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	48 2f       	mov	r20, r24
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	02 2e       	mov	r0, r18
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	0a 94       	dec	r0
     8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
     8c0:	84 2b       	or	r24, r20
     8c2:	8c 93       	st	X, r24
     8c4:	27 c0       	rjmp	.+78     	; 0x914 <__stack+0xb5>
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
     8c6:	a5 e3       	ldi	r26, 0x35	; 53
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	e5 e3       	ldi	r30, 0x35	; 53
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	80 81       	ld	r24, Z
     8d0:	48 2f       	mov	r20, r24
     8d2:	8a 81       	ldd	r24, Y+2	; 0x02
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	02 2e       	mov	r0, r18
     8de:	02 c0       	rjmp	.+4      	; 0x8e4 <__stack+0x85>
     8e0:	88 0f       	add	r24, r24
     8e2:	99 1f       	adc	r25, r25
     8e4:	0a 94       	dec	r0
     8e6:	e2 f7       	brpl	.-8      	; 0x8e0 <__stack+0x81>
     8e8:	84 2b       	or	r24, r20
     8ea:	8c 93       	st	X, r24
     8ec:	13 c0       	rjmp	.+38     	; 0x914 <__stack+0xb5>
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
     8ee:	a2 e3       	ldi	r26, 0x32	; 50
     8f0:	b0 e0       	ldi	r27, 0x00	; 0
     8f2:	e2 e3       	ldi	r30, 0x32	; 50
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 81       	ld	r24, Z
     8f8:	48 2f       	mov	r20, r24
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	28 2f       	mov	r18, r24
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	02 2e       	mov	r0, r18
     906:	02 c0       	rjmp	.+4      	; 0x90c <__stack+0xad>
     908:	88 0f       	add	r24, r24
     90a:	99 1f       	adc	r25, r25
     90c:	0a 94       	dec	r0
     90e:	e2 f7       	brpl	.-8      	; 0x908 <__stack+0xa9>
     910:	84 2b       	or	r24, r20
     912:	8c 93       	st	X, r24
		break;
	}
}
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	0f 90       	pop	r0
     91a:	0f 90       	pop	r0
     91c:	cf 91       	pop	r28
     91e:	df 91       	pop	r29
     920:	08 95       	ret

00000922 <DIO_CLEAR_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     922:	df 93       	push	r29
     924:	cf 93       	push	r28
     926:	00 d0       	rcall	.+0      	; 0x928 <DIO_CLEAR_PIN+0x6>
     928:	00 d0       	rcall	.+0      	; 0x92a <DIO_CLEAR_PIN+0x8>
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	89 83       	std	Y+1, r24	; 0x01
     930:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     932:	89 81       	ldd	r24, Y+1	; 0x01
     934:	28 2f       	mov	r18, r24
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	3c 83       	std	Y+4, r19	; 0x04
     93a:	2b 83       	std	Y+3, r18	; 0x03
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	91 05       	cpc	r25, r1
     944:	59 f1       	breq	.+86     	; 0x99c <DIO_CLEAR_PIN+0x7a>
     946:	2b 81       	ldd	r18, Y+3	; 0x03
     948:	3c 81       	ldd	r19, Y+4	; 0x04
     94a:	22 30       	cpi	r18, 0x02	; 2
     94c:	31 05       	cpc	r19, r1
     94e:	2c f4       	brge	.+10     	; 0x95a <DIO_CLEAR_PIN+0x38>
     950:	8b 81       	ldd	r24, Y+3	; 0x03
     952:	9c 81       	ldd	r25, Y+4	; 0x04
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	69 f0       	breq	.+26     	; 0x972 <DIO_CLEAR_PIN+0x50>
     958:	5f c0       	rjmp	.+190    	; 0xa18 <DIO_CLEAR_PIN+0xf6>
     95a:	2b 81       	ldd	r18, Y+3	; 0x03
     95c:	3c 81       	ldd	r19, Y+4	; 0x04
     95e:	22 30       	cpi	r18, 0x02	; 2
     960:	31 05       	cpc	r19, r1
     962:	89 f1       	breq	.+98     	; 0x9c6 <DIO_CLEAR_PIN+0xa4>
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	9c 81       	ldd	r25, Y+4	; 0x04
     968:	83 30       	cpi	r24, 0x03	; 3
     96a:	91 05       	cpc	r25, r1
     96c:	09 f4       	brne	.+2      	; 0x970 <DIO_CLEAR_PIN+0x4e>
     96e:	40 c0       	rjmp	.+128    	; 0x9f0 <DIO_CLEAR_PIN+0xce>
     970:	53 c0       	rjmp	.+166    	; 0xa18 <DIO_CLEAR_PIN+0xf6>
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
     972:	ab e3       	ldi	r26, 0x3B	; 59
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	eb e3       	ldi	r30, 0x3B	; 59
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	48 2f       	mov	r20, r24
     97e:	8a 81       	ldd	r24, Y+2	; 0x02
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	02 2e       	mov	r0, r18
     98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_CLEAR_PIN+0x6e>
     98c:	88 0f       	add	r24, r24
     98e:	99 1f       	adc	r25, r25
     990:	0a 94       	dec	r0
     992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_CLEAR_PIN+0x6a>
     994:	80 95       	com	r24
     996:	84 23       	and	r24, r20
     998:	8c 93       	st	X, r24
     99a:	3e c0       	rjmp	.+124    	; 0xa18 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
     99c:	a8 e3       	ldi	r26, 0x38	; 56
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	e8 e3       	ldi	r30, 0x38	; 56
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	48 2f       	mov	r20, r24
     9a8:	8a 81       	ldd	r24, Y+2	; 0x02
     9aa:	28 2f       	mov	r18, r24
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 2e       	mov	r0, r18
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <DIO_CLEAR_PIN+0x98>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <DIO_CLEAR_PIN+0x94>
     9be:	80 95       	com	r24
     9c0:	84 23       	and	r24, r20
     9c2:	8c 93       	st	X, r24
     9c4:	29 c0       	rjmp	.+82     	; 0xa18 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
     9c6:	a5 e3       	ldi	r26, 0x35	; 53
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e5 e3       	ldi	r30, 0x35	; 53
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	48 2f       	mov	r20, r24
     9d2:	8a 81       	ldd	r24, Y+2	; 0x02
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	02 2e       	mov	r0, r18
     9de:	02 c0       	rjmp	.+4      	; 0x9e4 <DIO_CLEAR_PIN+0xc2>
     9e0:	88 0f       	add	r24, r24
     9e2:	99 1f       	adc	r25, r25
     9e4:	0a 94       	dec	r0
     9e6:	e2 f7       	brpl	.-8      	; 0x9e0 <DIO_CLEAR_PIN+0xbe>
     9e8:	80 95       	com	r24
     9ea:	84 23       	and	r24, r20
     9ec:	8c 93       	st	X, r24
     9ee:	14 c0       	rjmp	.+40     	; 0xa18 <DIO_CLEAR_PIN+0xf6>
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
     9f0:	a2 e3       	ldi	r26, 0x32	; 50
     9f2:	b0 e0       	ldi	r27, 0x00	; 0
     9f4:	e2 e3       	ldi	r30, 0x32	; 50
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	80 81       	ld	r24, Z
     9fa:	48 2f       	mov	r20, r24
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	28 2f       	mov	r18, r24
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	02 2e       	mov	r0, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_CLEAR_PIN+0xec>
     a0a:	88 0f       	add	r24, r24
     a0c:	99 1f       	adc	r25, r25
     a0e:	0a 94       	dec	r0
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_CLEAR_PIN+0xe8>
     a12:	80 95       	com	r24
     a14:	84 23       	and	r24, r20
     a16:	8c 93       	st	X, r24
		break;
	}
}
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	cf 91       	pop	r28
     a22:	df 91       	pop	r29
     a24:	08 95       	ret

00000a26 <DIO_TOGGLE_PIN>:
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
     a26:	df 93       	push	r29
     a28:	cf 93       	push	r28
     a2a:	00 d0       	rcall	.+0      	; 0xa2c <DIO_TOGGLE_PIN+0x6>
     a2c:	00 d0       	rcall	.+0      	; 0xa2e <DIO_TOGGLE_PIN+0x8>
     a2e:	cd b7       	in	r28, 0x3d	; 61
     a30:	de b7       	in	r29, 0x3e	; 62
     a32:	89 83       	std	Y+1, r24	; 0x01
     a34:	6a 83       	std	Y+2, r22	; 0x02
	switch (port){
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	3c 83       	std	Y+4, r19	; 0x04
     a3e:	2b 83       	std	Y+3, r18	; 0x03
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	9c 81       	ldd	r25, Y+4	; 0x04
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	91 05       	cpc	r25, r1
     a48:	49 f1       	breq	.+82     	; 0xa9c <DIO_TOGGLE_PIN+0x76>
     a4a:	2b 81       	ldd	r18, Y+3	; 0x03
     a4c:	3c 81       	ldd	r19, Y+4	; 0x04
     a4e:	22 30       	cpi	r18, 0x02	; 2
     a50:	31 05       	cpc	r19, r1
     a52:	2c f4       	brge	.+10     	; 0xa5e <DIO_TOGGLE_PIN+0x38>
     a54:	8b 81       	ldd	r24, Y+3	; 0x03
     a56:	9c 81       	ldd	r25, Y+4	; 0x04
     a58:	00 97       	sbiw	r24, 0x00	; 0
     a5a:	61 f0       	breq	.+24     	; 0xa74 <DIO_TOGGLE_PIN+0x4e>
     a5c:	5a c0       	rjmp	.+180    	; 0xb12 <DIO_TOGGLE_PIN+0xec>
     a5e:	2b 81       	ldd	r18, Y+3	; 0x03
     a60:	3c 81       	ldd	r19, Y+4	; 0x04
     a62:	22 30       	cpi	r18, 0x02	; 2
     a64:	31 05       	cpc	r19, r1
     a66:	71 f1       	breq	.+92     	; 0xac4 <DIO_TOGGLE_PIN+0x9e>
     a68:	8b 81       	ldd	r24, Y+3	; 0x03
     a6a:	9c 81       	ldd	r25, Y+4	; 0x04
     a6c:	83 30       	cpi	r24, 0x03	; 3
     a6e:	91 05       	cpc	r25, r1
     a70:	e9 f1       	breq	.+122    	; 0xaec <DIO_TOGGLE_PIN+0xc6>
     a72:	4f c0       	rjmp	.+158    	; 0xb12 <DIO_TOGGLE_PIN+0xec>
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
     a74:	ab e3       	ldi	r26, 0x3B	; 59
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	eb e3       	ldi	r30, 0x3B	; 59
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	48 2f       	mov	r20, r24
     a80:	8a 81       	ldd	r24, Y+2	; 0x02
     a82:	28 2f       	mov	r18, r24
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	02 2e       	mov	r0, r18
     a8c:	02 c0       	rjmp	.+4      	; 0xa92 <DIO_TOGGLE_PIN+0x6c>
     a8e:	88 0f       	add	r24, r24
     a90:	99 1f       	adc	r25, r25
     a92:	0a 94       	dec	r0
     a94:	e2 f7       	brpl	.-8      	; 0xa8e <DIO_TOGGLE_PIN+0x68>
     a96:	84 27       	eor	r24, r20
     a98:	8c 93       	st	X, r24
     a9a:	3b c0       	rjmp	.+118    	; 0xb12 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
     a9c:	a8 e3       	ldi	r26, 0x38	; 56
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 e3       	ldi	r30, 0x38	; 56
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	48 2f       	mov	r20, r24
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	28 2f       	mov	r18, r24
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	02 2e       	mov	r0, r18
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <DIO_TOGGLE_PIN+0x94>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	0a 94       	dec	r0
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <DIO_TOGGLE_PIN+0x90>
     abe:	84 27       	eor	r24, r20
     ac0:	8c 93       	st	X, r24
     ac2:	27 c0       	rjmp	.+78     	; 0xb12 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
     ac4:	a5 e3       	ldi	r26, 0x35	; 53
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e5 e3       	ldi	r30, 0x35	; 53
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	80 81       	ld	r24, Z
     ace:	48 2f       	mov	r20, r24
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 2e       	mov	r0, r18
     adc:	02 c0       	rjmp	.+4      	; 0xae2 <DIO_TOGGLE_PIN+0xbc>
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	0a 94       	dec	r0
     ae4:	e2 f7       	brpl	.-8      	; 0xade <DIO_TOGGLE_PIN+0xb8>
     ae6:	84 27       	eor	r24, r20
     ae8:	8c 93       	st	X, r24
     aea:	13 c0       	rjmp	.+38     	; 0xb12 <DIO_TOGGLE_PIN+0xec>
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
     aec:	a2 e3       	ldi	r26, 0x32	; 50
     aee:	b0 e0       	ldi	r27, 0x00	; 0
     af0:	e2 e3       	ldi	r30, 0x32	; 50
     af2:	f0 e0       	ldi	r31, 0x00	; 0
     af4:	80 81       	ld	r24, Z
     af6:	48 2f       	mov	r20, r24
     af8:	8a 81       	ldd	r24, Y+2	; 0x02
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	02 2e       	mov	r0, r18
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <DIO_TOGGLE_PIN+0xe4>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	0a 94       	dec	r0
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <DIO_TOGGLE_PIN+0xe0>
     b0e:	84 27       	eor	r24, r20
     b10:	8c 93       	st	X, r24
		break;
	}
}
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	cf 91       	pop	r28
     b1c:	df 91       	pop	r29
     b1e:	08 95       	ret

00000b20 <DIO_ENABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     b20:	df 93       	push	r29
     b22:	cf 93       	push	r28
     b24:	00 d0       	rcall	.+0      	; 0xb26 <DIO_ENABLE_PULLUP+0x6>
     b26:	00 d0       	rcall	.+0      	; 0xb28 <DIO_ENABLE_PULLUP+0x8>
     b28:	cd b7       	in	r28, 0x3d	; 61
     b2a:	de b7       	in	r29, 0x3e	; 62
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	3c 83       	std	Y+4, r19	; 0x04
     b38:	2b 83       	std	Y+3, r18	; 0x03
     b3a:	4b 81       	ldd	r20, Y+3	; 0x03
     b3c:	5c 81       	ldd	r21, Y+4	; 0x04
     b3e:	41 30       	cpi	r20, 0x01	; 1
     b40:	51 05       	cpc	r21, r1
     b42:	09 f4       	brne	.+2      	; 0xb46 <DIO_ENABLE_PULLUP+0x26>
     b44:	40 c0       	rjmp	.+128    	; 0xbc6 <DIO_ENABLE_PULLUP+0xa6>
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	82 30       	cpi	r24, 0x02	; 2
     b4c:	91 05       	cpc	r25, r1
     b4e:	34 f4       	brge	.+12     	; 0xb5c <DIO_ENABLE_PULLUP+0x3c>
     b50:	2b 81       	ldd	r18, Y+3	; 0x03
     b52:	3c 81       	ldd	r19, Y+4	; 0x04
     b54:	21 15       	cp	r18, r1
     b56:	31 05       	cpc	r19, r1
     b58:	71 f0       	breq	.+28     	; 0xb76 <DIO_ENABLE_PULLUP+0x56>
     b5a:	aa c0       	rjmp	.+340    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
     b5c:	4b 81       	ldd	r20, Y+3	; 0x03
     b5e:	5c 81       	ldd	r21, Y+4	; 0x04
     b60:	42 30       	cpi	r20, 0x02	; 2
     b62:	51 05       	cpc	r21, r1
     b64:	09 f4       	brne	.+2      	; 0xb68 <DIO_ENABLE_PULLUP+0x48>
     b66:	57 c0       	rjmp	.+174    	; 0xc16 <DIO_ENABLE_PULLUP+0xf6>
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	91 05       	cpc	r25, r1
     b70:	09 f4       	brne	.+2      	; 0xb74 <DIO_ENABLE_PULLUP+0x54>
     b72:	78 c0       	rjmp	.+240    	; 0xc64 <DIO_ENABLE_PULLUP+0x144>
     b74:	9d c0       	rjmp	.+314    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     b76:	ea e3       	ldi	r30, 0x3A	; 58
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	8a 81       	ldd	r24, Y+2	; 0x02
     b82:	88 2f       	mov	r24, r24
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a9 01       	movw	r20, r18
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_ENABLE_PULLUP+0x6e>
     b8a:	55 95       	asr	r21
     b8c:	47 95       	ror	r20
     b8e:	8a 95       	dec	r24
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_ENABLE_PULLUP+0x6a>
     b92:	ca 01       	movw	r24, r20
     b94:	81 70       	andi	r24, 0x01	; 1
     b96:	90 70       	andi	r25, 0x00	; 0
     b98:	00 97       	sbiw	r24, 0x00	; 0
     b9a:	09 f0       	breq	.+2      	; 0xb9e <DIO_ENABLE_PULLUP+0x7e>
     b9c:	89 c0       	rjmp	.+274    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTA_REG,pin);
     b9e:	ab e3       	ldi	r26, 0x3B	; 59
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	eb e3       	ldi	r30, 0x3B	; 59
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	48 2f       	mov	r20, r24
     baa:	8a 81       	ldd	r24, Y+2	; 0x02
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	02 2e       	mov	r0, r18
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_ENABLE_PULLUP+0x9c>
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	0a 94       	dec	r0
     bbe:	e2 f7       	brpl	.-8      	; 0xbb8 <DIO_ENABLE_PULLUP+0x98>
     bc0:	84 2b       	or	r24, r20
     bc2:	8c 93       	st	X, r24
     bc4:	75 c0       	rjmp	.+234    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     bc6:	e7 e3       	ldi	r30, 0x37	; 55
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	80 81       	ld	r24, Z
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a9 01       	movw	r20, r18
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <DIO_ENABLE_PULLUP+0xbe>
     bda:	55 95       	asr	r21
     bdc:	47 95       	ror	r20
     bde:	8a 95       	dec	r24
     be0:	e2 f7       	brpl	.-8      	; 0xbda <DIO_ENABLE_PULLUP+0xba>
     be2:	ca 01       	movw	r24, r20
     be4:	81 70       	andi	r24, 0x01	; 1
     be6:	90 70       	andi	r25, 0x00	; 0
     be8:	00 97       	sbiw	r24, 0x00	; 0
     bea:	09 f0       	breq	.+2      	; 0xbee <DIO_ENABLE_PULLUP+0xce>
     bec:	61 c0       	rjmp	.+194    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTB_REG,pin);
     bee:	a8 e3       	ldi	r26, 0x38	; 56
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e8 e3       	ldi	r30, 0x38	; 56
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	48 2f       	mov	r20, r24
     bfa:	8a 81       	ldd	r24, Y+2	; 0x02
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	02 2e       	mov	r0, r18
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <DIO_ENABLE_PULLUP+0xec>
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	0a 94       	dec	r0
     c0e:	e2 f7       	brpl	.-8      	; 0xc08 <DIO_ENABLE_PULLUP+0xe8>
     c10:	84 2b       	or	r24, r20
     c12:	8c 93       	st	X, r24
     c14:	4d c0       	rjmp	.+154    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     c16:	e4 e3       	ldi	r30, 0x34	; 52
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	28 2f       	mov	r18, r24
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	88 2f       	mov	r24, r24
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a9 01       	movw	r20, r18
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_ENABLE_PULLUP+0x10e>
     c2a:	55 95       	asr	r21
     c2c:	47 95       	ror	r20
     c2e:	8a 95       	dec	r24
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_ENABLE_PULLUP+0x10a>
     c32:	ca 01       	movw	r24, r20
     c34:	81 70       	andi	r24, 0x01	; 1
     c36:	90 70       	andi	r25, 0x00	; 0
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	d1 f5       	brne	.+116    	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTC_REG,pin);
     c3c:	a5 e3       	ldi	r26, 0x35	; 53
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e3       	ldi	r30, 0x35	; 53
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	48 2f       	mov	r20, r24
     c48:	8a 81       	ldd	r24, Y+2	; 0x02
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	02 2e       	mov	r0, r18
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <DIO_ENABLE_PULLUP+0x13a>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <DIO_ENABLE_PULLUP+0x136>
     c5e:	84 2b       	or	r24, r20
     c60:	8c 93       	st	X, r24
     c62:	26 c0       	rjmp	.+76     	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     c64:	e1 e3       	ldi	r30, 0x31	; 49
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	a9 01       	movw	r20, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <DIO_ENABLE_PULLUP+0x15c>
     c78:	55 95       	asr	r21
     c7a:	47 95       	ror	r20
     c7c:	8a 95       	dec	r24
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <DIO_ENABLE_PULLUP+0x158>
     c80:	ca 01       	movw	r24, r20
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	90 70       	andi	r25, 0x00	; 0
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	99 f4       	brne	.+38     	; 0xcb0 <DIO_ENABLE_PULLUP+0x190>
			SET_BIT(PORTD_REG,pin);
     c8a:	a2 e3       	ldi	r26, 0x32	; 50
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e2 e3       	ldi	r30, 0x32	; 50
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	48 2f       	mov	r20, r24
     c96:	8a 81       	ldd	r24, Y+2	; 0x02
     c98:	28 2f       	mov	r18, r24
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	02 2e       	mov	r0, r18
     ca2:	02 c0       	rjmp	.+4      	; 0xca8 <DIO_ENABLE_PULLUP+0x188>
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	0a 94       	dec	r0
     caa:	e2 f7       	brpl	.-8      	; 0xca4 <DIO_ENABLE_PULLUP+0x184>
     cac:	84 2b       	or	r24, r20
     cae:	8c 93       	st	X, r24
		break;
	}
}
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <DIO_DISABLE_PULLUP>:
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <DIO_DISABLE_PULLUP+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <DIO_DISABLE_PULLUP+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3c 83       	std	Y+4, r19	; 0x04
     cd6:	2b 83       	std	Y+3, r18	; 0x03
     cd8:	4b 81       	ldd	r20, Y+3	; 0x03
     cda:	5c 81       	ldd	r21, Y+4	; 0x04
     cdc:	41 30       	cpi	r20, 0x01	; 1
     cde:	51 05       	cpc	r21, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_DISABLE_PULLUP+0x26>
     ce2:	41 c0       	rjmp	.+130    	; 0xd66 <DIO_DISABLE_PULLUP+0xa8>
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	9c 81       	ldd	r25, Y+4	; 0x04
     ce8:	82 30       	cpi	r24, 0x02	; 2
     cea:	91 05       	cpc	r25, r1
     cec:	34 f4       	brge	.+12     	; 0xcfa <DIO_DISABLE_PULLUP+0x3c>
     cee:	2b 81       	ldd	r18, Y+3	; 0x03
     cf0:	3c 81       	ldd	r19, Y+4	; 0x04
     cf2:	21 15       	cp	r18, r1
     cf4:	31 05       	cpc	r19, r1
     cf6:	71 f0       	breq	.+28     	; 0xd14 <DIO_DISABLE_PULLUP+0x56>
     cf8:	ae c0       	rjmp	.+348    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
     cfa:	4b 81       	ldd	r20, Y+3	; 0x03
     cfc:	5c 81       	ldd	r21, Y+4	; 0x04
     cfe:	42 30       	cpi	r20, 0x02	; 2
     d00:	51 05       	cpc	r21, r1
     d02:	09 f4       	brne	.+2      	; 0xd06 <DIO_DISABLE_PULLUP+0x48>
     d04:	59 c0       	rjmp	.+178    	; 0xdb8 <DIO_DISABLE_PULLUP+0xfa>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	9c 81       	ldd	r25, Y+4	; 0x04
     d0a:	83 30       	cpi	r24, 0x03	; 3
     d0c:	91 05       	cpc	r25, r1
     d0e:	09 f4       	brne	.+2      	; 0xd12 <DIO_DISABLE_PULLUP+0x54>
     d10:	7b c0       	rjmp	.+246    	; 0xe08 <DIO_DISABLE_PULLUP+0x14a>
     d12:	a1 c0       	rjmp	.+322    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
     d14:	ea e3       	ldi	r30, 0x3A	; 58
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a9 01       	movw	r20, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <DIO_DISABLE_PULLUP+0x6e>
     d28:	55 95       	asr	r21
     d2a:	47 95       	ror	r20
     d2c:	8a 95       	dec	r24
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <DIO_DISABLE_PULLUP+0x6a>
     d30:	ca 01       	movw	r24, r20
     d32:	81 70       	andi	r24, 0x01	; 1
     d34:	90 70       	andi	r25, 0x00	; 0
     d36:	00 97       	sbiw	r24, 0x00	; 0
     d38:	09 f0       	breq	.+2      	; 0xd3c <DIO_DISABLE_PULLUP+0x7e>
     d3a:	8d c0       	rjmp	.+282    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTA_REG,pin);
     d3c:	ab e3       	ldi	r26, 0x3B	; 59
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e3       	ldi	r30, 0x3B	; 59
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	48 2f       	mov	r20, r24
     d48:	8a 81       	ldd	r24, Y+2	; 0x02
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_DISABLE_PULLUP+0x9c>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_DISABLE_PULLUP+0x98>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	78 c0       	rjmp	.+240    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
     d66:	e7 e3       	ldi	r30, 0x37	; 55
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	8a 81       	ldd	r24, Y+2	; 0x02
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a9 01       	movw	r20, r18
     d78:	02 c0       	rjmp	.+4      	; 0xd7e <DIO_DISABLE_PULLUP+0xc0>
     d7a:	55 95       	asr	r21
     d7c:	47 95       	ror	r20
     d7e:	8a 95       	dec	r24
     d80:	e2 f7       	brpl	.-8      	; 0xd7a <DIO_DISABLE_PULLUP+0xbc>
     d82:	ca 01       	movw	r24, r20
     d84:	81 70       	andi	r24, 0x01	; 1
     d86:	90 70       	andi	r25, 0x00	; 0
     d88:	00 97       	sbiw	r24, 0x00	; 0
     d8a:	09 f0       	breq	.+2      	; 0xd8e <DIO_DISABLE_PULLUP+0xd0>
     d8c:	64 c0       	rjmp	.+200    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTB_REG,pin);
     d8e:	a8 e3       	ldi	r26, 0x38	; 56
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e8 e3       	ldi	r30, 0x38	; 56
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_DISABLE_PULLUP+0xee>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_DISABLE_PULLUP+0xea>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	4f c0       	rjmp	.+158    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
     db8:	e4 e3       	ldi	r30, 0x34	; 52
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a9 01       	movw	r20, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_DISABLE_PULLUP+0x112>
     dcc:	55 95       	asr	r21
     dce:	47 95       	ror	r20
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_DISABLE_PULLUP+0x10e>
     dd4:	ca 01       	movw	r24, r20
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	90 70       	andi	r25, 0x00	; 0
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	e1 f5       	brne	.+120    	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTC_REG,pin);
     dde:	a5 e3       	ldi	r26, 0x35	; 53
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e3       	ldi	r30, 0x35	; 53
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_DISABLE_PULLUP+0x13e>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_DISABLE_PULLUP+0x13a>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	27 c0       	rjmp	.+78     	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
     e08:	e1 e3       	ldi	r30, 0x31	; 49
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	28 2f       	mov	r18, r24
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	8a 81       	ldd	r24, Y+2	; 0x02
     e14:	88 2f       	mov	r24, r24
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	a9 01       	movw	r20, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <DIO_DISABLE_PULLUP+0x162>
     e1c:	55 95       	asr	r21
     e1e:	47 95       	ror	r20
     e20:	8a 95       	dec	r24
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <DIO_DISABLE_PULLUP+0x15e>
     e24:	ca 01       	movw	r24, r20
     e26:	81 70       	andi	r24, 0x01	; 1
     e28:	90 70       	andi	r25, 0x00	; 0
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	a1 f4       	brne	.+40     	; 0xe56 <DIO_DISABLE_PULLUP+0x198>
			CLR_BIT(PORTD_REG,pin);
     e2e:	a2 e3       	ldi	r26, 0x32	; 50
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	e2 e3       	ldi	r30, 0x32	; 50
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_DISABLE_PULLUP+0x18e>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_DISABLE_PULLUP+0x18a>
     e50:	80 95       	com	r24
     e52:	84 23       	and	r24, r20
     e54:	8c 93       	st	X, r24
		break;
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <DIO_READ_LEVEL>:
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <DIO_READ_LEVEL+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <DIO_READ_LEVEL+0x8>
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	6a 83       	std	Y+2, r22	; 0x02

	switch (port){
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3d 83       	std	Y+5, r19	; 0x05
     e7e:	2c 83       	std	Y+4, r18	; 0x04
     e80:	4c 81       	ldd	r20, Y+4	; 0x04
     e82:	5d 81       	ldd	r21, Y+5	; 0x05
     e84:	41 30       	cpi	r20, 0x01	; 1
     e86:	51 05       	cpc	r21, r1
     e88:	49 f1       	breq	.+82     	; 0xedc <DIO_READ_LEVEL+0x78>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	82 30       	cpi	r24, 0x02	; 2
     e90:	91 05       	cpc	r25, r1
     e92:	34 f4       	brge	.+12     	; 0xea0 <DIO_READ_LEVEL+0x3c>
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	21 15       	cp	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	61 f0       	breq	.+24     	; 0xeb6 <DIO_READ_LEVEL+0x52>
     e9e:	57 c0       	rjmp	.+174    	; 0xf4e <DIO_READ_LEVEL+0xea>
     ea0:	4c 81       	ldd	r20, Y+4	; 0x04
     ea2:	5d 81       	ldd	r21, Y+5	; 0x05
     ea4:	42 30       	cpi	r20, 0x02	; 2
     ea6:	51 05       	cpc	r21, r1
     ea8:	61 f1       	breq	.+88     	; 0xf02 <DIO_READ_LEVEL+0x9e>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	d1 f1       	breq	.+116    	; 0xf28 <DIO_READ_LEVEL+0xc4>
     eb4:	4c c0       	rjmp	.+152    	; 0xf4e <DIO_READ_LEVEL+0xea>
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
     eb6:	e9 e3       	ldi	r30, 0x39	; 57
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a9 01       	movw	r20, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_READ_LEVEL+0x6a>
     eca:	55 95       	asr	r21
     ecc:	47 95       	ror	r20
     ece:	8a 95       	dec	r24
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_READ_LEVEL+0x66>
     ed2:	ca 01       	movw	r24, r20
     ed4:	58 2f       	mov	r21, r24
     ed6:	51 70       	andi	r21, 0x01	; 1
     ed8:	5b 83       	std	Y+3, r21	; 0x03
     eda:	3a c0       	rjmp	.+116    	; 0xf50 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
     edc:	e6 e3       	ldi	r30, 0x36	; 54
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_READ_LEVEL+0x90>
     ef0:	55 95       	asr	r21
     ef2:	47 95       	ror	r20
     ef4:	8a 95       	dec	r24
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_READ_LEVEL+0x8c>
     ef8:	ca 01       	movw	r24, r20
     efa:	58 2f       	mov	r21, r24
     efc:	51 70       	andi	r21, 0x01	; 1
     efe:	5b 83       	std	Y+3, r21	; 0x03
     f00:	27 c0       	rjmp	.+78     	; 0xf50 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
     f02:	e3 e3       	ldi	r30, 0x33	; 51
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a9 01       	movw	r20, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_READ_LEVEL+0xb6>
     f16:	55 95       	asr	r21
     f18:	47 95       	ror	r20
     f1a:	8a 95       	dec	r24
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_READ_LEVEL+0xb2>
     f1e:	ca 01       	movw	r24, r20
     f20:	58 2f       	mov	r21, r24
     f22:	51 70       	andi	r21, 0x01	; 1
     f24:	5b 83       	std	Y+3, r21	; 0x03
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <DIO_READ_LEVEL+0xec>
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
     f28:	e0 e3       	ldi	r30, 0x30	; 48
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	28 2f       	mov	r18, r24
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 01       	movw	r20, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_READ_LEVEL+0xdc>
     f3c:	55 95       	asr	r21
     f3e:	47 95       	ror	r20
     f40:	8a 95       	dec	r24
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_READ_LEVEL+0xd8>
     f44:	ca 01       	movw	r24, r20
     f46:	58 2f       	mov	r21, r24
     f48:	51 70       	andi	r21, 0x01	; 1
     f4a:	5b 83       	std	Y+3, r21	; 0x03
     f4c:	01 c0       	rjmp	.+2      	; 0xf50 <DIO_READ_LEVEL+0xec>
		break;
	}
	return 0;
     f4e:	1b 82       	std	Y+3, r1	; 0x03
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <DIO_WRITE_STATUS>:
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	00 d0       	rcall	.+0      	; 0xf68 <DIO_WRITE_STATUS+0x6>
     f68:	00 d0       	rcall	.+0      	; 0xf6a <DIO_WRITE_STATUS+0x8>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	6a 83       	std	Y+2, r22	; 0x02
     f74:	4b 83       	std	Y+3, r20	; 0x03
	switch (port){
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3d 83       	std	Y+5, r19	; 0x05
     f7e:	2c 83       	std	Y+4, r18	; 0x04
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	09 f4       	brne	.+2      	; 0xf8c <DIO_WRITE_STATUS+0x2a>
     f8a:	43 c0       	rjmp	.+134    	; 0x1012 <DIO_WRITE_STATUS+0xb0>
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	2c f4       	brge	.+10     	; 0xfa0 <DIO_WRITE_STATUS+0x3e>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	71 f0       	breq	.+28     	; 0xfba <DIO_WRITE_STATUS+0x58>
     f9e:	bc c0       	rjmp	.+376    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	09 f4       	brne	.+2      	; 0xfac <DIO_WRITE_STATUS+0x4a>
     faa:	5f c0       	rjmp	.+190    	; 0x106a <DIO_WRITE_STATUS+0x108>
     fac:	8c 81       	ldd	r24, Y+4	; 0x04
     fae:	9d 81       	ldd	r25, Y+5	; 0x05
     fb0:	83 30       	cpi	r24, 0x03	; 3
     fb2:	91 05       	cpc	r25, r1
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <DIO_WRITE_STATUS+0x56>
     fb6:	85 c0       	rjmp	.+266    	; 0x10c2 <DIO_WRITE_STATUS+0x160>
     fb8:	af c0       	rjmp	.+350    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
	case DIO_PORTA:
		if (direction==OUTPUT)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <DIO_WRITE_STATUS+0x86>
			SET_BIT(DDRA_REG,pin);
     fc0:	aa e3       	ldi	r26, 0x3A	; 58
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	ea e3       	ldi	r30, 0x3A	; 58
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_WRITE_STATUS+0x7c>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_WRITE_STATUS+0x78>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	98 c0       	rjmp	.+304    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRA_REG,pin);
     fe8:	aa e3       	ldi	r26, 0x3A	; 58
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	ea e3       	ldi	r30, 0x3A	; 58
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_WRITE_STATUS+0xa4>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_WRITE_STATUS+0xa0>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	83 c0       	rjmp	.+262    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTB:
		if (direction==OUTPUT)
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	81 30       	cpi	r24, 0x01	; 1
    1016:	a1 f4       	brne	.+40     	; 0x1040 <DIO_WRITE_STATUS+0xde>
			SET_BIT(DDRB_REG,pin);
    1018:	a7 e3       	ldi	r26, 0x37	; 55
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e7 e3       	ldi	r30, 0x37	; 55
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	48 2f       	mov	r20, r24
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 2e       	mov	r0, r18
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <DIO_WRITE_STATUS+0xd4>
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	0a 94       	dec	r0
    1038:	e2 f7       	brpl	.-8      	; 0x1032 <DIO_WRITE_STATUS+0xd0>
    103a:	84 2b       	or	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	6c c0       	rjmp	.+216    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRB_REG,pin);
    1040:	a7 e3       	ldi	r26, 0x37	; 55
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e7 e3       	ldi	r30, 0x37	; 55
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	48 2f       	mov	r20, r24
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 2e       	mov	r0, r18
    1058:	02 c0       	rjmp	.+4      	; 0x105e <DIO_WRITE_STATUS+0xfc>
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	0a 94       	dec	r0
    1060:	e2 f7       	brpl	.-8      	; 0x105a <DIO_WRITE_STATUS+0xf8>
    1062:	80 95       	com	r24
    1064:	84 23       	and	r24, r20
    1066:	8c 93       	st	X, r24
    1068:	57 c0       	rjmp	.+174    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTC:
		if (direction==OUTPUT)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	a1 f4       	brne	.+40     	; 0x1098 <DIO_WRITE_STATUS+0x136>
			SET_BIT(DDRC_REG,pin);
    1070:	a4 e3       	ldi	r26, 0x34	; 52
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e4 e3       	ldi	r30, 0x34	; 52
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_WRITE_STATUS+0x12c>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_WRITE_STATUS+0x128>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	40 c0       	rjmp	.+128    	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRC_REG,pin);
    1098:	a4 e3       	ldi	r26, 0x34	; 52
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e4 e3       	ldi	r30, 0x34	; 52
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	48 2f       	mov	r20, r24
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	02 2e       	mov	r0, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <DIO_WRITE_STATUS+0x154>
    10b2:	88 0f       	add	r24, r24
    10b4:	99 1f       	adc	r25, r25
    10b6:	0a 94       	dec	r0
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <DIO_WRITE_STATUS+0x150>
    10ba:	80 95       	com	r24
    10bc:	84 23       	and	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	2b c0       	rjmp	.+86     	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		break;
	case DIO_PORTD:
		if (direction==OUTPUT)
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	a1 f4       	brne	.+40     	; 0x10f0 <DIO_WRITE_STATUS+0x18e>
			SET_BIT(DDRD_REG,pin);
    10c8:	a1 e3       	ldi	r26, 0x31	; 49
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e1 e3       	ldi	r30, 0x31	; 49
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8a 81       	ldd	r24, Y+2	; 0x02
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_WRITE_STATUS+0x184>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_WRITE_STATUS+0x180>
    10ea:	84 2b       	or	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	14 c0       	rjmp	.+40     	; 0x1118 <DIO_WRITE_STATUS+0x1b6>
		else
			CLR_BIT(DDRD_REG,pin);
    10f0:	a1 e3       	ldi	r26, 0x31	; 49
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e1 e3       	ldi	r30, 0x31	; 49
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_WRITE_STATUS+0x1ac>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_WRITE_STATUS+0x1a8>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
		break;
	}
}
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	cf 91       	pop	r28
    1124:	df 91       	pop	r29
    1126:	08 95       	ret

00001128 <Dio_WriteGroup>:
//--------------------------------------------------------------------------------------------------
void Dio_WriteGroup(Port_ID port,u8 mask,u8 data)
{
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	00 d0       	rcall	.+0      	; 0x112e <Dio_WriteGroup+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <Dio_WriteGroup+0x8>
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
    1138:	6a 83       	std	Y+2, r22	; 0x02
    113a:	4b 83       	std	Y+3, r20	; 0x03
	switch(port)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3d 83       	std	Y+5, r19	; 0x05
    1144:	2c 83       	std	Y+4, r18	; 0x04
    1146:	8c 81       	ldd	r24, Y+4	; 0x04
    1148:	9d 81       	ldd	r25, Y+5	; 0x05
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	29 f1       	breq	.+74     	; 0x119a <Dio_WriteGroup+0x72>
    1150:	2c 81       	ldd	r18, Y+4	; 0x04
    1152:	3d 81       	ldd	r19, Y+5	; 0x05
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <Dio_WriteGroup+0x3c>
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	9d 81       	ldd	r25, Y+5	; 0x05
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	61 f0       	breq	.+24     	; 0x117a <Dio_WriteGroup+0x52>
    1162:	4a c0       	rjmp	.+148    	; 0x11f8 <Dio_WriteGroup+0xd0>
    1164:	2c 81       	ldd	r18, Y+4	; 0x04
    1166:	3d 81       	ldd	r19, Y+5	; 0x05
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	31 f1       	breq	.+76     	; 0x11ba <Dio_WriteGroup+0x92>
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	91 05       	cpc	r25, r1
    1176:	89 f1       	breq	.+98     	; 0x11da <Dio_WriteGroup+0xb2>
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <Dio_WriteGroup+0xd0>
	{
	case DIO_PORTA:
		PORTA_REG = (PORTA_REG&~mask)|(data & mask);
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	98 2f       	mov	r25, r24
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 95       	com	r24
    118a:	29 2f       	mov	r18, r25
    118c:	28 23       	and	r18, r24
    118e:	9b 81       	ldd	r25, Y+3	; 0x03
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	89 23       	and	r24, r25
    1194:	82 2b       	or	r24, r18
    1196:	8c 93       	st	X, r24
    1198:	2f c0       	rjmp	.+94     	; 0x11f8 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTB:
		PORTB_REG = (PORTB_REG&~mask)|(data & mask);
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	98 2f       	mov	r25, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	80 95       	com	r24
    11aa:	29 2f       	mov	r18, r25
    11ac:	28 23       	and	r18, r24
    11ae:	9b 81       	ldd	r25, Y+3	; 0x03
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	89 23       	and	r24, r25
    11b4:	82 2b       	or	r24, r18
    11b6:	8c 93       	st	X, r24
    11b8:	1f c0       	rjmp	.+62     	; 0x11f8 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTC:
		PORTC_REG = (PORTC_REG&~mask)|(data & mask);
    11ba:	a5 e3       	ldi	r26, 0x35	; 53
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e5 e3       	ldi	r30, 0x35	; 53
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	98 2f       	mov	r25, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	80 95       	com	r24
    11ca:	29 2f       	mov	r18, r25
    11cc:	28 23       	and	r18, r24
    11ce:	9b 81       	ldd	r25, Y+3	; 0x03
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	89 23       	and	r24, r25
    11d4:	82 2b       	or	r24, r18
    11d6:	8c 93       	st	X, r24
    11d8:	0f c0       	rjmp	.+30     	; 0x11f8 <Dio_WriteGroup+0xd0>
		break;

	case DIO_PORTD:
		PORTD_REG = (PORTD_REG&~mask)|(data & mask);
    11da:	a2 e3       	ldi	r26, 0x32	; 50
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e2 e3       	ldi	r30, 0x32	; 50
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	98 2f       	mov	r25, r24
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 95       	com	r24
    11ea:	29 2f       	mov	r18, r25
    11ec:	28 23       	and	r18, r24
    11ee:	9b 81       	ldd	r25, Y+3	; 0x03
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	89 23       	and	r24, r25
    11f4:	82 2b       	or	r24, r18
    11f6:	8c 93       	st	X, r24
		break;
	}
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <SSD_Init>:
#include "SSD.h"

static u8 Counter =0;

void SSD_Init(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	/*	Configure Data Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN4,OUTPUT);
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	64 e0       	ldi	r22, 0x04	; 4
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN5,OUTPUT);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	65 e0       	ldi	r22, 0x05	; 5
    121e:	41 e0       	ldi	r20, 0x01	; 1
    1220:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN6,OUTPUT);
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	66 e0       	ldi	r22, 0x06	; 6
    1228:	41 e0       	ldi	r20, 0x01	; 1
    122a:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN7,OUTPUT);
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	67 e0       	ldi	r22, 0x07	; 7
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>

	/*	Configure Control Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN1,OUTPUT);
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	61 e0       	ldi	r22, 0x01	; 1
    123c:	41 e0       	ldi	r20, 0x01	; 1
    123e:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN2,OUTPUT);
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	62 e0       	ldi	r22, 0x02	; 2
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
}
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <SSD_DisplayNumber>:
//--------------------------------------------------------------------------------------------------
void SSD_DisplayNumber(u8 num)
{
    1252:	df 93       	push	r29
    1254:	cf 93       	push	r28
    1256:	00 d0       	rcall	.+0      	; 0x1258 <SSD_DisplayNumber+0x6>
    1258:	0f 92       	push	r0
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
    125e:	8b 83       	std	Y+3, r24	; 0x03
	u8 loc_FirstDigit = (num/10)<<4;
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9a e0       	ldi	r25, 0x0A	; 10
    1264:	69 2f       	mov	r22, r25
    1266:	0e 94 89 0b 	call	0x1712	; 0x1712 <__udivmodqi4>
    126a:	82 95       	swap	r24
    126c:	80 7f       	andi	r24, 0xF0	; 240
    126e:	8a 83       	std	Y+2, r24	; 0x02
	u8 loc_Second_Digit = (num%10)<<4;
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9a e0       	ldi	r25, 0x0A	; 10
    1274:	69 2f       	mov	r22, r25
    1276:	0e 94 89 0b 	call	0x1712	; 0x1712 <__udivmodqi4>
    127a:	89 2f       	mov	r24, r25
    127c:	82 95       	swap	r24
    127e:	80 7f       	andi	r24, 0xF0	; 240
    1280:	89 83       	std	Y+1, r24	; 0x01

	if(Counter < (((2^8)-1)/2)){
    1282:	80 91 69 00 	lds	r24, 0x0069
    1286:	84 30       	cpi	r24, 0x04	; 4
    1288:	70 f4       	brcc	.+28     	; 0x12a6 <SSD_DisplayNumber+0x54>
		/*	Enable SSD1	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN2);
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	62 e0       	ldi	r22, 0x02	; 2
    128e:	0e 94 14 04 	call	0x828	; 0x828 <DIO_SET_PIN>
		/*	Disable SSD2	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	60 ef       	ldi	r22, 0xF0	; 240
    129e:	4a 81       	ldd	r20, Y+2	; 0x02
    12a0:	0e 94 94 08 	call	0x1128	; 0x1128 <Dio_WriteGroup>
    12a4:	0d c0       	rjmp	.+26     	; 0x12c0 <SSD_DisplayNumber+0x6e>
	}else{
		/*	Disable SSD1	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	62 e0       	ldi	r22, 0x02	; 2
    12aa:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
		/*	Enable SSD2	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN1);
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	0e 94 14 04 	call	0x828	; 0x828 <DIO_SET_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	60 ef       	ldi	r22, 0xF0	; 240
    12ba:	49 81       	ldd	r20, Y+1	; 0x01
    12bc:	0e 94 94 08 	call	0x1128	; 0x1128 <Dio_WriteGroup>
	}
	Counter++;
    12c0:	80 91 69 00 	lds	r24, 0x0069
    12c4:	8f 5f       	subi	r24, 0xFF	; 255
    12c6:	80 93 69 00 	sts	0x0069, r24
	if(Counter==((2^8)-1)){
    12ca:	80 91 69 00 	lds	r24, 0x0069
    12ce:	89 30       	cpi	r24, 0x09	; 9
    12d0:	11 f4       	brne	.+4      	; 0x12d6 <SSD_DisplayNumber+0x84>
		Counter = 0;
    12d2:	10 92 69 00 	sts	0x0069, r1
	}
}
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <SSD_Stop>:
//--------------------------------------------------------------------------------------------------
void SSD_Stop(){
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	/*	Disable SSD1	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	62 e0       	ldi	r22, 0x02	; 2
    12ee:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
	/*	Disable SSD2	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
}
    12fa:	cf 91       	pop	r28
    12fc:	df 91       	pop	r29
    12fe:	08 95       	ret

00001300 <LED_Init>:
#include "LED.h"

void LED_Init(void){
    1300:	df 93       	push	r29
    1302:	cf 93       	push	r28
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OUTPUT);
    1308:	82 e0       	ldi	r24, 0x02	; 2
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
}
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <LED_ON>:

void LED_ON(void){
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
    1320:	82 e0       	ldi	r24, 0x02	; 2
    1322:	67 e0       	ldi	r22, 0x07	; 7
    1324:	0e 94 14 04 	call	0x828	; 0x828 <DIO_SET_PIN>
}
    1328:	cf 91       	pop	r28
    132a:	df 91       	pop	r29
    132c:	08 95       	ret

0000132e <LED_OFF>:

void LED_OFF(void){
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
    1336:	82 e0       	ldi	r24, 0x02	; 2
    1338:	67 e0       	ldi	r22, 0x07	; 7
    133a:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
}
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <LED_TOGGLE>:

void LED_TOGGLE(void){
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
    134c:	82 e0       	ldi	r24, 0x02	; 2
    134e:	67 e0       	ldi	r22, 0x07	; 7
    1350:	0e 94 13 05 	call	0xa26	; 0xa26 <DIO_TOGGLE_PIN>
}
    1354:	cf 91       	pop	r28
    1356:	df 91       	pop	r29
    1358:	08 95       	ret

0000135a <Heater_Init>:
#include "Heater.h"

void Heater_Init(){
    135a:	df 93       	push	r29
    135c:	cf 93       	push	r28
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OUTPUT);
    1362:	82 e0       	ldi	r24, 0x02	; 2
    1364:	64 e0       	ldi	r22, 0x04	; 4
    1366:	41 e0       	ldi	r20, 0x01	; 1
    1368:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
}
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <Heater_ON>:

void Heater_ON(){
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Heater_Port, Heater_Pin);
    137a:	82 e0       	ldi	r24, 0x02	; 2
    137c:	64 e0       	ldi	r22, 0x04	; 4
    137e:	0e 94 14 04 	call	0x828	; 0x828 <DIO_SET_PIN>
}
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <Heater_OFF>:
void Heater_OFF(){
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
    1390:	82 e0       	ldi	r24, 0x02	; 2
    1392:	64 e0       	ldi	r22, 0x04	; 4
    1394:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
	LED_OFF();
    1398:	0e 94 97 09 	call	0x132e	; 0x132e <LED_OFF>
}
    139c:	cf 91       	pop	r28
    139e:	df 91       	pop	r29
    13a0:	08 95       	ret

000013a2 <Cooler_Init>:
#include "Cooler.h"

void Cooler_Init(){
    13a2:	df 93       	push	r29
    13a4:	cf 93       	push	r28
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OUTPUT);
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	64 e0       	ldi	r22, 0x04	; 4
    13ae:	41 e0       	ldi	r20, 0x01	; 1
    13b0:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
}
    13b4:	cf 91       	pop	r28
    13b6:	df 91       	pop	r29
    13b8:	08 95       	ret

000013ba <Cooler_ON>:
void Cooler_ON(){
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	cd b7       	in	r28, 0x3d	; 61
    13c0:	de b7       	in	r29, 0x3e	; 62
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
    13c2:	82 e0       	ldi	r24, 0x02	; 2
    13c4:	64 e0       	ldi	r22, 0x04	; 4
    13c6:	0e 94 14 04 	call	0x828	; 0x828 <DIO_SET_PIN>
	LED_ON();
    13ca:	0e 94 8c 09 	call	0x1318	; 0x1318 <LED_ON>
}
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <Cooler_OFF>:
void Cooler_OFF(){
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	64 e0       	ldi	r22, 0x04	; 4
    13e0:	0e 94 91 04 	call	0x922	; 0x922 <DIO_CLEAR_PIN>
	LED_OFF();
    13e4:	0e 94 97 09 	call	0x132e	; 0x132e <LED_OFF>
}
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <Button_Init>:
#include "Button.h"

void Button_Init(Button_ID Button){
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <Button_Init+0x6>
    13f4:	0f 92       	push	r0
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	3b 83       	std	Y+3, r19	; 0x03
    1404:	2a 83       	std	Y+2, r18	; 0x02
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	9b 81       	ldd	r25, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	91 05       	cpc	r25, r1
    140e:	79 f0       	breq	.+30     	; 0x142e <Button_Init+0x40>
    1410:	2a 81       	ldd	r18, Y+2	; 0x02
    1412:	3b 81       	ldd	r19, Y+3	; 0x03
    1414:	22 30       	cpi	r18, 0x02	; 2
    1416:	31 05       	cpc	r19, r1
    1418:	81 f0       	breq	.+32     	; 0x143a <Button_Init+0x4c>
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	89 f4       	brne	.+34     	; 0x1444 <Button_Init+0x56>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
    142c:	0b c0       	rjmp	.+22     	; 0x1444 <Button_Init+0x56>
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	64 e0       	ldi	r22, 0x04	; 4
    1432:	40 e0       	ldi	r20, 0x00	; 0
    1434:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <Button_Init+0x56>
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
    143a:	83 e0       	ldi	r24, 0x03	; 3
    143c:	62 e0       	ldi	r22, 0x02	; 2
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	0e 94 b1 07 	call	0xf62	; 0xf62 <DIO_WRITE_STATUS>
				break;
		}
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <Button_READ>:
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <Button_READ+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <Button_READ+0x8>
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	8a 83       	std	Y+2, r24	; 0x02
	Buttom_Status result;
	switch(Button){
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	3c 83       	std	Y+4, r19	; 0x04
    1466:	2b 83       	std	Y+3, r18	; 0x03
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	91 05       	cpc	r25, r1
    1470:	79 f0       	breq	.+30     	; 0x1490 <Button_READ+0x40>
    1472:	2b 81       	ldd	r18, Y+3	; 0x03
    1474:	3c 81       	ldd	r19, Y+4	; 0x04
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	81 f0       	breq	.+32     	; 0x149c <Button_READ+0x4c>
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	9c 81       	ldd	r25, Y+4	; 0x04
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	89 f4       	brne	.+34     	; 0x14a6 <Button_READ+0x56>
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_READ_LEVEL>
    148c:	89 83       	std	Y+1, r24	; 0x01
    148e:	0b c0       	rjmp	.+22     	; 0x14a6 <Button_READ+0x56>
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	64 e0       	ldi	r22, 0x04	; 4
    1494:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_READ_LEVEL>
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	05 c0       	rjmp	.+10     	; 0x14a6 <Button_READ+0x56>
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
    149c:	83 e0       	ldi	r24, 0x03	; 3
    149e:	62 e0       	ldi	r22, 0x02	; 2
    14a0:	0e 94 32 07 	call	0xe64	; 0xe64 <DIO_READ_LEVEL>
    14a4:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return result;
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <Button_Pullup_Enable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <Button_Pullup_Enable+0x6>
    14bc:	0f 92       	push	r0
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	3b 83       	std	Y+3, r19	; 0x03
    14cc:	2a 83       	std	Y+2, r18	; 0x02
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	71 f0       	breq	.+28     	; 0x14f4 <Button_Pullup_Enable+0x3e>
    14d8:	2a 81       	ldd	r18, Y+2	; 0x02
    14da:	3b 81       	ldd	r19, Y+3	; 0x03
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	71 f0       	breq	.+28     	; 0x14fe <Button_Pullup_Enable+0x48>
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	9b 81       	ldd	r25, Y+3	; 0x03
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	71 f4       	brne	.+28     	; 0x1506 <Button_Pullup_Enable+0x50>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 90 05 	call	0xb20	; 0xb20 <DIO_ENABLE_PULLUP>
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	64 e0       	ldi	r22, 0x04	; 4
    14f8:	0e 94 90 05 	call	0xb20	; 0xb20 <DIO_ENABLE_PULLUP>
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <Button_Pullup_Enable+0x50>
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
    14fe:	83 e0       	ldi	r24, 0x03	; 3
    1500:	62 e0       	ldi	r22, 0x02	; 2
    1502:	0e 94 90 05 	call	0xb20	; 0xb20 <DIO_ENABLE_PULLUP>
				break;
		}
}
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <Button_Pullup_Disable>:
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	00 d0       	rcall	.+0      	; 0x1518 <Button_Pullup_Disable+0x6>
    1518:	0f 92       	push	r0
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	89 83       	std	Y+1, r24	; 0x01
	switch(Button){
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	3b 83       	std	Y+3, r19	; 0x03
    1528:	2a 83       	std	Y+2, r18	; 0x02
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	9b 81       	ldd	r25, Y+3	; 0x03
    152e:	81 30       	cpi	r24, 0x01	; 1
    1530:	91 05       	cpc	r25, r1
    1532:	71 f0       	breq	.+28     	; 0x1550 <Button_Pullup_Disable+0x3e>
    1534:	2a 81       	ldd	r18, Y+2	; 0x02
    1536:	3b 81       	ldd	r19, Y+3	; 0x03
    1538:	22 30       	cpi	r18, 0x02	; 2
    153a:	31 05       	cpc	r19, r1
    153c:	71 f0       	breq	.+28     	; 0x155a <Button_Pullup_Disable+0x48>
    153e:	8a 81       	ldd	r24, Y+2	; 0x02
    1540:	9b 81       	ldd	r25, Y+3	; 0x03
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	71 f4       	brne	.+28     	; 0x1562 <Button_Pullup_Disable+0x50>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_DISABLE_PULLUP>
    154e:	09 c0       	rjmp	.+18     	; 0x1562 <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	64 e0       	ldi	r22, 0x04	; 4
    1554:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_DISABLE_PULLUP>
    1558:	04 c0       	rjmp	.+8      	; 0x1562 <Button_Pullup_Disable+0x50>
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
    155a:	83 e0       	ldi	r24, 0x03	; 3
    155c:	62 e0       	ldi	r22, 0x02	; 2
    155e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <DIO_DISABLE_PULLUP>
				break;
		}
}
    1562:	0f 90       	pop	r0
    1564:	0f 90       	pop	r0
    1566:	0f 90       	pop	r0
    1568:	cf 91       	pop	r28
    156a:	df 91       	pop	r29
    156c:	08 95       	ret

0000156e <main>:
#include "Lib.h"
#include "Main_Types.h"
#include "Services.h"


int main (){
    156e:	df 93       	push	r29
    1570:	cf 93       	push	r28
    1572:	00 d0       	rcall	.+0      	; 0x1574 <main+0x6>
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Timer0_Init();
    1578:	0e 94 2e 03 	call	0x65c	; 0x65c <Timer0_Init>
	Timer1_Init();
    157c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <Timer1_Init>
	Timer2_Init();
    1580:	0e 94 8e 01 	call	0x31c	; 0x31c <Timer2_Init>
	Heater_Init();
    1584:	0e 94 ad 09 	call	0x135a	; 0x135a <Heater_Init>
	Cooler_Init();
    1588:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <Cooler_Init>
	//	TempSen_Init();
	SSD_Init();
    158c:	0e 94 04 09 	call	0x1208	; 0x1208 <SSD_Init>
	Button_Init(BUTTON0);
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Button_Init>
	Button_Init(BUTTON1);
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Button_Init>
	Button_Init(BUTTON2);
    159c:	82 e0       	ldi	r24, 0x02	; 2
    159e:	0e 94 f7 09 	call	0x13ee	; 0x13ee <Button_Init>
	LED_Init();
    15a2:	0e 94 80 09 	call	0x1300	; 0x1300 <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
    15a6:	19 82       	std	Y+1, r1	; 0x01
	ButtonEnable = TRUE;
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	80 93 6f 00 	sts	0x006F, r24
	Mode = Temp_Control;
    15ae:	10 92 6e 00 	sts	0x006E, r1
	Curr_Temp = 0;
    15b2:	10 92 6b 00 	sts	0x006B, r1
	Restore_Temp();
    15b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <Restore_Temp>
	Update_Temp_En = TRUE;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 6c 00 	sts	0x006C, r24
	Blink_Status = FALSE;
    15c0:	10 92 6a 00 	sts	0x006A, r1
	Timer2_Start(TIMER2_1024_);
    15c4:	87 e0       	ldi	r24, 0x07	; 7
    15c6:	0e 94 a3 01 	call	0x346	; 0x346 <Timer2_Start>
	Timer2_EnableInterrupt();
    15ca:	0e 94 35 02 	call	0x46a	; 0x46a <Timer2_EnableInterrupt>
		SSD_DisplayNumber(54);*/


		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 28 0a 	call	0x1450	; 0x1450 <Button_READ>
    15d4:	88 23       	and	r24, r24
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <main+0x86>
			if(ButtonEnable == TRUE){
    15d8:	80 91 6f 00 	lds	r24, 0x006F
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	41 f4       	brne	.+16     	; 0x15f0 <main+0x82>
				SystemStatus = !SystemStatus;
    15e0:	1a 82       	std	Y+2, r1	; 0x02
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	88 23       	and	r24, r24
    15e6:	11 f4       	brne	.+4      	; 0x15ec <main+0x7e>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
			}
			Debounce_Handler();
    15f0:	0e 94 80 01 	call	0x300	; 0x300 <Debounce_Handler>
		}

		if(SystemStatus==OFF){
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	88 23       	and	r24, r24
    15f8:	49 f4       	brne	.+18     	; 0x160c <main+0x9e>
			Heater_OFF();
    15fa:	0e 94 c4 09 	call	0x1388	; 0x1388 <Heater_OFF>
			Cooler_OFF();
    15fe:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Cooler_OFF>
			SSD_Stop();
    1602:	0e 94 71 09 	call	0x12e2	; 0x12e2 <SSD_Stop>
			Mode = Temp_Control;
    1606:	10 92 6e 00 	sts	0x006E, r1
    160a:	e1 cf       	rjmp	.-62     	; 0x15ce <main+0x60>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
    160c:	80 91 6c 00 	lds	r24, 0x006C
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	11 f4       	brne	.+4      	; 0x1618 <main+0xaa>
			Update_Temp();
    1614:	0e 94 88 00 	call	0x110	; 0x110 <Update_Temp>
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	0e 94 28 0a 	call	0x1450	; 0x1450 <Button_READ>
    161e:	88 23       	and	r24, r24
    1620:	29 f4       	brne	.+10     	; 0x162c <main+0xbe>
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	0e 94 28 0a 	call	0x1450	; 0x1450 <Button_READ>
    1628:	88 23       	and	r24, r24
    162a:	39 f1       	breq	.+78     	; 0x167a <main+0x10c>
			if(ButtonEnable == TRUE){
    162c:	80 91 6f 00 	lds	r24, 0x006F
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	f9 f4       	brne	.+62     	; 0x1672 <main+0x104>
				Mode_Handler();
    1634:	0e 94 34 01 	call	0x268	; 0x268 <Mode_Handler>
				Mode = Temp_Set;
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	80 93 6e 00 	sts	0x006E, r24

				if(Button_READ(BUTTON2)){
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	0e 94 28 0a 	call	0x1450	; 0x1450 <Button_READ>
    1644:	88 23       	and	r24, r24
    1646:	51 f0       	breq	.+20     	; 0x165c <main+0xee>
					if(Des_Temp<Max_Temp){
    1648:	80 91 6d 00 	lds	r24, 0x006D
    164c:	80 35       	cpi	r24, 0x50	; 80
    164e:	78 f4       	brcc	.+30     	; 0x166e <main+0x100>
						Des_Temp +=5;
    1650:	80 91 6d 00 	lds	r24, 0x006D
    1654:	8b 5f       	subi	r24, 0xFB	; 251
    1656:	80 93 6d 00 	sts	0x006D, r24
    165a:	09 c0       	rjmp	.+18     	; 0x166e <main+0x100>
					}
				}else{
					if(Des_Temp>Min_Temp){
    165c:	80 91 6d 00 	lds	r24, 0x006D
    1660:	8f 31       	cpi	r24, 0x1F	; 31
    1662:	28 f0       	brcs	.+10     	; 0x166e <main+0x100>
						Des_Temp -=5;
    1664:	80 91 6d 00 	lds	r24, 0x006D
    1668:	85 50       	subi	r24, 0x05	; 5
    166a:	80 93 6d 00 	sts	0x006D, r24
					}
				}
				Store_Temp();
    166e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Store_Temp>

			}
			Mode_Handler();
    1672:	0e 94 34 01 	call	0x268	; 0x268 <Mode_Handler>
			Debounce_Handler();
    1676:	0e 94 80 01 	call	0x300	; 0x300 <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
    167a:	80 91 6e 00 	lds	r24, 0x006E
    167e:	88 23       	and	r24, r24
    1680:	29 f4       	brne	.+10     	; 0x168c <main+0x11e>
			SSD_DisplayNumber(Curr_Temp);
    1682:	80 91 6b 00 	lds	r24, 0x006B
    1686:	0e 94 29 09 	call	0x1252	; 0x1252 <SSD_DisplayNumber>
    168a:	13 c0       	rjmp	.+38     	; 0x16b2 <main+0x144>
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
    168c:	80 91 6e 00 	lds	r24, 0x006E
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	59 f4       	brne	.+22     	; 0x16aa <main+0x13c>
    1694:	80 91 6a 00 	lds	r24, 0x006A
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	39 f4       	brne	.+14     	; 0x16aa <main+0x13c>
			SSD_DisplayNumber(Des_Temp);
    169c:	80 91 6d 00 	lds	r24, 0x006D
    16a0:	0e 94 29 09 	call	0x1252	; 0x1252 <SSD_DisplayNumber>
			LED_ON();
    16a4:	0e 94 8c 09 	call	0x1318	; 0x1318 <LED_ON>
    16a8:	04 c0       	rjmp	.+8      	; 0x16b2 <main+0x144>
		}else{
			SSD_Stop();
    16aa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <SSD_Stop>
			LED_OFF();
    16ae:	0e 94 97 09 	call	0x132e	; 0x132e <LED_OFF>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
    16b2:	80 91 6b 00 	lds	r24, 0x006B
    16b6:	88 2f       	mov	r24, r24
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9c 01       	movw	r18, r24
    16bc:	2b 5f       	subi	r18, 0xFB	; 251
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	80 91 6d 00 	lds	r24, 0x006D
    16c4:	88 2f       	mov	r24, r24
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	28 17       	cp	r18, r24
    16ca:	39 07       	cpc	r19, r25
    16cc:	64 f4       	brge	.+24     	; 0x16e6 <main+0x178>
			Heater_ON();
    16ce:	0e 94 b9 09 	call	0x1372	; 0x1372 <Heater_ON>
			if(Blink_Status==TRUE){
    16d2:	80 91 6a 00 	lds	r24, 0x006A
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	19 f4       	brne	.+6      	; 0x16e0 <main+0x172>
				LED_ON();
    16da:	0e 94 8c 09 	call	0x1318	; 0x1318 <LED_ON>
    16de:	77 cf       	rjmp	.-274    	; 0x15ce <main+0x60>
			}else{
				LED_OFF();
    16e0:	0e 94 97 09 	call	0x132e	; 0x132e <LED_OFF>
    16e4:	74 cf       	rjmp	.-280    	; 0x15ce <main+0x60>
			}
		}else if((Curr_Temp-5)>Des_Temp){
    16e6:	80 91 6b 00 	lds	r24, 0x006B
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	9c 01       	movw	r18, r24
    16f0:	25 50       	subi	r18, 0x05	; 5
    16f2:	30 40       	sbci	r19, 0x00	; 0
    16f4:	80 91 6d 00 	lds	r24, 0x006D
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	82 17       	cp	r24, r18
    16fe:	93 07       	cpc	r25, r19
    1700:	1c f4       	brge	.+6      	; 0x1708 <main+0x19a>
			Cooler_ON();
    1702:	0e 94 dd 09 	call	0x13ba	; 0x13ba <Cooler_ON>
    1706:	63 cf       	rjmp	.-314    	; 0x15ce <main+0x60>
		}else{
			Cooler_OFF();
    1708:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <Cooler_OFF>
			Heater_OFF();
    170c:	0e 94 c4 09 	call	0x1388	; 0x1388 <Heater_OFF>
    1710:	5e cf       	rjmp	.-324    	; 0x15ce <main+0x60>

00001712 <__udivmodqi4>:
    1712:	99 1b       	sub	r25, r25
    1714:	79 e0       	ldi	r23, 0x09	; 9
    1716:	04 c0       	rjmp	.+8      	; 0x1720 <__udivmodqi4_ep>

00001718 <__udivmodqi4_loop>:
    1718:	99 1f       	adc	r25, r25
    171a:	96 17       	cp	r25, r22
    171c:	08 f0       	brcs	.+2      	; 0x1720 <__udivmodqi4_ep>
    171e:	96 1b       	sub	r25, r22

00001720 <__udivmodqi4_ep>:
    1720:	88 1f       	adc	r24, r24
    1722:	7a 95       	dec	r23
    1724:	c9 f7       	brne	.-14     	; 0x1718 <__udivmodqi4_loop>
    1726:	80 95       	com	r24
    1728:	08 95       	ret

0000172a <_exit>:
    172a:	f8 94       	cli

0000172c <__stop_program>:
    172c:	ff cf       	rjmp	.-2      	; 0x172c <__stop_program>
