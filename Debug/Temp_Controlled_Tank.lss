
Temp_Controlled_Tank.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000003f  00800060  00800060  00000d60  2**0
                  ALLOC
  2 .stab         00003228  00000000  00000000  00000d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001d39  00000000  00000000  00003f88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 4c 01 	jmp	0x298	; 0x298 <__vector_13>
  38:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_14>
  3c:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_15>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	af 39       	cpi	r26, 0x9F	; 159
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <main>
  74:	0c 94 74 06 	jmp	0xce8	; 0xce8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_5>:
static u8 Temp_arr[10] = {0,0,0,0,0,0,0,0,0,0};

extern u8 Num;


ISR (TIMER2_OVF_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	Update_Temp_En =TRUE;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 72 00 	sts	0x0072, r24
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <Update_Temp>:
}

void Update_Temp(void){
	u8 Var1 = 0;
	u8 Var2 = 0;
	if(T_Counter==Temp_Read_Rate){	//((2^(8))*(1024)*7)/(16*2^20)=109ms
  9a:	80 91 60 00 	lds	r24, 0x0060
  9e:	87 30       	cpi	r24, 0x07	; 7
  a0:	49 f0       	breq	.+18     	; 0xb4 <Update_Temp+0x1a>
		}
		Curr_Temp=Calc_Average();
		T_Counter=0;
	}
	else{
		T_Counter++;
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 60 00 	sts	0x0060, r24
		Timer2_Start(TIMER2_1024_);
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <Timer2_Start>
	}
	Update_Temp_En =FALSE;
  ae:	10 92 72 00 	sts	0x0072, r1
}
  b2:	08 95       	ret

void Update_Temp(void){
	u8 Var1 = 0;
	u8 Var2 = 0;
	if(T_Counter==Temp_Read_Rate){	//((2^(8))*(1024)*7)/(16*2^20)=109ms
		Timer2_Stop();
  b4:	0e 94 a7 01 	call	0x34e	; 0x34e <Timer2_Stop>
		if(SSD_Counter==LED_SSD_Blink_Rate){	//((2^(8))*(1024)*7*10)/(16*2^20)=1.09Sec
  b8:	80 91 61 00 	lds	r24, 0x0061
  bc:	8a 30       	cpi	r24, 0x0A	; 10
  be:	99 f1       	breq	.+102    	; 0x126 <Update_Temp+0x8c>
			Blink_Status = !Blink_Status;
			SSD_Counter=0;
		}else{
			SSD_Counter++;
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 61 00 	sts	0x0061, r24
		}
		u8 Temp = Num;
  c6:	40 91 76 00 	lds	r20, 0x0076
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
		for(int i=0;i<10;i++){
			if(i==0){
  d0:	00 97       	sbiw	r24, 0x00	; 0
  d2:	49 f4       	brne	.+18     	; 0xe6 <Update_Temp+0x4c>
				Var1 = Temp_arr[i];
  d4:	20 91 62 00 	lds	r18, 0x0062
				Temp_arr[i] = Temp;
  d8:	40 93 62 00 	sts	0x0062, r20
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
			Blink_Status = !Blink_Status;
			SSD_Counter=0;
		}else{
			SSD_Counter++;
		}
		u8 Temp = Num;
  e0:	32 2f       	mov	r19, r18
		for(int i=0;i<10;i++){
			if(i==0){
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	b9 f3       	breq	.-18     	; 0xd4 <Update_Temp+0x3a>
				Var1 = Temp_arr[i];
				Temp_arr[i] = Temp;
			}
			else{
				Var2 = Var1;
				Var1 = Temp_arr[i];
  e6:	fc 01       	movw	r30, r24
  e8:	ee 59       	subi	r30, 0x9E	; 158
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	20 81       	ld	r18, Z
				Temp_arr[i] = Var2;
  ee:	30 83       	st	Z, r19
			SSD_Counter=0;
		}else{
			SSD_Counter++;
		}
		u8 Temp = Num;
		for(int i=0;i<10;i++){
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	8a 30       	cpi	r24, 0x0A	; 10
  f4:	91 05       	cpc	r25, r1
  f6:	a4 f3       	brlt	.-24     	; 0xe0 <Update_Temp+0x46>
  f8:	e2 e6       	ldi	r30, 0x62	; 98
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
}

static u8 Calc_Average(){
	u16 result = 0;
	for(int i=0;i<10;i++){
		result+=Temp_arr[i];
 100:	81 91       	ld	r24, Z+
 102:	28 0f       	add	r18, r24
 104:	31 1d       	adc	r19, r1
	Update_Temp_En =TRUE;
}

static u8 Calc_Average(){
	u16 result = 0;
	for(int i=0;i<10;i++){
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	ec 36       	cpi	r30, 0x6C	; 108
 10a:	f8 07       	cpc	r31, r24
 10c:	c9 f7       	brne	.-14     	; 0x100 <Update_Temp+0x66>
				Var1 = Temp_arr[i];
				Temp_arr[i] = Var2;

			}
		}
		Curr_Temp=Calc_Average();
 10e:	c9 01       	movw	r24, r18
 110:	6a e0       	ldi	r22, 0x0A	; 10
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
 118:	60 93 71 00 	sts	0x0071, r22
		T_Counter=0;
 11c:	10 92 60 00 	sts	0x0060, r1
	}
	else{
		T_Counter++;
		Timer2_Start(TIMER2_1024_);
	}
	Update_Temp_En =FALSE;
 120:	10 92 72 00 	sts	0x0072, r1
}
 124:	08 95       	ret
	u8 Var1 = 0;
	u8 Var2 = 0;
	if(T_Counter==Temp_Read_Rate){	//((2^(8))*(1024)*7)/(16*2^20)=109ms
		Timer2_Stop();
		if(SSD_Counter==LED_SSD_Blink_Rate){	//((2^(8))*(1024)*7*10)/(16*2^20)=1.09Sec
			Blink_Status = !Blink_Status;
 126:	80 91 70 00 	lds	r24, 0x0070
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	88 23       	and	r24, r24
 12e:	29 f0       	breq	.+10     	; 0x13a <Update_Temp+0xa0>
 130:	90 93 70 00 	sts	0x0070, r25
			SSD_Counter=0;
 134:	10 92 61 00 	sts	0x0061, r1
 138:	c6 cf       	rjmp	.-116    	; 0xc6 <Update_Temp+0x2c>
	u8 Var1 = 0;
	u8 Var2 = 0;
	if(T_Counter==Temp_Read_Rate){	//((2^(8))*(1024)*7)/(16*2^20)=109ms
		Timer2_Stop();
		if(SSD_Counter==LED_SSD_Blink_Rate){	//((2^(8))*(1024)*7*10)/(16*2^20)=1.09Sec
			Blink_Status = !Blink_Status;
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	f9 cf       	rjmp	.-14     	; 0x130 <Update_Temp+0x96>

0000013e <Store_Temp>:

#include "Store_Temp.h"


void Store_Temp(void){
	EEPROM_Write((u16)1,Des_Temp);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	60 91 73 00 	lds	r22, 0x0073
 146:	0e 94 50 02 	call	0x4a0	; 0x4a0 <EEPROM_Write>
}
 14a:	08 95       	ret

0000014c <Restore_Temp>:

void Restore_Temp(void){
	u8 Reading=0;
	u16 Add=0;

	Reading = EEPROM_Read((u16)Add);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_Read>
	if (Reading == CHK){
 154:	85 35       	cpi	r24, 0x55	; 85
 156:	71 f0       	breq	.+28     	; 0x174 <Restore_Temp+0x28>
		Des_Temp = EEPROM_Read(Add+1);
	}
	else{
		EEPROM_Write((u16)Add,CHK);
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	65 e5       	ldi	r22, 0x55	; 85
 15e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <EEPROM_Write>
		EEPROM_Write((u16)(Add+1),(u8)default_Temp);
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	6c e3       	ldi	r22, 0x3C	; 60
 168:	0e 94 50 02 	call	0x4a0	; 0x4a0 <EEPROM_Write>
		Des_Temp = default_Temp;
 16c:	8c e3       	ldi	r24, 0x3C	; 60
 16e:	80 93 73 00 	sts	0x0073, r24
 172:	08 95       	ret
	u8 Reading=0;
	u16 Add=0;

	Reading = EEPROM_Read((u16)Add);
	if (Reading == CHK){
		Des_Temp = EEPROM_Read(Add+1);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 58 02 	call	0x4b0	; 0x4b0 <EEPROM_Read>
 17c:	80 93 73 00 	sts	0x0073, r24
 180:	08 95       	ret

00000182 <Mode_Handler>:
	Timer1_Stop();
	Timer1_DisableInterrupt();
}

void Mode_Handler(void){
	Timer1_Stop();
 182:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Timer1_Stop>
	Timer1_EnableInterrupt();
 186:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Timer1_EnableInterrupt>
	Timer1_Start(TIMER1_1024_);
 18a:	85 e0       	ldi	r24, 0x05	; 5
 18c:	0e 94 c2 01 	call	0x384	; 0x384 <Timer1_Start>
}
 190:	08 95       	ret

00000192 <__vector_9>:

#include "Mode_Handler.h"



ISR(TIMER1_OVF_vect){
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	3f 93       	push	r19
 1a0:	4f 93       	push	r20
 1a2:	5f 93       	push	r21
 1a4:	6f 93       	push	r22
 1a6:	7f 93       	push	r23
 1a8:	8f 93       	push	r24
 1aa:	9f 93       	push	r25
 1ac:	af 93       	push	r26
 1ae:	bf 93       	push	r27
 1b0:	ef 93       	push	r30
 1b2:	ff 93       	push	r31
	Mode = Temp_Control;
 1b4:	10 92 74 00 	sts	0x0074, r1
	Timer1_Stop();
 1b8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <Timer1_Stop>
	Timer1_DisableInterrupt();
 1bc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <Timer1_DisableInterrupt>
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <Debounce_Handler>:
	}

}

void Debounce_Handler(void){
	ButtonEnable = FALSE;
 1e2:	10 92 75 00 	sts	0x0075, r1
	Timer0_Start(TIMER0_1024_);
 1e6:	85 e0       	ldi	r24, 0x05	; 5
 1e8:	0e 94 09 02 	call	0x412	; 0x412 <Timer0_Start>
	Timer0_EnableInterrupt();
 1ec:	0e 94 3d 02 	call	0x47a	; 0x47a <Timer0_EnableInterrupt>
}
 1f0:	08 95       	ret

000001f2 <__vector_11>:

#include "Debounce_Handler.h"

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	if(Counter==5){//((2^(8))*(1024)*5)/(16*2^20)=78.1ms
 214:	80 91 6c 00 	lds	r24, 0x006C
 218:	85 30       	cpi	r24, 0x05	; 5
 21a:	b9 f0       	breq	.+46     	; 0x24a <__vector_11+0x58>
		Timer0_Stop();
		Timer0_DisableInterrupt();
		Counter = 0;
	}
	else{
		Counter++;
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 6c 00 	sts	0x006C, r24
		Timer0_Start(TIMER0_1024_);
 222:	85 e0       	ldi	r24, 0x05	; 5
 224:	0e 94 09 02 	call	0x412	; 0x412 <Timer0_Start>
	}

}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	bf 91       	pop	r27
 22e:	af 91       	pop	r26
 230:	9f 91       	pop	r25
 232:	8f 91       	pop	r24
 234:	7f 91       	pop	r23
 236:	6f 91       	pop	r22
 238:	5f 91       	pop	r21
 23a:	4f 91       	pop	r20
 23c:	3f 91       	pop	r19
 23e:	2f 91       	pop	r18
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

static u8 Counter = 0;

ISR(TIMER0_OVF_vect){
	if(Counter==5){//((2^(8))*(1024)*5)/(16*2^20)=78.1ms
		ButtonEnable = TRUE;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 75 00 	sts	0x0075, r24
		Timer0_Stop();
 250:	0e 94 3a 02 	call	0x474	; 0x474 <Timer0_Stop>
		Timer0_DisableInterrupt();
 254:	0e 94 44 02 	call	0x488	; 0x488 <Timer0_DisableInterrupt>
		Counter = 0;
 258:	10 92 6c 00 	sts	0x006C, r1
 25c:	e5 cf       	rjmp	.-54     	; 0x228 <__vector_11+0x36>

0000025e <UART_Init>:
volatile Boolean Rx_Buffer_Ready = FALSE;

void UART_Init(u16 baudRate)
{
	/* Set baud rate */
	UART_UBRRH_REG = (u8)(baudRate>>8);
 25e:	90 bd       	out	0x20, r25	; 32
	UART_UBRRL_REG = (u8)baudRate;
 260:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB_REG,RXEN_BIT_NO);  /* Enable Receiver*/
 262:	54 9a       	sbi	0x0a, 4	; 10
	SET_BIT(UART_UCSRB_REG,TXEN_BIT_NO);  /* Enable Transmitter */
 264:	53 9a       	sbi	0x0a, 3	; 10
	/* Set frame format: 8data, 1stop bit, Even Parity */
	UART_UCSRC_REG |= (1 << URSEL_BIT_NO)|UART_8_BIT_DATA | UART_EVEN_PARITY;
 266:	80 b5       	in	r24, 0x20	; 32
 268:	86 6a       	ori	r24, 0xA6	; 166
 26a:	80 bd       	out	0x20, r24	; 32
	/*	Enable Rx Complete Interrupt	*/
	SET_BIT(UART_UCSRB_REG,UART_RX_COMPLETE_INTERRUPT_BIT);
 26c:	57 9a       	sbi	0x0a, 7	; 10

}
 26e:	08 95       	ret

00000270 <UART_TransmitChr>:

void UART_TransmitChr(u8 data)
{
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
 270:	5d 9b       	sbis	0x0b, 5	; 11
 272:	fe cf       	rjmp	.-4      	; 0x270 <UART_TransmitChr>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
 274:	8c b9       	out	0x0c, r24	; 12
}
 276:	08 95       	ret

00000278 <UART_TransmitStr>:

void UART_TransmitStr(u8 *str)
{
 278:	fc 01       	movw	r30, r24
	/* Wait for empty transmit buffer */
	while (*str != '\0')
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	39 f0       	breq	.+14     	; 0x28e <UART_TransmitStr+0x16>
}

void UART_TransmitChr(u8 data)
{
	/* Wait for empty transmit buffer */
	while (!(CHK_BIT(UART_UCSRA_REG,UDRE_BIT_NO)))
 280:	5d 9b       	sbis	0x0b, 5	; 11
 282:	fe cf       	rjmp	.-4      	; 0x280 <UART_TransmitStr+0x8>
			;
	/* Put data into buffer, sends the data */
	UART_UDR_REG = data;
 284:	8c b9       	out	0x0c, r24	; 12
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
	{
		UART_TransmitChr(*str);
		str++;
 286:	31 96       	adiw	r30, 0x01	; 1
}

void UART_TransmitStr(u8 *str)
{
	/* Wait for empty transmit buffer */
	while (*str != '\0')
 288:	80 81       	ld	r24, Z
 28a:	88 23       	and	r24, r24
 28c:	c9 f7       	brne	.-14     	; 0x280 <UART_TransmitStr+0x8>
 28e:	08 95       	ret

00000290 <UART_ReceiveChr>:
}

u8 UART_ReceiveChr(void)
{
	/* Wait for data to be received */
	while (!(CHK_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
 290:	5f 9b       	sbis	0x0b, 7	; 11
 292:	fe cf       	rjmp	.-4      	; 0x290 <UART_ReceiveChr>
			;
	/* Get and return received data from buffer */
	return UART_UDR_REG;
 294:	8c b1       	in	r24, 0x0c	; 12
}
 296:	08 95       	ret

00000298 <__vector_13>:

ISR(USART_RXC_vect)
{
 298:	1f 92       	push	r1
 29a:	0f 92       	push	r0
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	0f 92       	push	r0
 2a0:	11 24       	eor	r1, r1
 2a2:	8f 93       	push	r24

	Num=UART_UDR_REG;
 2a4:	8c b1       	in	r24, 0x0c	; 12
 2a6:	80 93 76 00 	sts	0x0076, r24
	//Rx_Buffer_Ready = TRUE;

}
 2aa:	8f 91       	pop	r24
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_14>:
ISR(USART_UDRE_vect)
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1

}
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_15>:
ISR(USART_TXC_vect)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1

}
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <Timer2_Init>:
#include "Timer2.h"


void Timer2_Init(void){

	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM20);
 2de:	85 b5       	in	r24, 0x25	; 37
 2e0:	8f 7b       	andi	r24, 0xBF	; 191
 2e2:	85 bd       	out	0x25, r24	; 37
	 CLR_BIT(TIMER2_TCCR2_REG,TIMER2_WGM21);
 2e4:	85 b5       	in	r24, 0x25	; 37
 2e6:	87 7f       	andi	r24, 0xF7	; 247
 2e8:	85 bd       	out	0x25, r24	; 37
}
 2ea:	08 95       	ret

000002ec <Timer2_Start>:


void Timer2_Start(TIMER2_PreScaler_ID prescaler){

	TIMER2_TCNT2_REG =0;  //Reset
 2ec:	14 bc       	out	0x24, r1	; 36

	switch(prescaler){
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	51 f1       	breq	.+84     	; 0x346 <Timer2_Start+0x5a>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	48 f0       	brcs	.+18     	; 0x308 <Timer2_Start+0x1c>
 2f6:	85 30       	cpi	r24, 0x05	; 5
 2f8:	d1 f0       	breq	.+52     	; 0x32e <Timer2_Start+0x42>
 2fa:	85 30       	cpi	r24, 0x05	; 5
 2fc:	68 f0       	brcs	.+26     	; 0x318 <Timer2_Start+0x2c>
 2fe:	86 30       	cpi	r24, 0x06	; 6
 300:	d1 f0       	breq	.+52     	; 0x336 <Timer2_Start+0x4a>
 302:	87 30       	cpi	r24, 0x07	; 7
 304:	81 f0       	breq	.+32     	; 0x326 <Timer2_Start+0x3a>
 306:	08 95       	ret
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	c9 f0       	breq	.+50     	; 0x33e <Timer2_Start+0x52>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	40 f0       	brcs	.+16     	; 0x320 <Timer2_Start+0x34>
		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
		break;

	case TIMER2_8_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
 310:	85 b5       	in	r24, 0x25	; 37
 312:	82 60       	ori	r24, 0x02	; 2
 314:	85 bd       	out	0x25, r24	; 37
 316:	08 95       	ret
		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
		break;

	case TIMER2_64_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
 318:	85 b5       	in	r24, 0x25	; 37
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	85 bd       	out	0x25, r24	; 37
 31e:	08 95       	ret

	switch(prescaler){

	case TIMER2_Stop_:

		TIMER2_TCCR2_REG |= Timer2_Stopped;
 320:	85 b5       	in	r24, 0x25	; 37
 322:	85 bd       	out	0x25, r24	; 37
 324:	08 95       	ret
		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
		break;

	case TIMER2_1024_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_1024;
 326:	85 b5       	in	r24, 0x25	; 37
 328:	87 60       	ori	r24, 0x07	; 7
 32a:	85 bd       	out	0x25, r24	; 37
 32c:	08 95       	ret
		TIMER2_TCCR2_REG |= TIMER2_Prescaler_64;
		break;

	case TIMER2_128_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_128;
 32e:	85 b5       	in	r24, 0x25	; 37
 330:	85 60       	ori	r24, 0x05	; 5
 332:	85 bd       	out	0x25, r24	; 37
 334:	08 95       	ret
		break;

	case TIMER2_256_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_256;
 336:	85 b5       	in	r24, 0x25	; 37
 338:	86 60       	ori	r24, 0x06	; 6
 33a:	85 bd       	out	0x25, r24	; 37
 33c:	08 95       	ret
		TIMER2_TCCR2_REG |= Timer2_Stopped;
		break;

	case TIMER2_None_:

		TIMER2_TCCR2_REG |= TIMER2_NO_Prescaler;
 33e:	85 b5       	in	r24, 0x25	; 37
 340:	81 60       	ori	r24, 0x01	; 1
 342:	85 bd       	out	0x25, r24	; 37
 344:	08 95       	ret
		TIMER2_TCCR2_REG |= TIMER2_Prescaler_8;
		break;

	case TIMER2_32_:

		TIMER2_TCCR2_REG |= TIMER2_Prescaler_32;
 346:	85 b5       	in	r24, 0x25	; 37
 348:	83 60       	ori	r24, 0x03	; 3
 34a:	85 bd       	out	0x25, r24	; 37
 34c:	08 95       	ret

0000034e <Timer2_Stop>:
}


void Timer2_Stop(void){

	TIMER2_TCCR2_REG |=Timer2_Stopped;
 34e:	85 b5       	in	r24, 0x25	; 37
 350:	85 bd       	out	0x25, r24	; 37
}
 352:	08 95       	ret

00000354 <Timer2_EnableInterrupt>:


void Timer2_EnableInterrupt(void){

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
 354:	8f b7       	in	r24, 0x3f	; 63
 356:	80 68       	ori	r24, 0x80	; 128
 358:	8f bf       	out	0x3f, r24	; 63
   SET_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
 35a:	89 b7       	in	r24, 0x39	; 57
 35c:	80 64       	ori	r24, 0x40	; 64
 35e:	89 bf       	out	0x39, r24	; 57
}
 360:	08 95       	ret

00000362 <Timer2_DisableInterrupt>:


void Timer2_DisableInterrupt(void){

   CLR_BIT(TIMER_TIMSK_REG,Timer2_Overflow_Int_enable) ;
 362:	89 b7       	in	r24, 0x39	; 57
 364:	8f 7b       	andi	r24, 0xBF	; 191
 366:	89 bf       	out	0x39, r24	; 57
}
 368:	08 95       	ret

0000036a <Timer1_Init>:
#include "Timer1.h"

void Timer1_Init(void){

	 //interval Mode
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM10);
 36a:	8f b5       	in	r24, 0x2f	; 47
 36c:	8e 7f       	andi	r24, 0xFE	; 254
 36e:	8f bd       	out	0x2f, r24	; 47
	 CLR_BIT(TIMER1_TCCR1A_REG,TIMER1_WGM11);
 370:	8f b5       	in	r24, 0x2f	; 47
 372:	8d 7f       	andi	r24, 0xFD	; 253
 374:	8f bd       	out	0x2f, r24	; 47
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM12);
 376:	8e b5       	in	r24, 0x2e	; 46
 378:	87 7f       	andi	r24, 0xF7	; 247
 37a:	8e bd       	out	0x2e, r24	; 46
	 CLR_BIT(TIMER1_TCCR1B_REG,TIMER1_WGM13);
 37c:	8e b5       	in	r24, 0x2e	; 46
 37e:	8f 7e       	andi	r24, 0xEF	; 239
 380:	8e bd       	out	0x2e, r24	; 46
}
 382:	08 95       	ret

00000384 <Timer1_Start>:


void Timer1_Start(TIMER1_PreScaler_ID prescaler){

	//Reset
	TIMER1_TCNT1L_REG = 0;
 384:	1d bc       	out	0x2d, r1	; 45
 386:	1c bc       	out	0x2c, r1	; 44

	switch(prescaler){
 388:	83 30       	cpi	r24, 0x03	; 3
 38a:	51 f1       	breq	.+84     	; 0x3e0 <Timer1_Start+0x5c>
 38c:	84 30       	cpi	r24, 0x04	; 4
 38e:	48 f0       	brcs	.+18     	; 0x3a2 <Timer1_Start+0x1e>
 390:	85 30       	cpi	r24, 0x05	; 5
 392:	d1 f0       	breq	.+52     	; 0x3c8 <Timer1_Start+0x44>
 394:	85 30       	cpi	r24, 0x05	; 5
 396:	68 f0       	brcs	.+26     	; 0x3b2 <Timer1_Start+0x2e>
 398:	86 30       	cpi	r24, 0x06	; 6
 39a:	d1 f0       	breq	.+52     	; 0x3d0 <Timer1_Start+0x4c>
 39c:	87 30       	cpi	r24, 0x07	; 7
 39e:	81 f0       	breq	.+32     	; 0x3c0 <Timer1_Start+0x3c>
 3a0:	08 95       	ret
 3a2:	81 30       	cpi	r24, 0x01	; 1
 3a4:	c9 f0       	breq	.+50     	; 0x3d8 <Timer1_Start+0x54>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	40 f0       	brcs	.+16     	; 0x3ba <Timer1_Start+0x36>
		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
		break;

	case TIMER1_8_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
 3aa:	8e b5       	in	r24, 0x2e	; 46
 3ac:	82 60       	ori	r24, 0x02	; 2
 3ae:	8e bd       	out	0x2e, r24	; 46
 3b0:	08 95       	ret
		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
		break;

	case TIMER1_256_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
 3b2:	8e b5       	in	r24, 0x2e	; 46
 3b4:	84 60       	ori	r24, 0x04	; 4
 3b6:	8e bd       	out	0x2e, r24	; 46
 3b8:	08 95       	ret

	switch(prescaler){

	case TIMER1_Stop_:

		TIMER1_TCCR1B_REG |= Timer1_Stopped;
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	8e bd       	out	0x2e, r24	; 46
 3be:	08 95       	ret
		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
		break;

	case TIMER1_Ext_Rising_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Rising_Edge;
 3c0:	8e b5       	in	r24, 0x2e	; 46
 3c2:	87 60       	ori	r24, 0x07	; 7
 3c4:	8e bd       	out	0x2e, r24	; 46
 3c6:	08 95       	ret
		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_256;
		break;

	case TIMER1_1024_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_1024;
 3c8:	8e b5       	in	r24, 0x2e	; 46
 3ca:	85 60       	ori	r24, 0x05	; 5
 3cc:	8e bd       	out	0x2e, r24	; 46
 3ce:	08 95       	ret
		break;

	case TIMER1_Ext_Falling_Edge_:

		TIMER1_TCCR1B_REG |= TIMER1_Ext_Falling_Edge;
 3d0:	8e b5       	in	r24, 0x2e	; 46
 3d2:	86 60       	ori	r24, 0x06	; 6
 3d4:	8e bd       	out	0x2e, r24	; 46
 3d6:	08 95       	ret
		TIMER1_TCCR1B_REG |= Timer1_Stopped;
		break;

	case TIMER1_None_:

		TIMER1_TCCR1B_REG |= TIMER1_NO_Prescaler;
 3d8:	8e b5       	in	r24, 0x2e	; 46
 3da:	81 60       	ori	r24, 0x01	; 1
 3dc:	8e bd       	out	0x2e, r24	; 46
 3de:	08 95       	ret
		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_8;
		break;

	case TIMER1_64_:

		TIMER1_TCCR1B_REG |= TIMER1_Prescaler_64;
 3e0:	8e b5       	in	r24, 0x2e	; 46
 3e2:	83 60       	ori	r24, 0x03	; 3
 3e4:	8e bd       	out	0x2e, r24	; 46
 3e6:	08 95       	ret

000003e8 <Timer1_Stop>:
}


void Timer1_Stop(void){

	TIMER1_TCCR1B_REG |=Timer1_Stopped;
 3e8:	8e b5       	in	r24, 0x2e	; 46
 3ea:	8e bd       	out	0x2e, r24	; 46
}
 3ec:	08 95       	ret

000003ee <Timer1_EnableInterrupt>:


void Timer1_EnableInterrupt(void){

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
 3ee:	8f b7       	in	r24, 0x3f	; 63
 3f0:	80 68       	ori	r24, 0x80	; 128
 3f2:	8f bf       	out	0x3f, r24	; 63
   SET_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
 3f4:	89 b7       	in	r24, 0x39	; 57
 3f6:	84 60       	ori	r24, 0x04	; 4
 3f8:	89 bf       	out	0x39, r24	; 57
}
 3fa:	08 95       	ret

000003fc <Timer1_DisableInterrupt>:


void Timer1_DisableInterrupt(void){

   CLR_BIT(TIMER_TIMSK_REG,Timer1_Overflow_Int_enable) ;
 3fc:	89 b7       	in	r24, 0x39	; 57
 3fe:	8b 7f       	andi	r24, 0xFB	; 251
 400:	89 bf       	out	0x39, r24	; 57
}
 402:	08 95       	ret

00000404 <Timer0_Init>:


void Timer0_Init(void){

	//Interval Mode
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM00);
 404:	83 b7       	in	r24, 0x33	; 51
 406:	8f 7b       	andi	r24, 0xBF	; 191
 408:	83 bf       	out	0x33, r24	; 51
	 CLR_BIT(TIMER0_TCCR0_REG,TIMER0_WGM01);
 40a:	83 b7       	in	r24, 0x33	; 51
 40c:	87 7f       	andi	r24, 0xF7	; 247
 40e:	83 bf       	out	0x33, r24	; 51

}
 410:	08 95       	ret

00000412 <Timer0_Start>:


void Timer0_Start(TIMER0_PreScaler_ID prescaler){

	TIMER0_TCNT0_REG =0;  //Reset
 412:	12 be       	out	0x32, r1	; 50

	switch(prescaler){
 414:	83 30       	cpi	r24, 0x03	; 3
 416:	51 f1       	breq	.+84     	; 0x46c <Timer0_Start+0x5a>
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	48 f0       	brcs	.+18     	; 0x42e <Timer0_Start+0x1c>
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	d1 f0       	breq	.+52     	; 0x454 <Timer0_Start+0x42>
 420:	85 30       	cpi	r24, 0x05	; 5
 422:	68 f0       	brcs	.+26     	; 0x43e <Timer0_Start+0x2c>
 424:	86 30       	cpi	r24, 0x06	; 6
 426:	d1 f0       	breq	.+52     	; 0x45c <Timer0_Start+0x4a>
 428:	87 30       	cpi	r24, 0x07	; 7
 42a:	81 f0       	breq	.+32     	; 0x44c <Timer0_Start+0x3a>
 42c:	08 95       	ret
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	c9 f0       	breq	.+50     	; 0x464 <Timer0_Start+0x52>
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	40 f0       	brcs	.+16     	; 0x446 <Timer0_Start+0x34>
		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
		break;

	case TIMER0_8_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
 436:	83 b7       	in	r24, 0x33	; 51
 438:	82 60       	ori	r24, 0x02	; 2
 43a:	83 bf       	out	0x33, r24	; 51
 43c:	08 95       	ret
		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
		break;

	case TIMER0_256_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	84 60       	ori	r24, 0x04	; 4
 442:	83 bf       	out	0x33, r24	; 51
 444:	08 95       	ret

	switch(prescaler){

	case TIMER0_Stop_:

		TIMER0_TCCR0_REG |= Timer0_Stopped;
 446:	83 b7       	in	r24, 0x33	; 51
 448:	83 bf       	out	0x33, r24	; 51
 44a:	08 95       	ret
		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
		break;

	case TIMER0_Ext_Rising_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Rising_Edge;
 44c:	83 b7       	in	r24, 0x33	; 51
 44e:	87 60       	ori	r24, 0x07	; 7
 450:	83 bf       	out	0x33, r24	; 51
 452:	08 95       	ret
		TIMER0_TCCR0_REG |= TIMER0_Prescaler_256;
		break;

	case TIMER0_1024_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_1024;
 454:	83 b7       	in	r24, 0x33	; 51
 456:	85 60       	ori	r24, 0x05	; 5
 458:	83 bf       	out	0x33, r24	; 51
 45a:	08 95       	ret
		break;

	case TIMER0_Ext_Falling_Edge_:

		TIMER0_TCCR0_REG |= TIMER0_Ext_Falling_Edge;
 45c:	83 b7       	in	r24, 0x33	; 51
 45e:	86 60       	ori	r24, 0x06	; 6
 460:	83 bf       	out	0x33, r24	; 51
 462:	08 95       	ret
		TIMER0_TCCR0_REG |= Timer0_Stopped;
		break;

	case TIMER0_None_:

		TIMER0_TCCR0_REG |= TIMER0_NO_Prescaler;
 464:	83 b7       	in	r24, 0x33	; 51
 466:	81 60       	ori	r24, 0x01	; 1
 468:	83 bf       	out	0x33, r24	; 51
 46a:	08 95       	ret
		TIMER0_TCCR0_REG |= TIMER0_Prescaler_8;
		break;

	case TIMER0_64_:

		TIMER0_TCCR0_REG |= TIMER0_Prescaler_64;
 46c:	83 b7       	in	r24, 0x33	; 51
 46e:	83 60       	ori	r24, 0x03	; 3
 470:	83 bf       	out	0x33, r24	; 51
 472:	08 95       	ret

00000474 <Timer0_Stop>:
}


void Timer0_Stop(void){

	TIMER0_TCCR0_REG |=Timer0_Stopped;
 474:	83 b7       	in	r24, 0x33	; 51
 476:	83 bf       	out	0x33, r24	; 51
}
 478:	08 95       	ret

0000047a <Timer0_EnableInterrupt>:


void Timer0_EnableInterrupt(void){

	//set global int bit (law ht3mlha fel main yb2a sheel el line da w sheel include Glbl_Int mn el .h)
   SET_BIT(Glbl_STATUS_REG,7);
 47a:	8f b7       	in	r24, 0x3f	; 63
 47c:	80 68       	ori	r24, 0x80	; 128
 47e:	8f bf       	out	0x3f, r24	; 63
   SET_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
 480:	89 b7       	in	r24, 0x39	; 57
 482:	81 60       	ori	r24, 0x01	; 1
 484:	89 bf       	out	0x39, r24	; 57
}
 486:	08 95       	ret

00000488 <Timer0_DisableInterrupt>:


void Timer0_DisableInterrupt(void){

   CLR_BIT(TIMER_TIMSK_REG,Timer0_Overflow_Int_enable) ;
 488:	89 b7       	in	r24, 0x39	; 57
 48a:	8e 7f       	andi	r24, 0xFE	; 254
 48c:	89 bf       	out	0x39, r24	; 57
}
 48e:	08 95       	ret

00000490 <Enable_Gl_Int>:
#include "Std_Operations.h"

void Enable_Gl_Int(){

	//Glbl_STATUS_REG = Global_REG_Enable;
    SET_BIT(Glbl_STATUS_REG,7);
 490:	8f b7       	in	r24, 0x3f	; 63
 492:	80 68       	ori	r24, 0x80	; 128
 494:	8f bf       	out	0x3f, r24	; 63
}
 496:	08 95       	ret

00000498 <Disable_Gl_Int>:
void Disable_Gl_Int(){

	//Glbl_STATUS_REG = Global_REG_Disable;
	CLR_BIT(Glbl_STATUS_REG,7);
 498:	8f b7       	in	r24, 0x3f	; 63
 49a:	8f 77       	andi	r24, 0x7F	; 127
 49c:	8f bf       	out	0x3f, r24	; 63
}
 49e:	08 95       	ret

000004a0 <EEPROM_Write>:
#include <Eeprom.h>

void EEPROM_Write(u16 address,u8 data)
{
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
 4a0:	e1 99       	sbic	0x1c, 1	; 28
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <EEPROM_Write>
		/*	Do Nothing	*/		;
	/* Set up address and data registers */
	EEPROM_ARL_REG=address;
 4a4:	8e bb       	out	0x1e, r24	; 30
	EEPROM_ARH_REG = address>>8;
 4a6:	9f bb       	out	0x1f, r25	; 31
	EEPROM_DR_REG = data;
 4a8:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EEPROM_CR_REG |= (1<<EEMWE);
 4aa:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EEPROM_CR_REG |= (1<<EEWE);
 4ac:	e1 9a       	sbi	0x1c, 1	; 28
}
 4ae:	08 95       	ret

000004b0 <EEPROM_Read>:

u8 EEPROM_Read(u16 address)
{
	/* Wait for completion of previous write */
	while(EEPROM_CR_REG & (1<<EEWE))
 4b0:	e1 99       	sbic	0x1c, 1	; 28
 4b2:	fe cf       	rjmp	.-4      	; 0x4b0 <EEPROM_Read>
			;
	/* Set up address register */
	EEPROM_ARL_REG	=address;
 4b4:	8e bb       	out	0x1e, r24	; 30
	EEPROM_ARH_REG = address>>8;
 4b6:	9f bb       	out	0x1f, r25	; 31
	/* Start eeprom read by writing EERE */
	EEPROM_CR_REG |= (1<<EERE);
 4b8:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEPROM_DR_REG;
 4ba:	8d b3       	in	r24, 0x1d	; 29
}
 4bc:	08 95       	ret

000004be <DIO_SET_PIN>:
//---------------------------------------------------------------------//

#include "Dio.h"

void DIO_SET_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
	switch (port){
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	e9 f0       	breq	.+58     	; 0x4fc <DIO_SET_PIN+0x3e>
 4c2:	81 30       	cpi	r24, 0x01	; 1
 4c4:	28 f0       	brcs	.+10     	; 0x4d0 <DIO_SET_PIN+0x12>
 4c6:	82 30       	cpi	r24, 0x02	; 2
 4c8:	21 f1       	breq	.+72     	; 0x512 <DIO_SET_PIN+0x54>
 4ca:	83 30       	cpi	r24, 0x03	; 3
 4cc:	61 f0       	breq	.+24     	; 0x4e6 <DIO_SET_PIN+0x28>
 4ce:	08 95       	ret
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
 4d0:	2b b3       	in	r18, 0x1b	; 27
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <DIO_SET_PIN+0x1e>
 4d8:	88 0f       	add	r24, r24
 4da:	99 1f       	adc	r25, r25
 4dc:	6a 95       	dec	r22
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <DIO_SET_PIN+0x1a>
 4e0:	28 2b       	or	r18, r24
 4e2:	2b bb       	out	0x1b, r18	; 27
 4e4:	08 95       	ret
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
		break;
	case DIO_PORTD:
		SET_BIT(PORTD_REG,pin);
 4e6:	22 b3       	in	r18, 0x12	; 18
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_SET_PIN+0x34>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_SET_PIN+0x30>
 4f6:	28 2b       	or	r18, r24
 4f8:	22 bb       	out	0x12, r18	; 18
 4fa:	08 95       	ret
	switch (port){
	case DIO_PORTA:
		SET_BIT(PORTA_REG,pin);
		break;
	case DIO_PORTB:
		SET_BIT(PORTB_REG,pin);
 4fc:	28 b3       	in	r18, 0x18	; 24
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_SET_PIN+0x4a>
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_SET_PIN+0x46>
 50c:	28 2b       	or	r18, r24
 50e:	28 bb       	out	0x18, r18	; 24
 510:	08 95       	ret
		break;
	case DIO_PORTC:
		SET_BIT(PORTC_REG,pin);
 512:	25 b3       	in	r18, 0x15	; 21
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 c0       	rjmp	.+4      	; 0x51e <DIO_SET_PIN+0x60>
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	6a 95       	dec	r22
 520:	e2 f7       	brpl	.-8      	; 0x51a <DIO_SET_PIN+0x5c>
 522:	28 2b       	or	r18, r24
 524:	25 bb       	out	0x15, r18	; 21
 526:	08 95       	ret

00000528 <DIO_CLEAR_PIN>:
		break;
	}
}
//--------------------------------------------------------------------------------------------------
void DIO_CLEAR_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
	switch (port){
 528:	81 30       	cpi	r24, 0x01	; 1
 52a:	f9 f0       	breq	.+62     	; 0x56a <DIO_CLEAR_PIN+0x42>
 52c:	81 30       	cpi	r24, 0x01	; 1
 52e:	28 f0       	brcs	.+10     	; 0x53a <DIO_CLEAR_PIN+0x12>
 530:	82 30       	cpi	r24, 0x02	; 2
 532:	39 f1       	breq	.+78     	; 0x582 <DIO_CLEAR_PIN+0x5a>
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	69 f0       	breq	.+26     	; 0x552 <DIO_CLEAR_PIN+0x2a>
 538:	08 95       	ret
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
 53a:	2b b3       	in	r18, 0x1b	; 27
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_CLEAR_PIN+0x1e>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	6a 95       	dec	r22
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_CLEAR_PIN+0x1a>
 54a:	80 95       	com	r24
 54c:	82 23       	and	r24, r18
 54e:	8b bb       	out	0x1b, r24	; 27
 550:	08 95       	ret
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
		break;
	case DIO_PORTD:
		CLR_BIT(PORTD_REG,pin);
 552:	22 b3       	in	r18, 0x12	; 18
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_CLEAR_PIN+0x36>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_CLEAR_PIN+0x32>
 562:	80 95       	com	r24
 564:	82 23       	and	r24, r18
 566:	82 bb       	out	0x12, r24	; 18
 568:	08 95       	ret
	switch (port){
	case DIO_PORTA:
		CLR_BIT(PORTA_REG,pin);
		break;
	case DIO_PORTB:
		CLR_BIT(PORTB_REG,pin);
 56a:	28 b3       	in	r18, 0x18	; 24
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_CLEAR_PIN+0x4e>
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	6a 95       	dec	r22
 578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_CLEAR_PIN+0x4a>
 57a:	80 95       	com	r24
 57c:	82 23       	and	r24, r18
 57e:	88 bb       	out	0x18, r24	; 24
 580:	08 95       	ret
		break;
	case DIO_PORTC:
		CLR_BIT(PORTC_REG,pin);
 582:	25 b3       	in	r18, 0x15	; 21
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_CLEAR_PIN+0x66>
 58a:	88 0f       	add	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	6a 95       	dec	r22
 590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_CLEAR_PIN+0x62>
 592:	80 95       	com	r24
 594:	82 23       	and	r24, r18
 596:	85 bb       	out	0x15, r24	; 21
 598:	08 95       	ret

0000059a <DIO_TOGGLE_PIN>:
		break;
	}
}
//--------------------------------------------------------------------------------------------------
void DIO_TOGGLE_PIN(Port_ID port,Pin_ID pin){  //if Pin configured as an output
	switch (port){
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	e9 f0       	breq	.+58     	; 0x5d8 <DIO_TOGGLE_PIN+0x3e>
 59e:	81 30       	cpi	r24, 0x01	; 1
 5a0:	28 f0       	brcs	.+10     	; 0x5ac <DIO_TOGGLE_PIN+0x12>
 5a2:	82 30       	cpi	r24, 0x02	; 2
 5a4:	21 f1       	breq	.+72     	; 0x5ee <DIO_TOGGLE_PIN+0x54>
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	61 f0       	breq	.+24     	; 0x5c2 <DIO_TOGGLE_PIN+0x28>
 5aa:	08 95       	ret
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
 5ac:	2b b3       	in	r18, 0x1b	; 27
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_TOGGLE_PIN+0x1e>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_TOGGLE_PIN+0x1a>
 5bc:	28 27       	eor	r18, r24
 5be:	2b bb       	out	0x1b, r18	; 27
 5c0:	08 95       	ret
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
		break;
	case DIO_PORTD:
		TOGGLE_BIT(PORTD_REG,pin);
 5c2:	22 b3       	in	r18, 0x12	; 18
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_TOGGLE_PIN+0x34>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_TOGGLE_PIN+0x30>
 5d2:	28 27       	eor	r18, r24
 5d4:	22 bb       	out	0x12, r18	; 18
 5d6:	08 95       	ret
	switch (port){
	case DIO_PORTA:
		TOGGLE_BIT(PORTA_REG,pin);
		break;
	case DIO_PORTB:
		TOGGLE_BIT(PORTB_REG,pin);
 5d8:	28 b3       	in	r18, 0x18	; 24
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_TOGGLE_PIN+0x4a>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_TOGGLE_PIN+0x46>
 5e8:	28 27       	eor	r18, r24
 5ea:	28 bb       	out	0x18, r18	; 24
 5ec:	08 95       	ret
		break;
	case DIO_PORTC:
		TOGGLE_BIT(PORTC_REG,pin);
 5ee:	25 b3       	in	r18, 0x15	; 21
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <DIO_TOGGLE_PIN+0x60>
 5f6:	88 0f       	add	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	6a 95       	dec	r22
 5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <DIO_TOGGLE_PIN+0x5c>
 5fe:	28 27       	eor	r18, r24
 600:	25 bb       	out	0x15, r18	; 21
 602:	08 95       	ret

00000604 <DIO_ENABLE_PULLUP>:
	}
}
//--------------------------------------------------------------------------------------------------
void DIO_ENABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input

	switch (port){
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	91 f1       	breq	.+100    	; 0x66c <DIO_ENABLE_PULLUP+0x68>
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	30 f0       	brcs	.+12     	; 0x618 <DIO_ENABLE_PULLUP+0x14>
 60c:	82 30       	cpi	r24, 0x02	; 2
 60e:	09 f4       	brne	.+2      	; 0x612 <DIO_ENABLE_PULLUP+0xe>
 610:	42 c0       	rjmp	.+132    	; 0x696 <DIO_ENABLE_PULLUP+0x92>
 612:	83 30       	cpi	r24, 0x03	; 3
 614:	b1 f0       	breq	.+44     	; 0x642 <DIO_ENABLE_PULLUP+0x3e>
 616:	08 95       	ret
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
 618:	8a b3       	in	r24, 0x1a	; 26
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	06 2e       	mov	r0, r22
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_ENABLE_PULLUP+0x20>
 620:	95 95       	asr	r25
 622:	87 95       	ror	r24
 624:	0a 94       	dec	r0
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_ENABLE_PULLUP+0x1c>
 628:	80 fd       	sbrc	r24, 0
 62a:	f5 cf       	rjmp	.-22     	; 0x616 <DIO_ENABLE_PULLUP+0x12>
			SET_BIT(PORTA_REG,pin);
 62c:	2b b3       	in	r18, 0x1b	; 27
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	02 c0       	rjmp	.+4      	; 0x638 <DIO_ENABLE_PULLUP+0x34>
 634:	88 0f       	add	r24, r24
 636:	99 1f       	adc	r25, r25
 638:	6a 95       	dec	r22
 63a:	e2 f7       	brpl	.-8      	; 0x634 <DIO_ENABLE_PULLUP+0x30>
 63c:	28 2b       	or	r18, r24
 63e:	2b bb       	out	0x1b, r18	; 27
 640:	08 95       	ret
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
			SET_BIT(PORTC_REG,pin);
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
 642:	81 b3       	in	r24, 0x11	; 17
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	06 2e       	mov	r0, r22
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_ENABLE_PULLUP+0x4a>
 64a:	95 95       	asr	r25
 64c:	87 95       	ror	r24
 64e:	0a 94       	dec	r0
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_ENABLE_PULLUP+0x46>
 652:	80 fd       	sbrc	r24, 0
 654:	e0 cf       	rjmp	.-64     	; 0x616 <DIO_ENABLE_PULLUP+0x12>
			SET_BIT(PORTD_REG,pin);
 656:	22 b3       	in	r18, 0x12	; 18
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_ENABLE_PULLUP+0x5e>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_ENABLE_PULLUP+0x5a>
 666:	28 2b       	or	r18, r24
 668:	22 bb       	out	0x12, r18	; 18
 66a:	08 95       	ret
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
			SET_BIT(PORTA_REG,pin);
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
 66c:	87 b3       	in	r24, 0x17	; 23
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	06 2e       	mov	r0, r22
 672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_ENABLE_PULLUP+0x74>
 674:	95 95       	asr	r25
 676:	87 95       	ror	r24
 678:	0a 94       	dec	r0
 67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_ENABLE_PULLUP+0x70>
 67c:	80 fd       	sbrc	r24, 0
 67e:	cb cf       	rjmp	.-106    	; 0x616 <DIO_ENABLE_PULLUP+0x12>
			SET_BIT(PORTB_REG,pin);
 680:	28 b3       	in	r18, 0x18	; 24
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_ENABLE_PULLUP+0x88>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_ENABLE_PULLUP+0x84>
 690:	28 2b       	or	r18, r24
 692:	28 bb       	out	0x18, r18	; 24
 694:	08 95       	ret
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
 696:	84 b3       	in	r24, 0x14	; 20
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	06 2e       	mov	r0, r22
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_ENABLE_PULLUP+0x9e>
 69e:	95 95       	asr	r25
 6a0:	87 95       	ror	r24
 6a2:	0a 94       	dec	r0
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_ENABLE_PULLUP+0x9a>
 6a6:	80 fd       	sbrc	r24, 0
 6a8:	b6 cf       	rjmp	.-148    	; 0x616 <DIO_ENABLE_PULLUP+0x12>
			SET_BIT(PORTC_REG,pin);
 6aa:	25 b3       	in	r18, 0x15	; 21
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_ENABLE_PULLUP+0xb2>
 6b2:	88 0f       	add	r24, r24
 6b4:	99 1f       	adc	r25, r25
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_ENABLE_PULLUP+0xae>
 6ba:	28 2b       	or	r18, r24
 6bc:	25 bb       	out	0x15, r18	; 21
 6be:	08 95       	ret

000006c0 <DIO_DISABLE_PULLUP>:
	}
}
//--------------------------------------------------------------------------------------------------
void DIO_DISABLE_PULLUP(Port_ID port,Pin_ID pin){  //if Pin configured as an input

	switch (port){
 6c0:	81 30       	cpi	r24, 0x01	; 1
 6c2:	a1 f1       	breq	.+104    	; 0x72c <DIO_DISABLE_PULLUP+0x6c>
 6c4:	81 30       	cpi	r24, 0x01	; 1
 6c6:	30 f0       	brcs	.+12     	; 0x6d4 <DIO_DISABLE_PULLUP+0x14>
 6c8:	82 30       	cpi	r24, 0x02	; 2
 6ca:	09 f4       	brne	.+2      	; 0x6ce <DIO_DISABLE_PULLUP+0xe>
 6cc:	45 c0       	rjmp	.+138    	; 0x758 <DIO_DISABLE_PULLUP+0x98>
 6ce:	83 30       	cpi	r24, 0x03	; 3
 6d0:	b9 f0       	breq	.+46     	; 0x700 <DIO_DISABLE_PULLUP+0x40>
 6d2:	08 95       	ret
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
 6d4:	8a b3       	in	r24, 0x1a	; 26
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	06 2e       	mov	r0, r22
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <DIO_DISABLE_PULLUP+0x20>
 6dc:	95 95       	asr	r25
 6de:	87 95       	ror	r24
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <DIO_DISABLE_PULLUP+0x1c>
 6e4:	80 fd       	sbrc	r24, 0
 6e6:	f5 cf       	rjmp	.-22     	; 0x6d2 <DIO_DISABLE_PULLUP+0x12>
			CLR_BIT(PORTA_REG,pin);
 6e8:	2b b3       	in	r18, 0x1b	; 27
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_DISABLE_PULLUP+0x34>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_DISABLE_PULLUP+0x30>
 6f8:	80 95       	com	r24
 6fa:	82 23       	and	r24, r18
 6fc:	8b bb       	out	0x1b, r24	; 27
 6fe:	08 95       	ret
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
			CLR_BIT(PORTC_REG,pin);
		break;
	case DIO_PORTD:
		if(CHK_BIT(DDRD_REG,pin)==0)
 700:	81 b3       	in	r24, 0x11	; 17
 702:	90 e0       	ldi	r25, 0x00	; 0
 704:	06 2e       	mov	r0, r22
 706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_DISABLE_PULLUP+0x4c>
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	0a 94       	dec	r0
 70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_DISABLE_PULLUP+0x48>
 710:	80 fd       	sbrc	r24, 0
 712:	df cf       	rjmp	.-66     	; 0x6d2 <DIO_DISABLE_PULLUP+0x12>
			CLR_BIT(PORTD_REG,pin);
 714:	22 b3       	in	r18, 0x12	; 18
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_DISABLE_PULLUP+0x60>
 71c:	88 0f       	add	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	6a 95       	dec	r22
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_DISABLE_PULLUP+0x5c>
 724:	80 95       	com	r24
 726:	82 23       	and	r24, r18
 728:	82 bb       	out	0x12, r24	; 18
 72a:	08 95       	ret
	case DIO_PORTA:
		if(CHK_BIT(DDRA_REG,pin)==0)
			CLR_BIT(PORTA_REG,pin);
		break;
	case DIO_PORTB:
		if(CHK_BIT(DDRB_REG,pin)==0)
 72c:	87 b3       	in	r24, 0x17	; 23
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	06 2e       	mov	r0, r22
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_DISABLE_PULLUP+0x78>
 734:	95 95       	asr	r25
 736:	87 95       	ror	r24
 738:	0a 94       	dec	r0
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_DISABLE_PULLUP+0x74>
 73c:	80 fd       	sbrc	r24, 0
 73e:	c9 cf       	rjmp	.-110    	; 0x6d2 <DIO_DISABLE_PULLUP+0x12>
			CLR_BIT(PORTB_REG,pin);
 740:	28 b3       	in	r18, 0x18	; 24
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	02 c0       	rjmp	.+4      	; 0x74c <DIO_DISABLE_PULLUP+0x8c>
 748:	88 0f       	add	r24, r24
 74a:	99 1f       	adc	r25, r25
 74c:	6a 95       	dec	r22
 74e:	e2 f7       	brpl	.-8      	; 0x748 <DIO_DISABLE_PULLUP+0x88>
 750:	80 95       	com	r24
 752:	82 23       	and	r24, r18
 754:	88 bb       	out	0x18, r24	; 24
 756:	08 95       	ret
		break;
	case DIO_PORTC:
		if(CHK_BIT(DDRC_REG,pin)==0)
 758:	84 b3       	in	r24, 0x14	; 20
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	06 2e       	mov	r0, r22
 75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_DISABLE_PULLUP+0xa4>
 760:	95 95       	asr	r25
 762:	87 95       	ror	r24
 764:	0a 94       	dec	r0
 766:	e2 f7       	brpl	.-8      	; 0x760 <DIO_DISABLE_PULLUP+0xa0>
 768:	80 fd       	sbrc	r24, 0
 76a:	b3 cf       	rjmp	.-154    	; 0x6d2 <DIO_DISABLE_PULLUP+0x12>
			CLR_BIT(PORTC_REG,pin);
 76c:	25 b3       	in	r18, 0x15	; 21
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_DISABLE_PULLUP+0xb8>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_DISABLE_PULLUP+0xb4>
 77c:	80 95       	com	r24
 77e:	82 23       	and	r24, r18
 780:	85 bb       	out	0x15, r24	; 21
 782:	08 95       	ret

00000784 <DIO_READ_LEVEL>:
	}
}
//--------------------------------------------------------------------------------------------------
Logic_Level DIO_READ_LEVEL(Port_ID port,Pin_ID pin){  //to read pin level if Pin configured as an input

	switch (port){
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	d1 f0       	breq	.+52     	; 0x7bc <DIO_READ_LEVEL+0x38>
 788:	81 30       	cpi	r24, 0x01	; 1
 78a:	30 f0       	brcs	.+12     	; 0x798 <DIO_READ_LEVEL+0x14>
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	f9 f0       	breq	.+62     	; 0x7ce <DIO_READ_LEVEL+0x4a>
 790:	83 30       	cpi	r24, 0x03	; 3
 792:	59 f0       	breq	.+22     	; 0x7aa <DIO_READ_LEVEL+0x26>
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	08 95       	ret
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
 798:	89 b3       	in	r24, 0x19	; 25
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_READ_LEVEL+0x1e>
 79e:	95 95       	asr	r25
 7a0:	87 95       	ror	r24
 7a2:	6a 95       	dec	r22
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_READ_LEVEL+0x1a>
 7a6:	81 70       	andi	r24, 0x01	; 1
 7a8:	08 95       	ret
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
		break;
	case DIO_PORTD:
		return CHK_BIT(PIND_REG,pin);
 7aa:	80 b3       	in	r24, 0x10	; 16
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_READ_LEVEL+0x30>
 7b0:	95 95       	asr	r25
 7b2:	87 95       	ror	r24
 7b4:	6a 95       	dec	r22
 7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_READ_LEVEL+0x2c>
 7b8:	81 70       	andi	r24, 0x01	; 1
		break;
	}
	return 0;
}
 7ba:	08 95       	ret
	switch (port){
	case DIO_PORTA:
		return CHK_BIT(PINA_REG,pin);
		break;
	case DIO_PORTB:
		return CHK_BIT(PINB_REG,pin);
 7bc:	86 b3       	in	r24, 0x16	; 22
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_READ_LEVEL+0x42>
 7c2:	95 95       	asr	r25
 7c4:	87 95       	ror	r24
 7c6:	6a 95       	dec	r22
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_READ_LEVEL+0x3e>
 7ca:	81 70       	andi	r24, 0x01	; 1
 7cc:	08 95       	ret
		break;
	case DIO_PORTC:
		return CHK_BIT(PINC_REG,pin);
 7ce:	83 b3       	in	r24, 0x13	; 19
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_READ_LEVEL+0x54>
 7d4:	95 95       	asr	r25
 7d6:	87 95       	ror	r24
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_READ_LEVEL+0x50>
 7dc:	81 70       	andi	r24, 0x01	; 1
 7de:	08 95       	ret

000007e0 <DIO_WRITE_STATUS>:
	}
	return 0;
}
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
	switch (port){
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	29 f1       	breq	.+74     	; 0x82e <DIO_WRITE_STATUS+0x4e>
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	28 f0       	brcs	.+10     	; 0x7f2 <DIO_WRITE_STATUS+0x12>
 7e8:	82 30       	cpi	r24, 0x02	; 2
 7ea:	79 f1       	breq	.+94     	; 0x84a <DIO_WRITE_STATUS+0x6a>
 7ec:	83 30       	cpi	r24, 0x03	; 3
 7ee:	81 f0       	breq	.+32     	; 0x810 <DIO_WRITE_STATUS+0x30>
 7f0:	08 95       	ret
	case DIO_PORTA:
		if (direction==OUTPUT)
 7f2:	41 30       	cpi	r20, 0x01	; 1
 7f4:	09 f4       	brne	.+2      	; 0x7f8 <DIO_WRITE_STATUS+0x18>
 7f6:	4d c0       	rjmp	.+154    	; 0x892 <__stack+0x33>
			SET_BIT(DDRA_REG,pin);
		else
			CLR_BIT(DDRA_REG,pin);
 7f8:	2a b3       	in	r18, 0x1a	; 26
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_WRITE_STATUS+0x24>
 800:	88 0f       	add	r24, r24
 802:	99 1f       	adc	r25, r25
 804:	6a 95       	dec	r22
 806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_WRITE_STATUS+0x20>
 808:	80 95       	com	r24
 80a:	82 23       	and	r24, r18
 80c:	8a bb       	out	0x1a, r24	; 26
 80e:	08 95       	ret
			SET_BIT(DDRC_REG,pin);
		else
			CLR_BIT(DDRC_REG,pin);
		break;
	case DIO_PORTD:
		if (direction==OUTPUT)
 810:	41 30       	cpi	r20, 0x01	; 1
 812:	09 f4       	brne	.+2      	; 0x816 <DIO_WRITE_STATUS+0x36>
 814:	49 c0       	rjmp	.+146    	; 0x8a8 <__stack+0x49>
			SET_BIT(DDRD_REG,pin);
		else
			CLR_BIT(DDRD_REG,pin);
 816:	21 b3       	in	r18, 0x11	; 17
 818:	81 e0       	ldi	r24, 0x01	; 1
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <DIO_WRITE_STATUS+0x42>
 81e:	88 0f       	add	r24, r24
 820:	99 1f       	adc	r25, r25
 822:	6a 95       	dec	r22
 824:	e2 f7       	brpl	.-8      	; 0x81e <DIO_WRITE_STATUS+0x3e>
 826:	80 95       	com	r24
 828:	82 23       	and	r24, r18
 82a:	81 bb       	out	0x11, r24	; 17
 82c:	08 95       	ret
			SET_BIT(DDRA_REG,pin);
		else
			CLR_BIT(DDRA_REG,pin);
		break;
	case DIO_PORTB:
		if (direction==OUTPUT)
 82e:	41 30       	cpi	r20, 0x01	; 1
 830:	29 f1       	breq	.+74     	; 0x87c <__stack+0x1d>
			SET_BIT(DDRB_REG,pin);
		else
			CLR_BIT(DDRB_REG,pin);
 832:	27 b3       	in	r18, 0x17	; 23
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	02 c0       	rjmp	.+4      	; 0x83e <DIO_WRITE_STATUS+0x5e>
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	6a 95       	dec	r22
 840:	e2 f7       	brpl	.-8      	; 0x83a <DIO_WRITE_STATUS+0x5a>
 842:	80 95       	com	r24
 844:	82 23       	and	r24, r18
 846:	87 bb       	out	0x17, r24	; 23
 848:	08 95       	ret
		break;
	case DIO_PORTC:
		if (direction==OUTPUT)
 84a:	41 30       	cpi	r20, 0x01	; 1
 84c:	61 f0       	breq	.+24     	; 0x866 <__stack+0x7>
			SET_BIT(DDRC_REG,pin);
		else
			CLR_BIT(DDRC_REG,pin);
 84e:	24 b3       	in	r18, 0x14	; 20
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_WRITE_STATUS+0x7a>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	6a 95       	dec	r22
 85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_WRITE_STATUS+0x76>
 85e:	80 95       	com	r24
 860:	82 23       	and	r24, r18
 862:	84 bb       	out	0x14, r24	; 20
 864:	08 95       	ret
		else
			CLR_BIT(DDRB_REG,pin);
		break;
	case DIO_PORTC:
		if (direction==OUTPUT)
			SET_BIT(DDRC_REG,pin);
 866:	24 b3       	in	r18, 0x14	; 20
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	6a 95       	dec	r22
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	28 2b       	or	r18, r24
 878:	24 bb       	out	0x14, r18	; 20
 87a:	08 95       	ret
		else
			CLR_BIT(DDRA_REG,pin);
		break;
	case DIO_PORTB:
		if (direction==OUTPUT)
			SET_BIT(DDRB_REG,pin);
 87c:	27 b3       	in	r18, 0x17	; 23
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	6a 95       	dec	r22
 88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
 88c:	28 2b       	or	r18, r24
 88e:	27 bb       	out	0x17, r18	; 23
 890:	08 95       	ret
//--------------------------------------------------------------------------------------------------
void DIO_WRITE_STATUS(Port_ID port,Pin_ID pin,Pin_Status direction){  //to write pin direction
	switch (port){
	case DIO_PORTA:
		if (direction==OUTPUT)
			SET_BIT(DDRA_REG,pin);
 892:	2a b3       	in	r18, 0x1a	; 26
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
 89a:	88 0f       	add	r24, r24
 89c:	99 1f       	adc	r25, r25
 89e:	6a 95       	dec	r22
 8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
 8a2:	28 2b       	or	r18, r24
 8a4:	2a bb       	out	0x1a, r18	; 26
 8a6:	08 95       	ret
		else
			CLR_BIT(DDRC_REG,pin);
		break;
	case DIO_PORTD:
		if (direction==OUTPUT)
			SET_BIT(DDRD_REG,pin);
 8a8:	21 b3       	in	r18, 0x11	; 17
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
 8b0:	88 0f       	add	r24, r24
 8b2:	99 1f       	adc	r25, r25
 8b4:	6a 95       	dec	r22
 8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
 8b8:	28 2b       	or	r18, r24
 8ba:	21 bb       	out	0x11, r18	; 17
 8bc:	08 95       	ret

000008be <Dio_WriteGroup>:
	}
}
//--------------------------------------------------------------------------------------------------
void Dio_WriteGroup(Port_ID port,u8 mask,u8 data)
{
	switch(port)
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	a9 f0       	breq	.+42     	; 0x8ec <Dio_WriteGroup+0x2e>
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	28 f0       	brcs	.+10     	; 0x8d0 <Dio_WriteGroup+0x12>
 8c6:	82 30       	cpi	r24, 0x02	; 2
 8c8:	c1 f0       	breq	.+48     	; 0x8fa <Dio_WriteGroup+0x3c>
 8ca:	83 30       	cpi	r24, 0x03	; 3
 8cc:	41 f0       	breq	.+16     	; 0x8de <Dio_WriteGroup+0x20>
 8ce:	08 95       	ret
	{
	case DIO_PORTA:
		PORTA_REG = (PORTA_REG&~mask)|(data & mask);
 8d0:	8b b3       	in	r24, 0x1b	; 27
 8d2:	46 23       	and	r20, r22
 8d4:	60 95       	com	r22
 8d6:	86 23       	and	r24, r22
 8d8:	84 2b       	or	r24, r20
 8da:	8b bb       	out	0x1b, r24	; 27
 8dc:	08 95       	ret
	case DIO_PORTC:
		PORTC_REG = (PORTC_REG&~mask)|(data & mask);
		break;

	case DIO_PORTD:
		PORTD_REG = (PORTD_REG&~mask)|(data & mask);
 8de:	82 b3       	in	r24, 0x12	; 18
 8e0:	46 23       	and	r20, r22
 8e2:	60 95       	com	r22
 8e4:	86 23       	and	r24, r22
 8e6:	84 2b       	or	r24, r20
 8e8:	82 bb       	out	0x12, r24	; 18
 8ea:	08 95       	ret
	case DIO_PORTA:
		PORTA_REG = (PORTA_REG&~mask)|(data & mask);
		break;

	case DIO_PORTB:
		PORTB_REG = (PORTB_REG&~mask)|(data & mask);
 8ec:	88 b3       	in	r24, 0x18	; 24
 8ee:	46 23       	and	r20, r22
 8f0:	60 95       	com	r22
 8f2:	86 23       	and	r24, r22
 8f4:	84 2b       	or	r24, r20
 8f6:	88 bb       	out	0x18, r24	; 24
 8f8:	08 95       	ret
		break;

	case DIO_PORTC:
		PORTC_REG = (PORTC_REG&~mask)|(data & mask);
 8fa:	85 b3       	in	r24, 0x15	; 21
 8fc:	46 23       	and	r20, r22
 8fe:	60 95       	com	r22
 900:	86 23       	and	r24, r22
 902:	84 2b       	or	r24, r20
 904:	85 bb       	out	0x15, r24	; 21
 906:	08 95       	ret

00000908 <SSD_Stop>:
	}
}
//--------------------------------------------------------------------------------------------------
void SSD_Stop(){
	/*	Disable SSD1	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	62 e0       	ldi	r22, 0x02	; 2
 90c:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
	/*	Disable SSD2	*/
	DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	61 e0       	ldi	r22, 0x01	; 1
 914:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
}
 918:	08 95       	ret

0000091a <SSD_DisplayNumber>:
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN1,OUTPUT);
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN2,OUTPUT);
}
//--------------------------------------------------------------------------------------------------
void SSD_DisplayNumber(u8 num)
{
 91a:	1f 93       	push	r17
 91c:	18 2f       	mov	r17, r24
	u8 loc_FirstDigit = (num/10)<<4;
	u8 loc_Second_Digit = (num%10)<<4;

	if(Counter < (((2^8)-1)/2)){
 91e:	80 91 6f 00 	lds	r24, 0x006F
 922:	84 30       	cpi	r24, 0x04	; 4
 924:	f0 f4       	brcc	.+60     	; 0x962 <SSD_DisplayNumber+0x48>
		/*	Enable SSD1	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN2);
 926:	81 e0       	ldi	r24, 0x01	; 1
 928:	62 e0       	ldi	r22, 0x02	; 2
 92a:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_SET_PIN>
		/*	Disable SSD2	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	61 e0       	ldi	r22, 0x01	; 1
 932:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
 936:	81 2f       	mov	r24, r17
 938:	6a e0       	ldi	r22, 0x0A	; 10
 93a:	0e 94 54 06 	call	0xca8	; 0xca8 <__udivmodqi4>
 93e:	48 2f       	mov	r20, r24
 940:	42 95       	swap	r20
 942:	40 7f       	andi	r20, 0xF0	; 240
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	60 ef       	ldi	r22, 0xF0	; 240
 948:	0e 94 5f 04 	call	0x8be	; 0x8be <Dio_WriteGroup>
		/*	Enable SSD2	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN1);
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
	}
	Counter++;
 94c:	80 91 6f 00 	lds	r24, 0x006F
 950:	8f 5f       	subi	r24, 0xFF	; 255
 952:	80 93 6f 00 	sts	0x006F, r24
	if(Counter==((2^8)-1)){
 956:	89 30       	cpi	r24, 0x09	; 9
 958:	11 f4       	brne	.+4      	; 0x95e <SSD_DisplayNumber+0x44>
		Counter = 0;
 95a:	10 92 6f 00 	sts	0x006F, r1
	}
}
 95e:	1f 91       	pop	r17
 960:	08 95       	ret
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN1);
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_FirstDigit);
	}else{
		/*	Disable SSD1	*/
		DIO_CLEAR_PIN(DIO_PORTB, DIO_PIN2);
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	62 e0       	ldi	r22, 0x02	; 2
 966:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
		/*	Enable SSD2	*/
		DIO_SET_PIN(DIO_PORTB, DIO_PIN1);
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	61 e0       	ldi	r22, 0x01	; 1
 96e:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_SET_PIN>
		/*	Write Number To SSD	*/
		Dio_WriteGroup(DIO_PORTA,SSD_MASK,loc_Second_Digit);
 972:	81 2f       	mov	r24, r17
 974:	6a e0       	ldi	r22, 0x0A	; 10
 976:	0e 94 54 06 	call	0xca8	; 0xca8 <__udivmodqi4>
 97a:	92 95       	swap	r25
 97c:	90 7f       	andi	r25, 0xF0	; 240
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	60 ef       	ldi	r22, 0xF0	; 240
 982:	49 2f       	mov	r20, r25
 984:	0e 94 5f 04 	call	0x8be	; 0x8be <Dio_WriteGroup>
 988:	e1 cf       	rjmp	.-62     	; 0x94c <SSD_DisplayNumber+0x32>

0000098a <SSD_Init>:
static u8 Counter =0;

void SSD_Init(void)
{
	/*	Configure Data Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN4,OUTPUT);
 98a:	80 e0       	ldi	r24, 0x00	; 0
 98c:	64 e0       	ldi	r22, 0x04	; 4
 98e:	41 e0       	ldi	r20, 0x01	; 1
 990:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN5,OUTPUT);
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	65 e0       	ldi	r22, 0x05	; 5
 998:	41 e0       	ldi	r20, 0x01	; 1
 99a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN6,OUTPUT);
 99e:	80 e0       	ldi	r24, 0x00	; 0
 9a0:	66 e0       	ldi	r22, 0x06	; 6
 9a2:	41 e0       	ldi	r20, 0x01	; 1
 9a4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTA,DIO_PIN7,OUTPUT);
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	67 e0       	ldi	r22, 0x07	; 7
 9ac:	41 e0       	ldi	r20, 0x01	; 1
 9ae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>

	/*	Configure Control Lines As Output	*/
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN1,OUTPUT);
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	61 e0       	ldi	r22, 0x01	; 1
 9b6:	41 e0       	ldi	r20, 0x01	; 1
 9b8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
	DIO_WRITE_STATUS(DIO_PORTB,DIO_PIN2,OUTPUT);
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	62 e0       	ldi	r22, 0x02	; 2
 9c0:	41 e0       	ldi	r20, 0x01	; 1
 9c2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
}
 9c6:	08 95       	ret

000009c8 <LED_TOGGLE>:
void LED_OFF(void){
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
}

void LED_TOGGLE(void){
    DIO_TOGGLE_PIN(LED1_PORT, LED1_PIN);
 9c8:	82 e0       	ldi	r24, 0x02	; 2
 9ca:	67 e0       	ldi	r22, 0x07	; 7
 9cc:	0e 94 cd 02 	call	0x59a	; 0x59a <DIO_TOGGLE_PIN>
}
 9d0:	08 95       	ret

000009d2 <LED_OFF>:
void LED_ON(void){
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
}

void LED_OFF(void){
	DIO_CLEAR_PIN(LED1_PORT, LED1_PIN);
 9d2:	82 e0       	ldi	r24, 0x02	; 2
 9d4:	67 e0       	ldi	r22, 0x07	; 7
 9d6:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
}
 9da:	08 95       	ret

000009dc <LED_ON>:
void LED_Init(void){
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OUTPUT);
}

void LED_ON(void){
	DIO_SET_PIN(LED1_PORT, LED1_PIN);
 9dc:	82 e0       	ldi	r24, 0x02	; 2
 9de:	67 e0       	ldi	r22, 0x07	; 7
 9e0:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_SET_PIN>
}
 9e4:	08 95       	ret

000009e6 <LED_Init>:
#include "LED.h"

void LED_Init(void){
    DIO_WRITE_STATUS(LED1_PORT, LED1_PIN, OUTPUT);
 9e6:	82 e0       	ldi	r24, 0x02	; 2
 9e8:	67 e0       	ldi	r22, 0x07	; 7
 9ea:	41 e0       	ldi	r20, 0x01	; 1
 9ec:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
}
 9f0:	08 95       	ret

000009f2 <Heater_OFF>:

void Heater_ON(){
	DIO_SET_PIN(Heater_Port, Heater_Pin);
}
void Heater_OFF(){
	DIO_CLEAR_PIN(Heater_Port, Heater_Pin);
 9f2:	82 e0       	ldi	r24, 0x02	; 2
 9f4:	63 e0       	ldi	r22, 0x03	; 3
 9f6:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
	LED_OFF();
 9fa:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LED_OFF>
}
 9fe:	08 95       	ret

00000a00 <Heater_ON>:
void Heater_Init(){
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OUTPUT);
}

void Heater_ON(){
	DIO_SET_PIN(Heater_Port, Heater_Pin);
 a00:	82 e0       	ldi	r24, 0x02	; 2
 a02:	63 e0       	ldi	r22, 0x03	; 3
 a04:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_SET_PIN>
}
 a08:	08 95       	ret

00000a0a <Heater_Init>:
//---------------------------------------------------------------------//

#include "Heater.h"

void Heater_Init(){
	DIO_WRITE_STATUS(Heater_Port, Heater_Pin, OUTPUT);
 a0a:	82 e0       	ldi	r24, 0x02	; 2
 a0c:	63 e0       	ldi	r22, 0x03	; 3
 a0e:	41 e0       	ldi	r20, 0x01	; 1
 a10:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
}
 a14:	08 95       	ret

00000a16 <Cooler_OFF>:
void Cooler_ON(){
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
	LED_ON();
}
void Cooler_OFF(){
	DIO_CLEAR_PIN(Cooler_Port, Cooler_Pin);
 a16:	82 e0       	ldi	r24, 0x02	; 2
 a18:	64 e0       	ldi	r22, 0x04	; 4
 a1a:	0e 94 94 02 	call	0x528	; 0x528 <DIO_CLEAR_PIN>
	LED_OFF();
 a1e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LED_OFF>
}
 a22:	08 95       	ret

00000a24 <Cooler_ON>:

void Cooler_Init(){
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OUTPUT);
}
void Cooler_ON(){
	DIO_SET_PIN(Cooler_Port, Cooler_Pin);
 a24:	82 e0       	ldi	r24, 0x02	; 2
 a26:	64 e0       	ldi	r22, 0x04	; 4
 a28:	0e 94 5f 02 	call	0x4be	; 0x4be <DIO_SET_PIN>
	LED_ON();
 a2c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LED_ON>
}
 a30:	08 95       	ret

00000a32 <Cooler_Init>:
//---------------------------------------------------------------------//

#include "Cooler.h"

void Cooler_Init(){
	DIO_WRITE_STATUS(Cooler_Port, Cooler_Pin, OUTPUT);
 a32:	82 e0       	ldi	r24, 0x02	; 2
 a34:	64 e0       	ldi	r22, 0x04	; 4
 a36:	41 e0       	ldi	r20, 0x01	; 1
 a38:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
}
 a3c:	08 95       	ret

00000a3e <Button_Pullup_Disable>:
				break;
		}
}
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
	switch(Button){
 a3e:	81 30       	cpi	r24, 0x01	; 1
 a40:	79 f0       	breq	.+30     	; 0xa60 <Button_Pullup_Disable+0x22>
 a42:	81 30       	cpi	r24, 0x01	; 1
 a44:	28 f4       	brcc	.+10     	; 0xa50 <Button_Pullup_Disable+0x12>
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	60 e0       	ldi	r22, 0x00	; 0
 a4a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_DISABLE_PULLUP>
 a4e:	08 95       	ret
				break;
		}
}
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Disable(Button_ID Button){
	switch(Button){
 a50:	82 30       	cpi	r24, 0x02	; 2
 a52:	09 f0       	breq	.+2      	; 0xa56 <Button_Pullup_Disable+0x18>
 a54:	08 95       	ret
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
				break;
		case(BUTTON2):
				DIO_DISABLE_PULLUP(Button2_PORT, Button2_PIN);
 a56:	83 e0       	ldi	r24, 0x03	; 3
 a58:	62 e0       	ldi	r22, 0x02	; 2
 a5a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_DISABLE_PULLUP>
 a5e:	08 95       	ret
	switch(Button){
		case(BUTTON0):
				DIO_DISABLE_PULLUP(Button0_PORT, Button0_PIN);
				break;
		case(BUTTON1):
				DIO_DISABLE_PULLUP(Button1_PORT, Button1_PIN);
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	64 e0       	ldi	r22, 0x04	; 4
 a64:	0e 94 60 03 	call	0x6c0	; 0x6c0 <DIO_DISABLE_PULLUP>
 a68:	08 95       	ret

00000a6a <Button_Pullup_Enable>:
		}
	return result;
}
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
	switch(Button){
 a6a:	81 30       	cpi	r24, 0x01	; 1
 a6c:	79 f0       	breq	.+30     	; 0xa8c <Button_Pullup_Enable+0x22>
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	28 f4       	brcc	.+10     	; 0xa7c <Button_Pullup_Enable+0x12>
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
 a72:	81 e0       	ldi	r24, 0x01	; 1
 a74:	60 e0       	ldi	r22, 0x00	; 0
 a76:	0e 94 02 03 	call	0x604	; 0x604 <DIO_ENABLE_PULLUP>
 a7a:	08 95       	ret
		}
	return result;
}
//--------------------------------------------------------------------------------------------------
void Button_Pullup_Enable(Button_ID Button){
	switch(Button){
 a7c:	82 30       	cpi	r24, 0x02	; 2
 a7e:	09 f0       	breq	.+2      	; 0xa82 <Button_Pullup_Enable+0x18>
 a80:	08 95       	ret
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
				break;
		case(BUTTON2):
				DIO_ENABLE_PULLUP(Button2_PORT, Button2_PIN);
 a82:	83 e0       	ldi	r24, 0x03	; 3
 a84:	62 e0       	ldi	r22, 0x02	; 2
 a86:	0e 94 02 03 	call	0x604	; 0x604 <DIO_ENABLE_PULLUP>
 a8a:	08 95       	ret
	switch(Button){
		case(BUTTON0):
				DIO_ENABLE_PULLUP(Button0_PORT, Button0_PIN);
				break;
		case(BUTTON1):
				DIO_ENABLE_PULLUP(Button1_PORT, Button1_PIN);
 a8c:	81 e0       	ldi	r24, 0x01	; 1
 a8e:	64 e0       	ldi	r22, 0x04	; 4
 a90:	0e 94 02 03 	call	0x604	; 0x604 <DIO_ENABLE_PULLUP>
 a94:	08 95       	ret

00000a96 <Button_READ>:
		}
}
//--------------------------------------------------------------------------------------------------
Buttom_Status Button_READ(Button_ID Button){
	Buttom_Status result = 0;
	switch(Button){
 a96:	81 30       	cpi	r24, 0x01	; 1
 a98:	59 f0       	breq	.+22     	; 0xab0 <Button_READ+0x1a>
 a9a:	81 30       	cpi	r24, 0x01	; 1
 a9c:	20 f0       	brcs	.+8      	; 0xaa6 <Button_READ+0x10>
 a9e:	82 30       	cpi	r24, 0x02	; 2
 aa0:	61 f0       	breq	.+24     	; 0xaba <Button_READ+0x24>
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	08 95       	ret
		case(BUTTON0):
				result = DIO_READ_LEVEL(Button0_PORT, Button0_PIN);
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	60 e0       	ldi	r22, 0x00	; 0
 aaa:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_READ_LEVEL>
 aae:	08 95       	ret
				break;
		case(BUTTON1):
				result = DIO_READ_LEVEL(Button1_PORT, Button1_PIN);
 ab0:	81 e0       	ldi	r24, 0x01	; 1
 ab2:	64 e0       	ldi	r22, 0x04	; 4
 ab4:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_READ_LEVEL>
 ab8:	08 95       	ret
				break;
		case(BUTTON2):
				result = DIO_READ_LEVEL(Button2_PORT, Button2_PIN);
 aba:	83 e0       	ldi	r24, 0x03	; 3
 abc:	62 e0       	ldi	r22, 0x02	; 2
 abe:	0e 94 c2 03 	call	0x784	; 0x784 <DIO_READ_LEVEL>
				break;
		}
	return result;
}
 ac2:	08 95       	ret

00000ac4 <Button_Init>:
//---------------------------------------------------------------------//

#include "Button.h"

void Button_Init(Button_ID Button){
	switch(Button){
 ac4:	81 30       	cpi	r24, 0x01	; 1
 ac6:	89 f0       	breq	.+34     	; 0xaea <Button_Init+0x26>
 ac8:	81 30       	cpi	r24, 0x01	; 1
 aca:	30 f4       	brcc	.+12     	; 0xad8 <Button_Init+0x14>
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
 acc:	81 e0       	ldi	r24, 0x01	; 1
 ace:	60 e0       	ldi	r22, 0x00	; 0
 ad0:	40 e0       	ldi	r20, 0x00	; 0
 ad2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
 ad6:	08 95       	ret
//---------------------------------------------------------------------//

#include "Button.h"

void Button_Init(Button_ID Button){
	switch(Button){
 ad8:	82 30       	cpi	r24, 0x02	; 2
 ada:	09 f0       	breq	.+2      	; 0xade <Button_Init+0x1a>
 adc:	08 95       	ret
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
				break;
		case(BUTTON2):
				DIO_WRITE_STATUS(Button2_PORT, Button2_PIN, INPUT);
 ade:	83 e0       	ldi	r24, 0x03	; 3
 ae0:	62 e0       	ldi	r22, 0x02	; 2
 ae2:	40 e0       	ldi	r20, 0x00	; 0
 ae4:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
 ae8:	08 95       	ret
	switch(Button){
		case(BUTTON0):
				DIO_WRITE_STATUS(Button0_PORT, Button0_PIN, INPUT);
				break;
		case(BUTTON1):
				DIO_WRITE_STATUS(Button1_PORT, Button1_PIN, INPUT);
 aea:	81 e0       	ldi	r24, 0x01	; 1
 aec:	64 e0       	ldi	r22, 0x04	; 4
 aee:	40 e0       	ldi	r20, 0x00	; 0
 af0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <DIO_WRITE_STATUS>
 af4:	08 95       	ret

00000af6 <main>:
#include "HAL.h"
#include "Lib.h"
#include "Main_Types.h"
#include "Services.h"

int main (){
 af6:	0f 93       	push	r16
 af8:	1f 93       	push	r17
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Modules Initialization---------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Timer0_Init();
 afa:	0e 94 02 02 	call	0x404	; 0x404 <Timer0_Init>
	Timer1_Init();
 afe:	0e 94 b5 01 	call	0x36a	; 0x36a <Timer1_Init>
	Timer2_Init();
 b02:	0e 94 6f 01 	call	0x2de	; 0x2de <Timer2_Init>
	Heater_Init();
 b06:	0e 94 05 05 	call	0xa0a	; 0xa0a <Heater_Init>
	Cooler_Init();
 b0a:	0e 94 19 05 	call	0xa32	; 0xa32 <Cooler_Init>
	SSD_Init();
 b0e:	0e 94 c5 04 	call	0x98a	; 0x98a <SSD_Init>
	Button_Init(BUTTON0);
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	0e 94 62 05 	call	0xac4	; 0xac4 <Button_Init>
	Button_Init(BUTTON1);
 b18:	81 e0       	ldi	r24, 0x01	; 1
 b1a:	0e 94 62 05 	call	0xac4	; 0xac4 <Button_Init>
	Button_Init(BUTTON2);
 b1e:	82 e0       	ldi	r24, 0x02	; 2
 b20:	0e 94 62 05 	call	0xac4	; 0xac4 <Button_Init>
	LED_Init();
 b24:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <LED_Init>
	/*--------------------------------------------------------------------------------------------------------------*/
	/*------------------------------------------System Status Initialization----------------------------------------*/
	/*--------------------------------------------------------------------------------------------------------------*/
	Switch SystemStatus = OFF;
	ButtonEnable = TRUE;
 b28:	11 e0       	ldi	r17, 0x01	; 1
 b2a:	10 93 75 00 	sts	0x0075, r17
	Mode = Temp_Control;
 b2e:	10 92 74 00 	sts	0x0074, r1
	Curr_Temp = 0;
 b32:	10 92 71 00 	sts	0x0071, r1
	Restore_Temp();
 b36:	0e 94 a6 00 	call	0x14c	; 0x14c <Restore_Temp>
	Update_Temp_En = TRUE;
 b3a:	10 93 72 00 	sts	0x0072, r17
	Blink_Status = FALSE;
 b3e:	10 92 70 00 	sts	0x0070, r1
	Timer2_Start(TIMER2_1024_);
 b42:	87 e0       	ldi	r24, 0x07	; 7
 b44:	0e 94 76 01 	call	0x2ec	; 0x2ec <Timer2_Start>
	Timer2_EnableInterrupt();
 b48:	0e 94 aa 01 	call	0x354	; 0x354 <Timer2_EnableInterrupt>
	Enable_Gl_Int();
 b4c:	0e 94 48 02 	call	0x490	; 0x490 <Enable_Gl_Int>
	UART_Init(UART_BAUDRATE_9600);
 b50:	87 e6       	ldi	r24, 0x67	; 103
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	0e 94 2f 01 	call	0x25e	; 0x25e <UART_Init>
 b58:	00 e0       	ldi	r16, 0x00	; 0
		SSD_DisplayNumber(54);*/


		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	0e 94 4b 05 	call	0xa96	; 0xa96 <Button_READ>
 b60:	88 23       	and	r24, r24
 b62:	39 f0       	breq	.+14     	; 0xb72 <main+0x7c>
			if(ButtonEnable == TRUE){
 b64:	80 91 75 00 	lds	r24, 0x0075
 b68:	81 30       	cpi	r24, 0x01	; 1
 b6a:	09 f4       	brne	.+2      	; 0xb6e <main+0x78>
 b6c:	4c c0       	rjmp	.+152    	; 0xc06 <main+0x110>
				SystemStatus = !SystemStatus;
			}
			Debounce_Handler();
 b6e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Debounce_Handler>
		}

		if(SystemStatus==OFF){
 b72:	00 23       	and	r16, r16
 b74:	09 f4       	brne	.+2      	; 0xb78 <main+0x82>
 b76:	4d c0       	rjmp	.+154    	; 0xc12 <main+0x11c>
			continue;
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
 b78:	80 91 72 00 	lds	r24, 0x0072
 b7c:	81 30       	cpi	r24, 0x01	; 1
 b7e:	09 f4       	brne	.+2      	; 0xb82 <main+0x8c>
 b80:	80 c0       	rjmp	.+256    	; 0xc82 <main+0x18c>
			Update_Temp();
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	0e 94 4b 05 	call	0xa96	; 0xa96 <Button_READ>
 b88:	88 23       	and	r24, r24
 b8a:	09 f4       	brne	.+2      	; 0xb8e <main+0x98>
 b8c:	4b c0       	rjmp	.+150    	; 0xc24 <main+0x12e>
			if(ButtonEnable == TRUE){
 b8e:	10 91 75 00 	lds	r17, 0x0075
 b92:	11 30       	cpi	r17, 0x01	; 1
 b94:	09 f4       	brne	.+2      	; 0xb98 <main+0xa2>
 b96:	51 c0       	rjmp	.+162    	; 0xc3a <main+0x144>
					}
				}
				Store_Temp();

			}
			Mode_Handler();
 b98:	0e 94 c1 00 	call	0x182	; 0x182 <Mode_Handler>
			Debounce_Handler();
 b9c:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <Debounce_Handler>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
 ba0:	80 91 74 00 	lds	r24, 0x0074
 ba4:	88 23       	and	r24, r24
 ba6:	09 f4       	brne	.+2      	; 0xbaa <main+0xb4>
 ba8:	5b c0       	rjmp	.+182    	; 0xc60 <main+0x16a>
			SSD_DisplayNumber(Curr_Temp);
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
 baa:	80 91 74 00 	lds	r24, 0x0074
 bae:	81 30       	cpi	r24, 0x01	; 1
 bb0:	29 f4       	brne	.+10     	; 0xbbc <main+0xc6>
 bb2:	80 91 70 00 	lds	r24, 0x0070
 bb6:	81 30       	cpi	r24, 0x01	; 1
 bb8:	09 f4       	brne	.+2      	; 0xbbc <main+0xc6>
 bba:	71 c0       	rjmp	.+226    	; 0xc9e <main+0x1a8>
			SSD_DisplayNumber(Des_Temp);

		}else{
			SSD_Stop();
 bbc:	0e 94 84 04 	call	0x908	; 0x908 <SSD_Stop>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
 bc0:	80 91 71 00 	lds	r24, 0x0071
 bc4:	28 2f       	mov	r18, r24
 bc6:	30 e0       	ldi	r19, 0x00	; 0
 bc8:	80 91 73 00 	lds	r24, 0x0073
 bcc:	48 2f       	mov	r20, r24
 bce:	50 e0       	ldi	r21, 0x00	; 0
 bd0:	c9 01       	movw	r24, r18
 bd2:	05 96       	adiw	r24, 0x05	; 5
 bd4:	84 17       	cp	r24, r20
 bd6:	95 07       	cpc	r25, r21
 bd8:	0c f4       	brge	.+2      	; 0xbdc <main+0xe6>
 bda:	47 c0       	rjmp	.+142    	; 0xc6a <main+0x174>
			if(Blink_Status==TRUE){
				LED_ON();
			}else{
				LED_OFF();
			}
		}else if((Curr_Temp-5)>Des_Temp){
 bdc:	25 50       	subi	r18, 0x05	; 5
 bde:	30 40       	sbci	r19, 0x00	; 0
 be0:	42 17       	cp	r20, r18
 be2:	53 07       	cpc	r21, r19
 be4:	0c f4       	brge	.+2      	; 0xbe8 <main+0xf2>
 be6:	4a c0       	rjmp	.+148    	; 0xc7c <main+0x186>
			Cooler_ON();
		}else{
			Heater_OFF();
 be8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Heater_OFF>
			Cooler_OFF();
 bec:	0e 94 0b 05 	call	0xa16	; 0xa16 <Cooler_OFF>
		SSD_DisplayNumber(54);*/


		/*-------------------------------System ON/OFF Control Section----------------------------------------------*/

		if(Button_READ(BUTTON1)){
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	0e 94 4b 05 	call	0xa96	; 0xa96 <Button_READ>
 bf6:	88 23       	and	r24, r24
 bf8:	09 f4       	brne	.+2      	; 0xbfc <main+0x106>
 bfa:	bb cf       	rjmp	.-138    	; 0xb72 <main+0x7c>
			if(ButtonEnable == TRUE){
 bfc:	80 91 75 00 	lds	r24, 0x0075
 c00:	81 30       	cpi	r24, 0x01	; 1
 c02:	09 f0       	breq	.+2      	; 0xc06 <main+0x110>
 c04:	b4 cf       	rjmp	.-152    	; 0xb6e <main+0x78>
				SystemStatus = !SystemStatus;
 c06:	80 e0       	ldi	r24, 0x00	; 0
 c08:	00 23       	and	r16, r16
 c0a:	09 f4       	brne	.+2      	; 0xc0e <main+0x118>
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	08 2f       	mov	r16, r24
 c10:	ae cf       	rjmp	.-164    	; 0xb6e <main+0x78>
			}
			Debounce_Handler();
		}

		if(SystemStatus==OFF){
			Heater_OFF();
 c12:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <Heater_OFF>
			Cooler_OFF();
 c16:	0e 94 0b 05 	call	0xa16	; 0xa16 <Cooler_OFF>
			SSD_Stop();
 c1a:	0e 94 84 04 	call	0x908	; 0x908 <SSD_Stop>
			Mode = Temp_Control;
 c1e:	10 92 74 00 	sts	0x0074, r1
 c22:	9b cf       	rjmp	.-202    	; 0xb5a <main+0x64>
			Update_Temp();
		}

		/*-------------------------------Changing desired Temperature Section---------------------------------------*/

		if(Button_READ(BUTTON0)||Button_READ(BUTTON2)){ // Change desired temperature +/-
 c24:	82 e0       	ldi	r24, 0x02	; 2
 c26:	0e 94 4b 05 	call	0xa96	; 0xa96 <Button_READ>
 c2a:	88 23       	and	r24, r24
 c2c:	09 f4       	brne	.+2      	; 0xc30 <main+0x13a>
 c2e:	b8 cf       	rjmp	.-144    	; 0xba0 <main+0xaa>
			if(ButtonEnable == TRUE){
 c30:	10 91 75 00 	lds	r17, 0x0075
 c34:	11 30       	cpi	r17, 0x01	; 1
 c36:	09 f0       	breq	.+2      	; 0xc3a <main+0x144>
 c38:	af cf       	rjmp	.-162    	; 0xb98 <main+0xa2>
				Mode_Handler();
 c3a:	0e 94 c1 00 	call	0x182	; 0x182 <Mode_Handler>
				Mode = Temp_Set;
 c3e:	10 93 74 00 	sts	0x0074, r17

				if(Button_READ(BUTTON2)){
 c42:	82 e0       	ldi	r24, 0x02	; 2
 c44:	0e 94 4b 05 	call	0xa96	; 0xa96 <Button_READ>
 c48:	88 23       	and	r24, r24
 c4a:	09 f1       	breq	.+66     	; 0xc8e <main+0x198>
					if(Des_Temp<Max_Temp){
 c4c:	80 91 73 00 	lds	r24, 0x0073
 c50:	8b 34       	cpi	r24, 0x4B	; 75
 c52:	18 f4       	brcc	.+6      	; 0xc5a <main+0x164>
						Des_Temp +=5;
 c54:	8b 5f       	subi	r24, 0xFB	; 251
 c56:	80 93 73 00 	sts	0x0073, r24
				}else{
					if(Des_Temp>Min_Temp){
						Des_Temp -=5;
					}
				}
				Store_Temp();
 c5a:	0e 94 9f 00 	call	0x13e	; 0x13e <Store_Temp>
 c5e:	9c cf       	rjmp	.-200    	; 0xb98 <main+0xa2>
		}

		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
			SSD_DisplayNumber(Curr_Temp);
 c60:	80 91 71 00 	lds	r24, 0x0071
 c64:	0e 94 8d 04 	call	0x91a	; 0x91a <SSD_DisplayNumber>
 c68:	ab cf       	rjmp	.-170    	; 0xbc0 <main+0xca>
		}

		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
			Heater_ON();
 c6a:	0e 94 00 05 	call	0xa00	; 0xa00 <Heater_ON>
			if(Blink_Status==TRUE){
 c6e:	80 91 70 00 	lds	r24, 0x0070
 c72:	81 30       	cpi	r24, 0x01	; 1
 c74:	49 f0       	breq	.+18     	; 0xc88 <main+0x192>
				LED_ON();
			}else{
				LED_OFF();
 c76:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <LED_OFF>
 c7a:	6f cf       	rjmp	.-290    	; 0xb5a <main+0x64>
			}
		}else if((Curr_Temp-5)>Des_Temp){
			Cooler_ON();
 c7c:	0e 94 12 05 	call	0xa24	; 0xa24 <Cooler_ON>
 c80:	6c cf       	rjmp	.-296    	; 0xb5a <main+0x64>
		}

		/*-------------------------------Reading Currant Temperature Section----------------------------------------*/

		if(Update_Temp_En == TRUE){
			Update_Temp();
 c82:	0e 94 4d 00 	call	0x9a	; 0x9a <Update_Temp>
 c86:	7d cf       	rjmp	.-262    	; 0xb82 <main+0x8c>
		/*-------------------------------Heating/Cooling elements Control Section-------------------------------------*/

		if((Curr_Temp+5)<Des_Temp){
			Heater_ON();
			if(Blink_Status==TRUE){
				LED_ON();
 c88:	0e 94 ee 04 	call	0x9dc	; 0x9dc <LED_ON>
 c8c:	66 cf       	rjmp	.-308    	; 0xb5a <main+0x64>
				if(Button_READ(BUTTON2)){
					if(Des_Temp<Max_Temp){
						Des_Temp +=5;
					}
				}else{
					if(Des_Temp>Min_Temp){
 c8e:	80 91 73 00 	lds	r24, 0x0073
 c92:	84 32       	cpi	r24, 0x24	; 36
 c94:	10 f3       	brcs	.-60     	; 0xc5a <main+0x164>
						Des_Temp -=5;
 c96:	85 50       	subi	r24, 0x05	; 5
 c98:	80 93 73 00 	sts	0x0073, r24
 c9c:	de cf       	rjmp	.-68     	; 0xc5a <main+0x164>
		/*-------------------------------Seven Segments Display Control Section-------------------------------------*/

		if(Mode==Temp_Control){
			SSD_DisplayNumber(Curr_Temp);
		}else if(Mode==Temp_Set && Blink_Status==TRUE){
			SSD_DisplayNumber(Des_Temp);
 c9e:	80 91 73 00 	lds	r24, 0x0073
 ca2:	0e 94 8d 04 	call	0x91a	; 0x91a <SSD_DisplayNumber>
 ca6:	8c cf       	rjmp	.-232    	; 0xbc0 <main+0xca>

00000ca8 <__udivmodqi4>:
 ca8:	99 1b       	sub	r25, r25
 caa:	79 e0       	ldi	r23, 0x09	; 9
 cac:	04 c0       	rjmp	.+8      	; 0xcb6 <__udivmodqi4_ep>

00000cae <__udivmodqi4_loop>:
 cae:	99 1f       	adc	r25, r25
 cb0:	96 17       	cp	r25, r22
 cb2:	08 f0       	brcs	.+2      	; 0xcb6 <__udivmodqi4_ep>
 cb4:	96 1b       	sub	r25, r22

00000cb6 <__udivmodqi4_ep>:
 cb6:	88 1f       	adc	r24, r24
 cb8:	7a 95       	dec	r23
 cba:	c9 f7       	brne	.-14     	; 0xcae <__udivmodqi4_loop>
 cbc:	80 95       	com	r24
 cbe:	08 95       	ret

00000cc0 <__udivmodhi4>:
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	51 e1       	ldi	r21, 0x11	; 17
 cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <__udivmodhi4_ep>

00000cc8 <__udivmodhi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	a6 17       	cp	r26, r22
 cce:	b7 07       	cpc	r27, r23
 cd0:	10 f0       	brcs	.+4      	; 0xcd6 <__udivmodhi4_ep>
 cd2:	a6 1b       	sub	r26, r22
 cd4:	b7 0b       	sbc	r27, r23

00000cd6 <__udivmodhi4_ep>:
 cd6:	88 1f       	adc	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	5a 95       	dec	r21
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__udivmodhi4_loop>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	bc 01       	movw	r22, r24
 ce4:	cd 01       	movw	r24, r26
 ce6:	08 95       	ret

00000ce8 <_exit>:
 ce8:	f8 94       	cli

00000cea <__stop_program>:
 cea:	ff cf       	rjmp	.-2      	; 0xcea <__stop_program>
